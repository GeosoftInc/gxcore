//===========================================================================
NAME          = "Apply a convolution filter to array cannel along array (row)"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Montaj Popups/Array Channels"

DESCRIPTION   = "
   Apply a convolution filter to array cannel along array (row) in a database.
   The filter can be defined in a filter file or in a comma delimited string.

   VACVFILT.INCH    Input channel name
           .OUTCH   Output channel name
           .FILE    Filter file name
           .FILTER  OR a filter string, comma delimited
            
"
// Revision History:
// v7.0.0: Error appropriately if the selected channel is null. 
// v7.0.0: Revert the previous change below (don't dummy out unselections)
// v7.0.0: When filtering just selected cells, dummy out the rest of the
//         cells in the line, as opposed to copying over the same value
//         from the input channel. This will make it clear as to which cells
//         contain filtering results. 
// v7.0.0: If current selection is just the channel header ("[None]" case),
//         then filter entire channel.
//         Only create a maker for the output channel if we filtered the
//         entire input channel (as opposed to just certain selected cells).
// v5.1.5: New GX.
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "vacvfilt.gr"
#include "vacvfilt.grh"

//===========================================================================
//                                 INCLUDES
//===========================================================================

#include <all.gxh>

//===========================================================================
//                                 VARIABLES
//===========================================================================
                        
EDB         EData;                        
DB          Data;
DB_SYMB     InCh,OutCh;        // Channel handles
DB_SYMB     Line;              // Line handle
DGW         Diag;              // Dialogue handle
LST         List;              // List handle
DB_SELECT   Select;              // current selection mode
VA          YVA;
VV          InVV,OutVV;
FILTER      Filter;            // Filter

real        rFidStart,rFidIncr;
real        rFidFrom,rFidTo;

int         i;                 // utility int
int         iLines;            // Number of Lines Processed
int         iTotLines;         // Total Number of Lines to Process
int         iVAColumn;
int         iLenVA;
int         iStart,iEnd;
int         iTok;
int         iErr;

string(GS_MAX_PATH)        sFile,sDB;
string(128)                sFilter;          // Filter
string(DB_SYMB_NAME_SIZE)  sInCh,sOutCh,sLine;      // Channel Names
string(DB_SYMB_NAME_SIZE)  sFidFrom,sFidTo;
string(10)  sTemp;            // temporary number formating string
string(60)  sLabel;           // Label for progress bar
string(64)  sFid;

//===========================================================================
//                                    CODE
//===========================================================================

{
   if (!iInteractive_SYS()) Abort_SYS(_("This GX must be run interactively."));


   // --- Get the current selection information
   
   EData = Current_EDB();
   GetCurrentSelection_EDB(EData,sDB,sInCh,sLine,sFid);

   Data = Lock_EDB(EData);
   InCh = FindSymb_DB(Data,sInCh,DB_SYMB_CHAN);
   if (NULLSYMB != InCh)
      iVAColumn = iGetColVA_DB(Data, InCh);
   if (iVAColumn <= 1) 
      Abort_SYS(_("The selected channel must be an array channel to apply convolution filter along array."));
      
   
   // --- Create the Dialogue ---

   Diag = Create_DGW("VACVFILT");
   SetString_SYS("VACVFILT","INCH",sInCh);
   

   // --- Set up input and output lists ---

   List = GetList_DGW(Diag,_VACVFILT_1);
   SymbLST_DB(Data,List,DB_SYMB_CHAN);
   Sort_LST(List,0,0);

   iErr = 0;
   do {
      // --- Set any Defaults ---

      SetInfoSYS_DGW(Diag,_VACVFILT_0,DGW_TEXT,"VACVFILT","INCH");     
      SetInfoSYS_DGW(Diag,_VACVFILT_1,DGW_TEXT,"VACVFILT","OUTCH");     
      SetInfoSYS_DGW(Diag,_VACVFILT_2,DGW_FILEPATH,"VACVFILT","FILE");    
      SetInfoSYS_DGW(Diag,_VACVFILT_3,DGW_TEXT,"VACVFILT","FILTER");    

      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i != 0) Cancel_SYS();    // He hit cancel


      // --- Get the Strings ---

      GetInfoSYS_DGW(Diag,_VACVFILT_0,DGW_TEXT,"VACVFILT","INCH");     
      GetInfoSYS_DGW(Diag,_VACVFILT_1,DGW_TEXT,"VACVFILT","OUTCH");     
      GetInfoSYS_DGW(Diag,_VACVFILT_2,DGW_FILEPATH,"VACVFILT","FILE");    
      GetInfoSYS_DGW(Diag,_VACVFILT_3,DGW_TEXT,"VACVFILT","FILTER");                            

      
      GetString_SYS("VACVFILT","FILE",sFile);
      GetString_SYS("VACVFILT","FILTER",sFilter);
      
      if (iStrlen_STR(sFile) == 0 && iStrMin_STR(sFilter) == 0) {
         DisplayMessage_SYS(_("Error"),_("The GX requires a filter file or a filter string."));
         iErr = 1;
      } else
         iErr = 0;
      
      
   } while (iErr);
   
   // --- Destroy the Dialogue ---

   Destroy_DGW(Diag);
   

   // --- Get Parameters ---

   GetString_SYS("VACVFILT","INCH",sInCh);
   GetString_SYS("VACVFILT","OUTCH",sOutCh);
   GetString_SYS("VACVFILT","FILE",sFile);
   GetString_SYS("VACVFILT","FILTER",sFilter);

   if (iStrcmp_STR(sOutCh,"",STR_CASE_TOLERANT) == 0) Strcpy_STR(sOutCh,sInCh);

   
   // --- get the filter ---

   if (iStrMin_STR(sFilter) > 0)
      Filter = Create_FLT(sFilter);
   else
      Filter = Load_FLT(sFile);


   // --- Save current selection and set to new selection ---

   Select = GetSelect_DB(Data);
   if (iStrcmp_STR(sLine,"[All]",STR_CASE_TOLERANT) != 0 && iStrcmp_STR(sFid,"[None]",STR_CASE_TOLERANT) != 0) {
      Select_DB(Data,"",DB_LINE_SELECT_EXCLUDE);
      Select_DB(Data,sLine,DB_LINE_SELECT_INCLUDE);
   }   
            
   
   // --- Does the Input Channel Exist ? ---

   if (!iExistSymb_DB(Data,sInCh,DB_SYMB_CHAN))
      Abort_SYS(_("Input channel does not exist."));
   InCh = FindSymb_DB(Data,sInCh,DB_SYMB_CHAN);

   iVAColumn = iGetColVA_DB(Data, InCh);
   if (iVAColumn <= 1) 
      Abort_SYS(_("The selected channel must be an array channel to apply convolution filter along array."));
   

   // --- Does the Ouput Channel Exist ? ---

   if (!iExistSymb_DB(Data,sOutCh,DB_SYMB_CHAN)) {  // if channel does not exist 
      OutCh = DupSymb_DB(Data,InCh,sOutCh);
      UnLockSymb_DB(Data,OutCh);
   } else
      OutCh = FindSymb_DB(Data,sOutCh,DB_SYMB_CHAN);
   if (iVAColumn != iGetColVA_DB(Data,OutCh)) 
      Abort_SYS(_("Input and output channels have different array sizes."));


   // --- Lock the channel symbols ---

   if (InCh != OutCh) 
      LockSymb_DB(Data,InCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
   LockSymb_DB(Data,OutCh,DB_LOCK_READWRITE,DB_WAIT_INFINITY);


   // --- Create VA ---

   YVA = Create_VA(REAL,0,iVAColumn);
   InVV  = Create_VV(REAL,0);
   OutVV = Create_VV(REAL,0);
   

   // --- Prepare to do the work ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);

   // --- Go through all selected Lines ---

   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {
      // --- Update the Progress Bar ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      GetSymbName_DB(Data,Line,sTemp);
      UnLockSymb_DB(Data,Line);
      Strcpy_STR(sLabel,_("Filter line: "));
      Strcat_STR(sLabel,sTemp);
   
      Progress_SYS(1);
      ProgName_SYS(_("Filter along array"),1);

      
      // --- Get VA data ---

      GetChanVA_DB(Data,Line,InCh,YVA);
      iLenVA = iLen_VA(YVA);
      
      rFidStart = rGetFidStart_VA(YVA); 
      rFidIncr  = rGetFidIncr_VA(YVA);  

      iStart = 0;
      iEnd = iLenVA-1;

      if (iStrcmp_STR(sFid,"[All]",STR_CASE_TOLERANT) != 0 && iStrcmp_STR(sFid,"[None]",STR_CASE_TOLERANT) != 0) {

         iTok = iTokens_STR(sFid," ");       
         if (iTok < 3) break;                // this should not have happened
      
         GetToken_STR(sFidFrom, sFid, 0);
         GetToken_STR(sFidTo, sFid, 2);
         
         rFidFrom = rScanR_STR(sFidFrom);    
         rFidTo = rScanR_STR(sFidTo);        
         
         iStart = (int)((rFidFrom - rFidStart)/rFidIncr);
         iEnd   = (int)((rFidTo - rFidStart)/rFidIncr);
         if (iStart < 0) iStart = 0;
         if (iEnd > iLenVA-1) iEnd = iLenVA-1;
      }
      
      
      // --- Go through all the selected data points ---
      
      for (i = iStart; i <= iEnd; i++) {
      
         // --- Progress ---
      
         ProgName_SYS(sLabel,0);
         ProgUpdate_SYS( (int) ((real) i / (real) (iEnd-iStart+1) * 100.0) );

         
         // --- Get each row of data

         GetVV_VA (YVA,i,VA_ROW,InVV);
      
      
         // --- Apply filter ---

         Filter_VVU(InVV,OutVV,Filter);
         SetVV_VA (YVA,i,VA_ROW,OutVV);
      }
      
      // --- Put VA data ---
      
      PutChanVA_DB(Data,Line,OutCh,YVA);
         

      // --- Advance to Next Line ---        

      Line = NextSelLine_DB(Data, Line );
      iLines++;

   }

      
   // --- Add maker only if the filter was applied on the entire channel (as opposed to certain selected cells) ---

   if (iStrcmp_STR(sFid,"[All]",STR_CASE_TOLERANT) == 0 || iStrcmp_STR(sFid,"[None]",STR_CASE_TOLERANT) == 0)
      EasyMakerSymb_DB(Data,OutCh,_("Non-linear filter along array (row)"),"VACVFILT;");


   // --- Clean ---
   
   Destroy_VA(YVA);
   Destroy_VV(InVV);
   Destroy_VV(OutVV);
   Destroy_FLT(Filter);  
   
   
   // --- Unlock the channel symbol ---

   if (InCh != OutCh) UnLockSymb_DB(Data,InCh);
   UnLockSymb_DB(Data,OutCh);
   
   // --- reset starting selections --- 

   SetSelect_DB(Data,Select);
   UnLock_EDB(EData);

   
   // --- done ---

   Progress_SYS(0);

}
