//===========================================================================
NAME          = "Create a grid from a section line"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Grid and Image"

DESCRIPTION   = "

        GRIDSECTION.CHAN                 Optional Z channel to include with TIN
        GRIDSECTION.FILE                 Name of TIN file.
"
// Revision History:
// v5.1.3: Using FindChan_DB and iExistChan_DB
//===========================================================================

RESOURCE = "gridsection.gr"
#include "gridsection.grh"

//===========================================================================

#include <all.gxh>

//===========================================================================
//                             VARIABLES
//===========================================================================

EDB        EData;
DB         Data;
DB_SYMB    XCh,YCh,ZCh; // Channel handles
DB_SYMB    Line;        // Line handle
DGW        Diag;
VV         VVx, VVy, VVz, VVzt;
TIN        Tin;
IMG        Img;
LST        List;
IPJ        Ipj;

int   i,iX,iY,iNX,iNY,iN;
real rCell,rXMin,rXMax,rYMin,rYMax,rX,rY,rMin,rMax,rF;
string(GS_MAX_PATH) sFile;
string(STR_DB_SYMBOL) sXChan,sYChan,sZChan,sCurLine;
string(STR_DEFAULT) sUnits;

//===========================================================================
//                           MAP CODE
//===========================================================================

{

   EData = Current_EDB();

   // --- Get currently selected line ---

   GetCurLine_EDB(EData,sCurLine);

   Data = Lock_EDB(EData);
   
   // --- Are we running interactively ? ---

   if (iInteractive_SYS()) {


      // --- Create the Dialogue ---

      Diag = Create_DGW("GRIDSECTION");

      // --- Set up lists ---

      List = GetList_DGW(Diag,_GRIDSECTION_1);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);

      List = GetList_DGW(Diag,_GRIDSECTION_2);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);

      List = GetList_DGW(Diag,_GRIDSECTION_5);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);

      // --- Set any Defaults from INI ---

      SetInfoSYS_DGW(Diag,_GRIDSECTION_0,DGW_FILEPATH,"GRIDSECTION","FILE");     
      SetInfoSYS_DGW(Diag,_GRIDSECTION_1,DGW_TEXT,"GRIDSECTION","X");     
      SetInfoSYS_DGW(Diag,_GRIDSECTION_2,DGW_TEXT,"GRIDSECTION","Z");     
      SetInfoSYS_DGW(Diag,_GRIDSECTION_3,DGW_TEXT,"GRIDSECTION","XMIN");     
      SetInfoSYS_DGW(Diag,_GRIDSECTION_4,DGW_TEXT,"GRIDSECTION","XMAX");     
      SetInfoSYS_DGW(Diag,_GRIDSECTION_5,DGW_TEXT,"GRIDSECTION","GRIDVAL");     
      SetInfoSYS_DGW(Diag,_GRIDSECTION_6,DGW_TEXT,"GRIDSECTION","CELLSIZE");

      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i == 1)
         Cancel_SYS();    // He hit cancel
     
      // --- Put values back in INI ---

      GetInfoSYS_DGW(Diag,_GRIDSECTION_0,DGW_FILEPATH,"GRIDSECTION","FILE");     
      GetInfoSYS_DGW(Diag,_GRIDSECTION_1,DGW_TEXT,"GRIDSECTION","X");     
      GetInfoSYS_DGW(Diag,_GRIDSECTION_2,DGW_TEXT,"GRIDSECTION","Z");     
      SetInfoSYS_DGW(Diag,_GRIDSECTION_3,DGW_TEXT,"GRIDSECTION","XMIN");     
      SetInfoSYS_DGW(Diag,_GRIDSECTION_4,DGW_TEXT,"GRIDSECTION","XMAX");     
      GetInfoSYS_DGW(Diag,_GRIDSECTION_5,DGW_TEXT,"GRIDSECTION","GRIDVAL");     
      GetInfoSYS_DGW(Diag,_GRIDSECTION_6,DGW_TEXT,"GRIDSECTION","CELLSIZE");

      Destroy_DGW(Diag);
      
   }      
         
   // --- get output file ---

   GetString_SYS("GRIDSECTION","FILE",sFile);
   if(!iStrlen_STR(sFile))
      Abort_SYS(_("Output grid file name not specified"));

   // --- get channels ---
   
   GetString_SYS("GRIDSECTION","X",sXChan);
   GetString_SYS("GRIDSECTION","Z",sYChan);
   GetString_SYS("GRIDSECTION","GRIDVAL",sZChan);

   // --- Do the position channels exist ? ---

   if (!iExistChan_DB(Data,sXChan))
      Abort_SYS(_("X (along ground) channel does not exist."));
   XCh = FindChan_DB(Data,sXChan);

   if (!iExistChan_DB(Data,sYChan))
      Abort_SYS(_("Z (elevation) channel does not exist."));
   YCh = FindChan_DB(Data,sYChan);
   
   if (!iExistChan_DB(Data,sZChan))
      Abort_SYS(_("Grid value channel does not exist."));
   ZCh = FindChan_DB(Data,sZChan);

   rCell = rGetReal_SYS("GRIDSECTION","CELLSIZE");
   if(rCell==rDUMMY)
      Abort_SYS(_("Cell size must be defined."));
   if(rCell<0.0)
      Abort_SYS(_("Maximum Join Length Invalid. Must be > 0"));


   // --- Lock the channel symbols ---

   LockSymb_DB(Data,XCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
   LockSymb_DB(Data,YCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
   LockSymb_DB(Data,ZCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);

   // --- get some VV's ---

   VVx = Create_VV(REAL,0);
   VVy = Create_VV(REAL,0);
   VVz = Create_VV(REAL,0);

   Line = FindSymb_DB(Data,sCurLine,DB_SYMB_LINE);
   if(Line==NULLSYMB) Abort_SYS(_("Error opening current line"));

   
   // --- Get the X,Y positions, Z values ---

   Progress_SYS(1);
   ProgName_SYS(_("Loading positions"),0);

   // --- Get X and Y ---

   GetChanVV_DB(Data,Line,XCh,VVx);
   GetChanVV_DB(Data,Line,YCh,VVy);
   ReFidVV_VV(VVy,VVx);

   GetChanVV_DB(Data,Line,ZCh,VVz);
   ReFidVV_VV(VVz,VVx);

   // --- Get limits on X ---

   rMin = rGetReal_SYS("GRIDSECTION", "XMIN");
   rMax = rGetReal_SYS("GRIDSECTION", "XMAX");


   // --- Get the units from the IPJ ---

   Ipj = Create_IPJ();
   GetIPJ_DB(Data, XCh, Ipj);
   GetUnits_IPJ(Ipj,rF,sUnits);


   // --- Unlock the channel symbols ---

   UnLockSymb_DB(Data,XCh);
   UnLockSymb_DB(Data,YCh);
   UnLockSymb_DB(Data,ZCh);

   // --- Remove values outside the intended range ---

   if(rMin!=rDUMMY || rMax!=rDUMMY) {
      if(rMin==rDUMMY) rMin=rMIN;
      if(rMax==rDUMMY) rMax=rMAX;
      DummyRange_VVU(VVx, rMin, rMax, 0, 1);
   }

   // --- Create TIN (it removes values where one is a dummy) ---

   Tin = Create_TIN(VVx, VVy, VVz);

   // --- Get range of X, Z ---

   RangeDouble_VV(VVx, rXMin, rXMax);
   RangeDouble_VV(VVy, rYMin, rYMax);

   rXMin = rFloor_MATH(rXMin/rCell)*rCell;
   rYMin = rFloor_MATH(rYMin/rCell)*rCell;
   rXMax = rCeil_MATH(rXMax/rCell)*rCell;
   rYMax = rCeil_MATH(rYMax/rCell)*rCell;

   iNX = (int)((rXMax - rXMin)/rCell);
   iNY = (int)((rYMax - rYMin)/rCell);

   iN = iNX*iNY;

   SetLen_VV(VVx, iN);
   SetLen_VV(VVy, iN);
   SetLen_VV(VVz, iN);

   // --- Set grid cell values into the VVs ---
   
   i = 0;
   for(iX=0;iX<iNX;iX++) {
      rX = rXMin + (real)iX*rCell;

      for(iY=0;iY<iNY;iY++) {

         rY = rYMin + (real)iY*rCell;
         SetReal_VV(VVx,i,rX);
         SetReal_VV(VVy,i,rY);
         i++;
      }
   }

   // --- Calculate the Z values ---
   
   InterpVV_TIN(Tin, VVx, VVy, VVz);

   // --- Create grid ---

   Img = CreateNewFile_IMG(GS_FLOAT,1,iNX,iNY,sFile);

   SetInfo_IMG(Img, rCell, rCell, rXMin, rYMin, 0.0);


   // --- Set units in the IMG ---

   GetIPJ_IMG(Img, Ipj);
   SetUnits_IPJ(Ipj,rF,sUnits);
   SetIPJ_IMG(Img, Ipj);


   // --- Write values to the IMG ---

   VVzt = Create_VV(REAL,iNY);

   for(iX=0;iX<iNX;iX++) {   
      Copy2_VV(VVzt, 0, VVz, iX*iNY, iNY);
      WriteX_IMG(Img, iX, 0, iNY, VVzt);
   }


   // --- done ---

   Progress_SYS(0);

   Destroy_VV(VVx);
   Destroy_VV(VVy);
   Destroy_VV(VVz);
   Destroy_VV(VVzt);
   Destroy_TIN(Tin);
   Destroy_IMG(Img);

   UnLock_EDB(EData);
}