//===========================================================================

NAME          = "Line location plot"
#include <version.gxh>

TRANSLATIONDOMAIN = "geochemistry"
TRANSLATIONFRIENDLYPATH = "GX/GeochemMap/Line Plots"

DESCRIPTION   = "

      CHLINE.LINE_THICKNESS      line thickness
            .LINE_COLOR          line Colour
            .LABEL_FORMAT        label format (see help)
            .LABEL_LOCATION      label location (see help)
            .LABEL_SIZE          label size in mm.
            .LABEL_COLOR         label Colour
            .LABEL_WEIGHT        label weight
            .H_OFFSET            horizontal label offset
            .V_OFFSET            vertical label offset
"
// Revision History:
// v5.1.3: Using "Current" X and Y channels

//===========================================================================

RESOURCE = "chline.gr"
#include "chline.grh"


//===========================================================================

#include <all.gxh>


//===========================================================================
//                             VARIABLES
//===========================================================================

string(STR_GROUP) sGrpName;
string(STR_DEFAULT) sLabel;
string(STR_DB_SYMBOL) sLine;
string(8)   sFormat;
string(2)   sChar;
string(STR_DEFAULT_SHORT) sLabelColour,sLineColour,sFont;

EDB        EData;
DB         Data;
DB_SYMB    XCh,YCh;     // Channel handles
DB_SYMB    Line;        // Line handle
EMAP  EMap;
MAP   Map;
MVIEW View;
DGW   Diag;
VV    VVx,VVy;
IPJ   DataIPJ;
int   i,iLines,iTotLines;
int   iFormat,iLoc,iUp;
int   iLen;
int   iLabelWeight;
real  rScale;
real  rHoff,rVoff;
real  rVangle,rThickness,rLabelSize;


//===========================================================================
//                           MAP CODE
//===========================================================================

{
   // --- Are we running interactively ? ---

   if (iInteractive_SYS()) {


      // --- Create the Dialogue ---

      Diag = Create_DGW("CHLINE");

      
      // --- Set any Defaults from INI ---

      SetInfoSYS_DGW(Diag,_CHLINE_0,DGW_TEXT,     "CHLINE","LINE_COLOR");
      SetInfoSYS_DGW(Diag,_CHLINE_1,DGW_TEXT,     "CHLINE","LINE_THICKNESS");
      SetInfoSYS_DGW(Diag,_CHLINE_2,DGW_LISTALIAS,"CHLINE","LABEL_FORMAT");
      SetInfoSYS_DGW(Diag,_CHLINE_3,DGW_LISTALIAS,"CHLINE","LABEL_LOCATION");
      SetInfoSYS_DGW(Diag,_CHLINE_4,DGW_TEXT,     "CHLINE","LABEL_SIZE");
      SetInfoSYS_DGW(Diag,_CHLINE_5,DGW_TEXT,     "CHLINE","LABEL_COLOR");
      SetInfoSYS_DGW(Diag,_CHLINE_6,DGW_LISTALIAS,"CHLINE","LABEL_WEIGHT");
      SetInfoSYS_DGW(Diag,_CHLINE_7,DGW_TEXT,     "CHLINE","H_OFFSET");
      SetInfoSYS_DGW(Diag,_CHLINE_8,DGW_TEXT,     "CHLINE","V_OFFSET");


      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i == 1)
         Cancel_SYS();    // He hit cancel

      
      // --- Put values back in INI ---

      GetInfoSYS_DGW(Diag,_CHLINE_0,DGW_TEXT,     "CHLINE","LINE_COLOR");
      GetInfoSYS_DGW(Diag,_CHLINE_1,DGW_TEXT,     "CHLINE","LINE_THICKNESS");
      GetInfoSYS_DGW(Diag,_CHLINE_2,DGW_LISTALIAS,"CHLINE","LABEL_FORMAT");
      GetInfoSYS_DGW(Diag,_CHLINE_3,DGW_LISTALIAS,"CHLINE","LABEL_LOCATION");
      GetInfoSYS_DGW(Diag,_CHLINE_4,DGW_TEXT,     "CHLINE","LABEL_SIZE");
      GetInfoSYS_DGW(Diag,_CHLINE_5,DGW_TEXT,     "CHLINE","LABEL_COLOR");
      GetInfoSYS_DGW(Diag,_CHLINE_6,DGW_LISTALIAS,"CHLINE","LABEL_WEIGHT");
      GetInfoSYS_DGW(Diag,_CHLINE_7,DGW_TEXT,     "CHLINE","H_OFFSET");
      GetInfoSYS_DGW(Diag,_CHLINE_8,DGW_TEXT,     "CHLINE","V_OFFSET");

   }

   EData = Current_EDB();
   Data = Lock_EDB(EData);

   EMap  = Current_EMAP();
   Map = Lock_EMAP(EMap);

   // --- get parameters ---

   rThickness = rGetReal_SYS("CHLINE","LINE_THICKNESS");
   GetString_SYS("CHLINE","LINE_COLOR",sLineColour);    

   GetString_SYS("CHLINE","LABEL_FORMAT",sFormat);    
   iLoc = iGetInt_SYS("CHLINE","LABEL_LOCATION");
   rLabelSize = rGetReal_SYS("CHLINE","LABEL_SIZE");
   GetString_SYS("CHLINE","LABEL_COLOR",sLabelColour);
   iLabelWeight = iGetInt_SYS("CHLINE","LABEL_WEIGHT");
   rHoff = rGetReal_SYS("CHLINE","H_OFFSET");
   rVoff = rGetReal_SYS("CHLINE","V_OFFSET");

   
   // --- vertical line info ---

   if (iExistReal_SYS("MAP","UP_REF_ANGLE"))     
      rVangle = rGetReal_SYS("MAP","UP_REF_ANGLE");     
   else
      rVangle = rGetReal_SYS("MAP","UP_REF_ANGLE");     
   GetString_SYS ("MAP","UP",sLabel);

   if (iCharComp_STR(sLabel,"L")) iUp = -1;
   else iUp = 1;


   // --- construct format option ---

   iLen = iStrlen_STR(sFormat);
   iFormat = 0;
   for (i=0;i<iLen;i++) {
      Substr_STR(sChar,sFormat,i,1);
      if (iCharComp_STR(sChar,"T"))      iFormat += DB_LINE_LABEL_FORMAT_TYPE;
      else if (iCharComp_STR(sChar,"L")) iFormat += DB_LINE_LABEL_FORMAT_LINE;
      else if (iCharComp_STR(sChar,"V")) iFormat += DB_LINE_LABEL_FORMAT_VERSION;
      else if (iCharComp_STR(sChar,"F")) iFormat += DB_LINE_LABEL_FORMAT_FLIGHT;
   }
      
   
   // --- Do the reference channels exist ? ---

   XCh = GetXYZChanSymb_DB(Data, DB_CHAN_X);
   if (XCh==NULLSYMB)
      Abort_SYS(_("The current X channel does not exist."));

   YCh = GetXYZChanSymb_DB(Data, DB_CHAN_Y);
   if (YCh==NULLSYMB)
      Abort_SYS(_("The current Y channel does not exist."));



   // --- open the data view ---

   View = Create_MVIEW(Map,"*Data",MVIEW_WRITEOLD);


   // --- create flight group ---

   GetName_DB(Data,DB_NAME_FILE,sLabel);
   FileNamePart_STR(sLabel,sLabel,STR_FILE_PART_NAME);
//   Strcat_STR(sLabel,"_path");
   GenGroupName_STR("PATH",sLabel,"",sGrpName);
   Strcpy_STR(sLabel,sGrpName);
   StartGroup_MVIEW(View,sLabel,MVIEW_GROUP_NEW);

   // --- Handle Projections ---
   
   DataIPJ = Create_IPJ();
   GetIPJ_DB(Data,XCh,DataIPJ);
   SetWorkingIPJ_MVIEW(View,DataIPJ);


   // --- set plotting parameters ---

   SetThinRes_MVIEW(View,0.02);
   rScale = rScaleMM_MVIEW(View);


   // --- set font characteristics --- 

   if (iGlobal_SYS("MONTAJ.DEFAULT_MAP_FONT",sFont) == 1)
      Strcpy_STR(sFont,_n("Arial"));
   TextFont_MVIEW(View,sFont,FALSE,iLabelWeight,FALSE);
   TextColor_MVIEW(View,iColor_MVIEW(sLabelColour));
   TextSize_MVIEW(View,rLabelSize*rScale);


   // --- set line characteristics ---

   LineColor_MVIEW(View,iColor_MVIEW(sLineColour));
   LineThick_MVIEW(View,rThickness*rScale);
   LineStyle_MVIEW(View,0,0.0);


   // --- Create link to database ---

   Link_MVIEW(View,Data,_n("Data Link"));


   // --- get some VV's ---

   VVx = Create_VV(REAL,0);
   VVy = Create_VV(REAL,0);


   // --- Lock the channel symbols ---

   LockSymb_DB(Data,XCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
   LockSymb_DB(Data,YCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);


   // --- Draw lines ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);
   Progress_SYS(1);
   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {

      // --- get line label ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      LineLabel_DB(Data,Line,sLine,iFormat);
      UnLockSymb_DB(Data,Line);


      // --- Update the Progress Bar ---

      Strcpy_STR(sLabel,_("Drawing line: "));
      Strcat_STR(sLabel,sLine);
      ProgName_SYS(sLabel,0);
      ProgUpdateL_SYS(iLines,iTotLines);


      // --- Get X and Y ---

      GetChanVV_DB(Data,Line,XCh,VVx);
      GetChanVV_DB(Data,Line,YCh,VVy);
      ReFidVV_VV(VVy,VVx);


      // --- add line link ---

      LineLabel_DB(Data,Line,sLine,DB_LINE_LABEL_FORMAT_LINK);
      ChangeLineMessage_MVIEW(View,sLine);


      // --- Draw the line ---

      FlightPlot_MVU(View,VVx,VVy,sLine,iLoc,rVangle,iUp,rHoff*rScale,rVoff*rScale);


      // --- Advance to Next Line ---        

      Line = NextSelLine_DB(Data, Line );
      iLines++;

   }


   // --- Unlock the channel symbol ---

   UnLockSymb_DB(Data,XCh);
   UnLockSymb_DB(Data,YCh);


   // --- Add maker object ---

   EasyMaker_MVIEW(View,_("Generate flight lines"),"CHLINE;");


   // --- done ---

   Progress_SYS(0);
   Destroy_VV(VVx);
   Destroy_VV(VVy);
   Destroy_MVIEW(View);
   Destroy_IPJ(DataIPJ);

   // --- Release locks ---

   UnLock_EDB(EData);
   UnLock_EMAP(EMap);
}
