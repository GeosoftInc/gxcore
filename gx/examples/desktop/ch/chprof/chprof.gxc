//===========================================================================

NAME          = "Profile line plot"
#include <version.gxh>

TRANSLATIONDOMAIN = "geochemistry"
TRANSLATIONFRIENDLYPATH = "GX/GeochemMap/Line Plots"

DESCRIPTION   = "

      CHPROF.CHANNEL      line thickness
             .COLOR        line Colour
             .THICKNESS    line thickness
             .STYLE        line style number
             .PITCH        line pitch
             .SCALE        vertical scale in units/mm
             .BASE         profile base level, blank for line minimum
             .GAP          maximum down-line gap
             .JOIN         1 - join line ends
                           0 - do not join line ends
"
// Revision History:
// v5.1.3: Using "Current" X and Y channels
//         Using FindChan_DB and iExistChan_DB
//===========================================================================

RESOURCE = "chprof.gr"
#include "chprof.grh"

//===========================================================================

#include <all.gxh>


//===========================================================================
//                             VARIABLES
//===========================================================================

string(STR_GROUP) sGrpName;
string(STR_DEFAULT_SHORT) sLineColour;
string(STR_DB_SYMBOL) sLine;
string(STR_DEFAULT_LONG) sLabel;
string(STR_DB_SYMBOL) sChan;
string(STR_GROUP) sGroup;
string(STR_FILE) sDB;

EDB         EData;
DB          Data;
DB_SYMB     XCh,YCh,ZCh; // Channel handles
DB_SYMB     Line;        // Line handle
EMAP        EMap;
MAP         Map;
MVIEW       View;
DGW         Diag;
LST         List;
LPT         LinePat;
IPJ         DataIPJ;
VV          VVx,VVy,VVz;
REG         MapReg;
int         i,iLines,iTotLines;
int         iJoin,iUp,iLen,iStyle;
real        rStart,rIncr,rPitch;
real        rSmm,rScale,rGap,rBase;
real        rVangle,rThickness;


//===========================================================================
//                           MAP CODE
//===========================================================================

{
   EData = Current_EDB();
   Data = Lock_EDB(EData);
   EMap  = Current_EMAP();
   Map = Lock_EMAP(EMap);
   MapReg = GetREG_MAP(Map);


   // --- Are we running interactively ? ---

   if (iInteractive_SYS()) {


      // --- Create the Dialogue ---

      Diag = Create_DGW("CHPROF");

      
      // --- Set up lists ---

      List = GetList_DGW(Diag,_CHPROF_0);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);
      
      LinePat = GetLPT_MAP(Map);
      List = GetList_DGW(Diag,_CHPROF_3);
      GetLST_LPT(LinePat,List);


      // --- Set any Defaults from INI ---

      SetInfoSYS_DGW(Diag,_CHPROF_0,DGW_TEXT,     "CHPROF","CHANNEL");
      SetInfoSYS_DGW(Diag,_CHPROF_1,DGW_TEXT,     "CHPROF","COLOR");
      SetInfoSYS_DGW(Diag,_CHPROF_2,DGW_TEXT,     "CHPROF","THICKNESS");
      SetInfoSYS_DGW(Diag,_CHPROF_3,DGW_LISTALIAS,"CHPROF","STYLE");
      SetInfoSYS_DGW(Diag,_CHPROF_4,DGW_TEXT,     "CHPROF","PITCH");
      SetInfoSYS_DGW(Diag,_CHPROF_5,DGW_TEXT,     "CHPROF","SCALE");
      SetInfoSYS_DGW(Diag,_CHPROF_6,DGW_TEXT,     "CHPROF","BASE");
      SetInfoSYS_DGW(Diag,_CHPROF_7,DGW_TEXT,     "CHPROF","GAP");
      SetInfoSYS_DGW(Diag,_CHPROF_8,DGW_LISTALIAS,"CHPROF","JOIN");


      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i == 1)
         Cancel_SYS();    // He hit cancel

      
      // --- Put values back in INI ---

      GetInfoSYS_DGW(Diag,_CHPROF_0,DGW_TEXT,     "CHPROF","CHANNEL");
      GetInfoSYS_DGW(Diag,_CHPROF_1,DGW_TEXT,     "CHPROF","COLOR");
      GetInfoSYS_DGW(Diag,_CHPROF_2,DGW_TEXT,     "CHPROF","THICKNESS");
      GetInfoSYS_DGW(Diag,_CHPROF_3,DGW_LISTALIAS,"CHPROF","STYLE");
      GetInfoSYS_DGW(Diag,_CHPROF_4,DGW_TEXT,     "CHPROF","PITCH");
      GetInfoSYS_DGW(Diag,_CHPROF_5,DGW_TEXT,     "CHPROF","SCALE");
      GetInfoSYS_DGW(Diag,_CHPROF_6,DGW_TEXT,     "CHPROF","BASE");
      GetInfoSYS_DGW(Diag,_CHPROF_7,DGW_TEXT,     "CHPROF","GAP");
      GetInfoSYS_DGW(Diag,_CHPROF_8,DGW_LISTALIAS,"CHPROF","JOIN");

   }


   // --- get parameters ---

   GetString_SYS("CHPROF","CHANNEL",sChan);    
   GetString_SYS("CHPROF","COLOR",sLineColour);    
   rThickness = rGetReal_SYS("CHPROF","THICKNESS");
   iStyle = iGetInt_SYS("CHPROF","STYLE");
   rPitch = rGetReal_SYS("CHPROF","PITCH");
   rScale = rGetReal_SYS("CHPROF","SCALE");
   if (rScale == 0.0) 
      Abort_SYS(_("Profile scale cannot be 0.0"));
   if (iExistReal_SYS("CHPROF","BASE"))
      rBase   = rGetReal_SYS("CHPROF","BASE");
   else
      rBase   = rDUMMY;
   if (iExistReal_SYS("CHPROF","GAP"))
      rGap    = rGetReal_SYS("CHPROF","GAP");
   else
      rGap    = rDUMMY; 
   iJoin      = iGetInt_SYS ("CHPROF","JOIN");


   // --- vertical line info ---

   Get_REG(MapReg,"MAP.UP_DIRECTION",sLabel,sizeof(sLabel));
   if (iStrcmp_STR(sLabel,_n("left"),STR_CASE_TOLERANT) == 0)
      iUp = -1;
   else
      iUp = 1;

   rVangle = rDUMMY;   
   GetReal_REG(MapReg,"MAP.UP_ANGLE",rVangle);
   if (rVangle == rDUMMY)
      rVangle = 67.5;


   // --- Do the reference channels exist ? ---

   XCh = GetXYZChanSymb_DB(Data, DB_CHAN_X);
   if (XCh==NULLSYMB)
      Abort_SYS(_("The current X channel does not exist."));

   YCh = GetXYZChanSymb_DB(Data, DB_CHAN_Y);
   if (YCh==NULLSYMB)
      Abort_SYS(_("The current Y channel does not exist."));

   ZCh = FindChan_DB(Data,sChan);
   if (ZCh==NULLSYMB)
      Abort_SYS(_("channel does not exist."));



   // --- open the data view ---

   View = Create_MVIEW(Map,"*Data",MVIEW_WRITEOLD);


   // --- Handle Projections ---
   
   DataIPJ = Create_IPJ();
   GetIPJ_DB(Data,XCh,DataIPJ);
   SetWorkingIPJ_MVIEW(View,DataIPJ);


   // --- create profile group ---

   GetName_DB(Data,DB_NAME_FILE,sDB);
   FileNamePart_STR(sDB,sGroup,STR_FILE_PART_NAME);
   GenGroupName_STR("PROFILE",sGroup,sChan,sGrpName);
   Strcpy_STR(sGroup,sGrpName);
   StartGroup_MVIEW(View,sGroup,MVIEW_GROUP_NEW);


   // --- add maker ---

   EasyMaker_MVIEW(View,_("New profile"),"CHPROF;");



   // --- set plotting parameters ---

   SetThinRes_MVIEW(View,0.02);
   rSmm = rScaleMM_MVIEW(View);


   // --- set line characteristics ---

   LineColor_MVIEW(View,iColor_MVIEW(sLineColour));
   LineThick_MVIEW(View,rThickness*rSmm);
   LineStyle_MVIEW(View,iStyle,rPitch*rSmm);


   // --- get some VV's ---

   VVx = Create_VV(REAL,0);
   VVy = Create_VV(REAL,0);
   VVz = Create_VV(REAL,0);


   // --- Lock the channel symbols ---

   LockSymb_DB(Data,XCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
   LockSymb_DB(Data,YCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
   LockSymb_DB(Data,ZCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);


   // --- Draw lines ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);
   Progress_SYS(1);
   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {

      // --- get line label ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      LineLabel_DB(Data,Line,sLine,DB_LINE_LABEL_FORMAT_FULL);
      UnLockSymb_DB(Data,Line);

      // --- Update the Progress Bar ---

      Strcpy_STR(sLabel,_("Drawing line: "));
      Strcat_STR(sLabel,sLine);
      ProgName_SYS(sLine,0);
      ProgUpdateL_SYS(iLines,iTotLines);


      // --- Get X, Y and Z ---

      GetChanVV_DB(Data,Line,XCh,VVx);
      GetChanVV_DB(Data,Line,YCh,VVy);
      GetChanVV_DB(Data,Line,ZCh,VVz);


      // --- resample X, Y to Z ---

      rStart = rGetFidStart_VV(VVz);
      rIncr  = rGetFidIncr_VV(VVz);
      iLen   = iLength_VV(VVz);
      ReFid_VV(VVx,rStart,rIncr,iLen);
      ReFid_VV(VVy,rStart,rIncr,iLen);


      // --- create a sub-group ---


      // --- add line link ---


      // --- Draw the line ---

      ProfilePlot_MVU(View,VVx,VVy,VVz,rVangle,iUp,rGap,rBase,rSmm/rScale,iJoin);


      // --- Advance to Next Line ---        

      Line = NextSelLine_DB(Data, Line );
      iLines++;

   }


   // --- Unlock the channel symbol ---

   UnLockSymb_DB(Data,XCh);
   UnLockSymb_DB(Data,YCh);
   UnLockSymb_DB(Data,ZCh);


   // --- done ---

   Progress_SYS(0);
   Destroy_MVIEW(View);
   Destroy_IPJ(DataIPJ);

   // --- Release the locks ---

   UnLock_EDB(EData);   
   UnLock_EMAP(EMap);
}
