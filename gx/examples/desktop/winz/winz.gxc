//===========================================================================
NAME          = "Mask X,Y against min/max Z"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Database Tools/Window Data"

DESCRIPTION   = "

   Mask X and Y channels in the database against min/max Z values.
   Data points outside the min/max Z values will be dummied in X/Y channels.

     WINZ.ZCH     -  Mask Z channel name
         .ZMIN    -  min Z value for mask
         .ZMAX    -  max Z value for mask
"
// Revision History:
// v5.1.3: Using "Current" X and Y channels
//         Using FindChan_DB and iExistChan_DB
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "winz.gr"
#include   "winz.grh"

//===========================================================================
//                                 INCLUDES
//===========================================================================

#include <all.gxh>

//===========================================================================
//                                 VARIABLES
//===========================================================================

string(STR_DB_SYMBOL) sZCh;                     // Mask Z channle's name
string(STR_DB_SYMBOL) sXCh, sXBackCh, sYCh, sYBackCh;

EDB         EData;
DB          Data;                      // database handle
DB_SELECT   Sel;                       // selection

DB_SYMB     XCh,YCh,MCh;                   // Channel Handles
DB_SYMB     __XCh,__YCh;               // Channel Handles
DB_SYMB     Line;                      // Line Handle
DGW         Diag;                      // Dialogue handle
LST         List;                      // List handle

int         iLines;                    // Number of Lines Processed
int         iTotLines;                 // Total Number of Lines to Process
real        rZmin,rZmax;

string(STR_DEFAULT_SHORT) sTemp;                     // temporary number formating string
string(STR_DEFAULT) sLabel;

//===========================================================================
//                                 CODE
//===========================================================================

{
   // --- Get database ---

   EData = Current_EDB();
   Data = Lock_EDB(EData);

   // --- Are we running interactively ? ---

   if (iInteractive_SYS())
   {

      // --- Create the Dialogue ---

      Diag = Create_DGW("WINZ");

      // --- Set up lists ---

      List = GetList_DGW(Diag,_WINZ_0);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);

      // --- Set any Defaults ---

      SetInfoSYS_DGW(Diag,_WINZ_0,DGW_TEXT,"WINZ","ZCH");    
      SetInfoSYS_DGW(Diag,_WINZ_1,DGW_TEXT,"WINZ","ZMIN");    
      SetInfoSYS_DGW(Diag,_WINZ_2,DGW_TEXT,"WINZ","ZMAX");    

      // --- Run the Dialogue ---

      if (iRunDialogue_DGW(Diag) != 0) Cancel_SYS(); 

      // --- Get the Strings ---

      GetInfoSYS_DGW(Diag,_WINZ_0,DGW_TEXT,"WINZ","ZCH");    
      GetInfoSYS_DGW(Diag,_WINZ_1,DGW_TEXT,"WINZ","ZMIN");    
      GetInfoSYS_DGW(Diag,_WINZ_2,DGW_TEXT,"WINZ","ZMAX");    

      // --- Destroy the Dialogue ---

      Destroy_DGW(Diag);
   }

   // --- Turn On Progress ---

   Progress_SYS(1);
   ProgName_SYS(_("Mask X,Y against min/max Z"),1);

   // --- Get Parameters ---

   GetString_SYS("WINZ","ZCH",sZCh);
   rZmin = rGetReal_SYS("WINZ","ZMIN");
   rZmax = rGetReal_SYS("WINZ","ZMAX");

   // --- Do Mask channel (Z) Exist ? ---

   if (!iExistChan_DB(Data,sZCh))
      Abort_SYS(_("Mask channel does not exist."));
   MCh = FindChan_DB(Data,sZCh);

   // --- Get channel names ---
   
   GetXYZChan_DB(Data, DB_CHAN_X, sXCh);
   GetXYZChan_DB(Data, DB_CHAN_Y, sYCh);
   
   Strcpy_STR(sXBackCh, "__");
   Strcat_STR(sXBackCh, sXCh);
   Strcpy_STR(sYBackCh, "__");
   Strcat_STR(sYBackCh, sYCh);


   // --- Do X and Y Exist ? ---

   XCh = FindChan_DB(Data,sXCh);
   if (XCh==NULLSYMB)
      Abort_SYS(_("Current X channel does not exist."));

   YCh = FindChan_DB(Data,sYCh);
   if (YCh==NULLSYMB)
      Abort_SYS(_("Current Y channel does not exist."));
   
   // --- make a backup copy of X and Y if either master does not exist ---

   __XCh = FindChan_DB(Data,sXBackCh);
   __YCh = FindChan_DB(Data,sYBackCh);
   if (__XCh==NULLSYMB || __YCh==NULLSYMB) {

      // --- save selection ---

      Sel = GetSelect_DB(Data);
      Select_DB(Data,"",DB_LINE_SELECT_INCLUDE);


      // --- re-create master channels ---

      if (__XCh!=NULLSYMB) {
         LockSymb_DB(Data,__XCh,DB_LOCK_READWRITE,DB_WAIT_NONE);
         DeleteSymb_DB(Data,__XCh);
      }
      __XCh = DupSymbNoLock_DB(Data,XCh,sXBackCh);

      if (__YCh!=NULLSYMB) {
         LockSymb_DB(Data,__YCh,DB_LOCK_READWRITE,DB_WAIT_NONE);
         DeleteSymb_DB(Data,__YCh);
      }
      __YCh = DupSymbNoLock_DB(Data,YCh,sYBackCh);

      // --- copy ---

      LockSymb_DB(Data,XCh,DB_LOCK_READONLY,DB_WAIT_NONE);
      LockSymb_DB(Data,YCh,DB_LOCK_READONLY,DB_WAIT_NONE);
      LockSymb_DB(Data,__XCh,DB_LOCK_READWRITE,DB_WAIT_NONE);
      LockSymb_DB(Data,__YCh,DB_LOCK_READWRITE,DB_WAIT_NONE);

      ProgName_SYS(_("Make backup __X and __Y"),1);


      // --- Prepare to do the work ---

      iLines = 0;
      iTotLines = iCountSelLines_DB(Data);

      Line = FirstSelLine_DB(Data);
      while (iIsLineValid_DB(Data,Line))
      {
         // --- Update the Progress Bar ---

         LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_NONE);
         GetSymbName_DB(Data,Line,sTemp);
         UnLockSymb_DB(Data,Line);

         Strcpy_STR(sLabel,_("Line: "));
         Strcat_STR(sLabel,sTemp);
         ProgName_SYS(sLabel,0);
         ProgUpdateL_SYS(iLines,iTotLines);

         // --- Copy ---

         Decimate_DU(Data,Line,XCh,__XCh,1);
         Decimate_DU(Data,Line,YCh,__YCh,1);

         // --- Advance to Next Line ---        

         Line = NextSelLine_DB(Data,Line);
         iLines++;
      }

      UnLockSymb_DB(Data,XCh);
      UnLockSymb_DB(Data,YCh);
      UnLockSymb_DB(Data,__XCh);
      UnLockSymb_DB(Data,__YCh);

      // --- put back selection ---

      SetSelect_DB(Data,Sel);
   }

   // --- Prepare to do the work ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);

   // --- Lock the Symbols ---

   LockSymb_DB(Data,XCh,DB_LOCK_READWRITE,DB_WAIT_NONE);
   LockSymb_DB(Data,YCh,DB_LOCK_READWRITE,DB_WAIT_NONE);
   LockSymb_DB(Data,MCh,DB_LOCK_READONLY,DB_WAIT_NONE);

   // --- set protect X and Y ---
   
   SetChanProtect_DB(Data,XCh,DB_CHAN_UNPROTECTED);
   SetChanProtect_DB(Data,YCh,DB_CHAN_UNPROTECTED);

   // --- Go through all selected Lines ---

   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {
      // --- Update the Progress Bar ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_NONE);
      GetSymbName_DB(Data,Line,sTemp);
      UnLockSymb_DB(Data,Line);

      Strcpy_STR(sLabel,_("Mask line: "));
      Strcat_STR(sLabel,sTemp);
      ProgName_SYS(sLabel,0);
      ProgUpdateL_SYS(iLines,iTotLines);

      // --- Mask ---

      ZMask_DU(Data,Line,XCh,MCh,rZmin,rZmax);
      ZMask_DU(Data,Line,YCh,MCh,rZmin,rZmax);

      // --- Advance to Next Line ---        

      Line = NextSelLine_DB(Data,Line);
      iLines++;
   }

   // --- Add makers ---

   EasyMakerSymb_DB(Data,XCh,_("Mask to min/max Z"),"WINZ;");
   EasyMakerSymb_DB(Data,YCh,_("Mask to min/max Z"),"WINZ;");

   // --- Unlock the Symbol ---

   UnLockSymb_DB(Data,XCh);
   UnLockSymb_DB(Data,YCh);
   UnLockSymb_DB(Data,MCh);

   // --- Done ---

   Progress_SYS(0);

   // --- Release the Database ---

   UnLock_EDB(EData);
}
