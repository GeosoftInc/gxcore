//===========================================================================
NAME          = "Plot up to 8 plots at once"
#include <version.gxh>

TRANSLATIONDOMAIN = "geochemistry"
TRANSLATIONFRIENDLYPATH = "GX/Semplot Data"

DESCRIPTION   = "
   Plot up to 8 maps on a page.
   
         SEMMULTIPLOT.NPLOTS      Number of plots to make (1 to 8)
         SEMMULTIPLOT.TEMPLATE1   Template Name
         SEMMULTIPLOT.TEMPLATE2   Template Name
         SEMMULTIPLOT.TEMPLATE3   Template Name
         SEMMULTIPLOT.TEMPLATE4   Template Name
         SEMMULTIPLOT.TEMPLATE5   Template Name
         SEMMULTIPLOT.TEMPLATE6   Template Name
         SEMMULTIPLOT.TEMPLATE7   Template Name
         SEMMULTIPLOT.TEMPLATE8   Template Name
         SEMMULTIPLOT.LEGEND      Plot symbol legend?
"
// Revision History
// v6.4.0: Modifications to detect and allow OMS processing.
// v6.3.0: Increase maximum  number of plots to 8
//         Clear only SEMPLOT maps before plotting.
// v6.0.0: Licensing upgrade: removed iCheckLicense_SYS.
//         Added  USE_LEGEND_PREFERENCE parameter to control legend plotting.
// v5.1.7: Changed to template names instead of files.
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "SEMMULTIPLOT.gr"
#include "SEMMULTIPLOT.grh"

//===========================================================================
//                                  INCLUDE
//===========================================================================

#include <all.gxh>     // system


#define PLOT_TEMPLATE(A, B)   \
   if(iPlots>=A) {   \
      Strcpy_STR(sMsg, _("Plotting: "));   \
      Strcat_STR(sMsg, B);  \
      ProgName_SYS(sMsg,0);   \
      ProgUpdateL_SYS(iPlot, iPlots);   \
      iPlot++; \
      SetInt_SYS("SEMPLOT","USE_LEGEND_PREFERENCE", 1);  \
      SetString_SYS("SEMPLOT","TEMPLATE",B);   \
      if(iRunGX_SYS("semplot")) Cancel_SYS(); \
   }


//===========================================================================
//                                 VARIABLES
//===========================================================================

DGW         Diag;             // Dialogue handle
EDB         EData;
DB          Data;        
LST         hLST, List, List2;
EMAP        EMap;
MAP         Map;
REG         Reg;

int         iRet;                // Utility 

int i, iMaps, iPlots, iPlot, iSemplot, iInteractive;

string(STR_FILE) sTemplate1, sTemplate2, sTemplate3, sTemplate4;
string(STR_FILE) sTemplate5, sTemplate6, sTemplate7, sTemplate8;
string(STR_FILE) sFile, sMap;
string(STR_DEFAULT_SHORT) sField, sVal;
string(STR_DEFAULT_LONG) sMsg;

//===========================================================================
//                                   CODE
//===========================================================================

{
   // --- Are we running interactively ? ---

   iInteractive = iInteractive_SYS();
   if (iInteractive) {
   
           
      // --- Get current database ---

      EData = Current_EDB();
      Data = Lock_EDB(EData);


      // --- Get Template name or create/edit template ---
            
      Diag = Create_DGW("SEMMULTIPLOT");


      // --- Set up the template list ---

      List = Create_LST(128);
      TemplateLST_SEMPLOT(List, SEMPLOT_PLOT_ALL);
      Sort_LST(List,0,0);
      
      List2 = GetList_DGW(Diag,_SEMMULTIPLOT_0);
      Copy_LST(List2, List);
      List2 = GetList_DGW(Diag,_SEMMULTIPLOT_1);
      Copy_LST(List2, List);
      List2 = GetList_DGW(Diag,_SEMMULTIPLOT_2);
      Copy_LST(List2, List);
      List2 = GetList_DGW(Diag,_SEMMULTIPLOT_3);
      Copy_LST(List2, List);
      List2 = GetList_DGW(Diag,_SEMMULTIPLOT_4);
      Copy_LST(List2, List);
      List2 = GetList_DGW(Diag,_SEMMULTIPLOT_5);
      Copy_LST(List2, List);
      List2 = GetList_DGW(Diag,_SEMMULTIPLOT_6);
      Copy_LST(List2, List);
      List2 = GetList_DGW(Diag,_SEMMULTIPLOT_7);
      Copy_LST(List2, List);

               
      // --- Mask Channel list ---
                     
      List = GetList_DGW(Diag,_SEMMULTIPLOT_8);
      ClassChanLST_DB(Data, List, _("Mask"));
      Sort_LST(List,0,0);


      SetInfoSYS_DGW(Diag,_SEMMULTIPLOT_0,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE1");
      SetInfoSYS_DGW(Diag,_SEMMULTIPLOT_1,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE2");
      SetInfoSYS_DGW(Diag,_SEMMULTIPLOT_2,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE3");
      SetInfoSYS_DGW(Diag,_SEMMULTIPLOT_3,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE4");
      SetInfoSYS_DGW(Diag,_SEMMULTIPLOT_4,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE5");
      SetInfoSYS_DGW(Diag,_SEMMULTIPLOT_5,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE6");
      SetInfoSYS_DGW(Diag,_SEMMULTIPLOT_6,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE7");
      SetInfoSYS_DGW(Diag,_SEMMULTIPLOT_7,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE8");
      SetInfoSYS_DGW(Diag,_SEMMULTIPLOT_8,DGW_TEXT,"SEMPLOT","MASK");
               
      iRet = iRunDialogue_DGW(Diag);
      if (iRet == -1) Cancel_SYS();
               
      GetInfoSYS_DGW(Diag,_SEMMULTIPLOT_0,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE1");
      GetInfoSYS_DGW(Diag,_SEMMULTIPLOT_1,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE2");
      GetInfoSYS_DGW(Diag,_SEMMULTIPLOT_2,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE3");
      GetInfoSYS_DGW(Diag,_SEMMULTIPLOT_3,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE4");
      GetInfoSYS_DGW(Diag,_SEMMULTIPLOT_4,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE5");
      GetInfoSYS_DGW(Diag,_SEMMULTIPLOT_5,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE6");
      GetInfoSYS_DGW(Diag,_SEMMULTIPLOT_6,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE7");
      GetInfoSYS_DGW(Diag,_SEMMULTIPLOT_7,DGW_TEXT,"SEMMULTIPLOT","TEMPLATE8");
      GetInfoSYS_DGW(Diag,_SEMMULTIPLOT_8,DGW_TEXT,"SEMPLOT","MASK");
                             
      Destroy_DGW(Diag);

      // --- Get the number of plots ---

      iPlots = 0;
      for(i=1;i<=8;i++) {
         FormatI_STR(i, sVal, 2);   
         Strcpy_STR(sField, "TEMPLATE");  
         Strcat_STR(sField, sVal);  
         GetString_SYS("SEMMULTIPLOT",sField,sFile);
         if(!iStrlen_STR(sFile)) break;
         iPlots++;
      } 
      SetInt_SYS("SEMMULTIPLOT","NPLOTS",iPlots);

      UnLock_EDB(EData);
   }
   
   // --- get template names ---
   
   iPlots = iGetInt_SYS("SEMMULTIPLOT","NPLOTS");
   if(iPlots<1 || iPlots>8)
      Abort_SYS(_("The number of plots must be specified (1-8)"));

   GetString_SYS("SEMMULTIPLOT","TEMPLATE1",sTemplate1);
   GetString_SYS("SEMMULTIPLOT","TEMPLATE2",sTemplate2);
   GetString_SYS("SEMMULTIPLOT","TEMPLATE3",sTemplate3);
   GetString_SYS("SEMMULTIPLOT","TEMPLATE4",sTemplate4);
   GetString_SYS("SEMMULTIPLOT","TEMPLATE5",sTemplate5);
   GetString_SYS("SEMMULTIPLOT","TEMPLATE6",sTemplate6);
   GetString_SYS("SEMMULTIPLOT","TEMPLATE7",sTemplate7);
   GetString_SYS("SEMMULTIPLOT","TEMPLATE8",sTemplate8);


   // --- Close all open SEMPLOT maps --- 
   
   if(!iScript_SYS()) 
   {
      hLST = Create_LST(128);
      iMaps = iGetMapsLST_EMAP(hLST, EMAP_PATH_FULL);
      for(i=0;i<iMaps;i++) 
      {
         GetItem_LST(hLST,0,i,sMap);
       
         EMap = Load_EMAP(sMap);
         Map = Lock_EMAP(EMap);
         
         Reg = GetREG_MAP(Map);
         GetInt_REG(Reg, "SEMPLOT_MAP", iSemplot);
         Destroy_REG(Reg);
         UnLock_EMAP(EMap);
         
         if(iSemplot==1)
            UnLoad_EMAP(sMap);
      }
   }

   // --- Plot the templates ---

   SetInteractive_SYS(0);

   Progress_SYS(1);
   ProgName_SYS(_("Plotting"),1);

   iPlot = 0;
   PLOT_TEMPLATE(1, sTemplate1)
   PLOT_TEMPLATE(2, sTemplate2)
   PLOT_TEMPLATE(3, sTemplate3)
   PLOT_TEMPLATE(4, sTemplate4)
   PLOT_TEMPLATE(5, sTemplate5)
   PLOT_TEMPLATE(6, sTemplate6)
   PLOT_TEMPLATE(7, sTemplate7)
   PLOT_TEMPLATE(8, sTemplate8)

   if(!iScript_SYS()) 
   {   
      // --- Tile the maps ---

      TileWindows_SEMPLOT();

      // --- Now, resize all the maps ---

      iMaps = iGetMapsLST_EMAP(hLST, EMAP_PATH_FULL);
      for(i=0;i<iMaps;i++) {
         GetItem_LST(hLST,0,i,sMap);
         EMap = Load_EMAP(sMap);
         MakeCurrent_EMAP(EMap);
         DoCommand_SYS("[ID] ID_MEDIT_FULLMAP");
      }

      Destroy_LST(hLST);
   }

   SetInteractive_SYS(iInteractive);

}
