//===========================================================================
NAME          = "Copy one channel to another against mask channel"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Euler3D/Window Results"

DESCRIPTION   = "

Copies one channel to another against mask channel.
If the new channel does not exist, it will be created with the same
definition as the original channel.  The

Parameters: 

    COPY.FROM     - Original channel
        .TO       - Destination channel
        .MASK     - mask channel
"
// Revision History:
// v5.1.5: Use existing "MASK" class channel as default for mask.
// v5.1.3: Using FindChan_DB and iExistChan_DB
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "maskcpch.gr"
#include "maskcpch.grh"

//===========================================================================
//                                  INCLUDE
//===========================================================================

#include <all.gxh>     // system

//===========================================================================
//                                 VARIABLES
//===========================================================================

string(STR_DB_SYMBOL) sInCh;            // Channel Names
string(STR_DB_SYMBOL) sOutCh;           // Channel Names
string(STR_DB_SYMBOL) sMaskCh;          // Channel Names

EDB         EData;
DB          Data;             // Database handle
DB_SYMB     InCh;             // Channel Handle
DB_SYMB     OutCh;            // Channel Handle
DB_SYMB     MaskCh;           // Channel Handle
DB_SYMB     Line;             // Line Handle
DGW         Diag;             // Dialogue handle
LST         List;             // List handle
LST         MaskLst;

int         i;                // Utility 
int         iLines;           // Number of Lines Processed
int         iTotLines;        // Total Number of Lines to Process

string(STR_DEFAULT_SHORT) sTemp;            // Temp string
string(STR_DEFAULT) sLabel;

//===========================================================================
//                                   CODE
//===========================================================================

{

   // --- Get database ---
   
   EData = Current_EDB();
   Data = Lock_EDB(EData);

   // --- Are we running interactively ? ---

   if (iInteractive_SYS())
   {

      // --- Create the Dialogue ---

      Diag = Create_DGW("MASKCPCHForm");

      // --- Set up lists ---

      List = GetList_DGW(Diag,_MASKCPCHFORM_0);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);
      List = GetList_DGW(Diag,_MASKCPCHFORM_1);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);
      List = GetList_DGW(Diag,_MASKCPCHFORM_2);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);


      // --- If the mask channel is not set, and one exists, set it as the default ---

      GetString_SYS("MASKCPCH","MASK",sMaskCh);
      if(!iStrlen_STR(sMaskCh)) {

         MaskLst = Create_LST(STR_DB_SYMBOL);
         ClassChanLST_DB(Data, MaskLst, "Mask");
   
         if(iSize_LST(MaskLst)) {

            GetItem_LST(MaskLst, 0, 0, sMaskCh);
            SetString_SYS("MASKCPCH","MASK",sMaskCh);
         }
         Destroy_LST(MaskLst);
      }


     // --- Set any Defaults ---

     SetInfoSYS_DGW(Diag,_MASKCPCHFORM_0,DGW_TEXT,"MASKCPCH","FROM");     
     SetInfoSYS_DGW(Diag,_MASKCPCHFORM_1,DGW_TEXT,"MASKCPCH","TO");     
     SetInfoSYS_DGW(Diag,_MASKCPCHFORM_2,DGW_TEXT,"MASKCPCH","MASK");     


     // --- Run the Dialogue ---

     i = iRunDialogue_DGW(Diag);
     if (i != 0) Cancel_SYS();


     // --- Get the Strings ---

     GetInfoSYS_DGW(Diag,_MASKCPCHFORM_0,DGW_TEXT,"MASKCPCH","FROM");    
     GetInfoSYS_DGW(Diag,_MASKCPCHFORM_1,DGW_TEXT,"MASKCPCH","TO");    
     GetInfoSYS_DGW(Diag,_MASKCPCHFORM_2,DGW_TEXT,"MASKCPCH","MASK");    


     // --- Destroy the Dialogue ---

     Destroy_DGW(Diag);

   }


   // --- Get Parameters ---

   GetString_SYS("MASKCPCH","FROM",sInCh);
   GetString_SYS("MASKCPCH","TO",sOutCh);
   GetString_SYS("MASKCPCH","MASK",sMaskCh);


   // --- Do the Channels Exist ? ---

   if (!iExistChan_DB(Data,sInCh))
      Abort_SYS(_("Source channel does not exist."));
   InCh = FindChan_DB(Data,sInCh);

   if (!iExistChan_DB(Data,sMaskCh))
      Abort_SYS(_("Mask channel does not exist."));
   MaskCh = FindChan_DB(Data,sMaskCh);

   if (!iExistChan_DB(Data,sOutCh)) 
      DupSymbNoLock_DB(Data,InCh,sOutCh); // Create it 
   OutCh = FindChan_DB(Data,sOutCh);


   // --- Lock the channel symbols ---

   if (InCh != OutCh) LockSymb_DB(Data,InCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
   LockSymb_DB(Data,OutCh,DB_LOCK_READWRITE,DB_WAIT_INFINITY);
   LockSymb_DB(Data,MaskCh,DB_LOCK_READWRITE,DB_WAIT_INFINITY);


   // --- Prepare to do the work ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);
   Progress_SYS(1);


   // --- Go through all selected Lines ---

   ProgName_SYS("",1);
   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {
      // --- Update the Progress Bar ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      GetSymbName_DB(Data,Line,sTemp);
      UnLockSymb_DB(Data,Line);
      Strcpy_STR(sLabel,_("Copy line: "));
      Strcat_STR(sLabel,sTemp);
      ProgName_SYS(sLabel,0);
      ProgUpdateL_SYS(iLines,iTotLines);


      // --- Copy ---

      Decimate_DU(Data,Line,InCh,OutCh,1);


      // --- Mask ---

      Mask_DU(Data,Line,OutCh,MaskCh);


      // --- Advance to Next Line ---        

      Line = NextSelLine_DB(Data, Line );
      iLines++;

   }

   // --- Add maker ---

   EasyMakerSymb_DB(Data,OutCh,_("Copy channel against mask channel"),"MASKCPCH;");

   // --- Unlock the channel symbol ---

   if (InCh != OutCh) UnLockSymb_DB(Data,InCh);
   UnLockSymb_DB(Data,OutCh);
   UnLockSymb_DB(Data,MaskCh);

   // --- done ---

   Progress_SYS(0);

   // --- Release the Database ---

   UnLock_EDB(EData);
}
