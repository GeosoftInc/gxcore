//===========================================================================
NAME          = "Quality control on sample separation"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/QC Utility"

DESCRIPTION   = "

Use of this GX to carry out quality control on sample separation.

Parameters: 

    QCDENSTY.SEP  -  Maximum sample separation
            .MAP  -  New map (1) or current map (0)
  
"
// Revision History:
// v8.5:   Enabled for batch operation.
// v6.1.0: Fix-up for dummy fiducial starts in X and Y channels.
// v6.0:   Fixed that map has to be unlocked when call iGetPoint_EMAP(). 
// v5.1.3: Using "Current" X and Y channels

//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "QCDENSTY.gr"
#include "QCDENSTY.grh"

//===========================================================================
//                                  INCLUDE
//===========================================================================

#include <all.gxh>     // system

//===========================================================================
//                                 VARIABLES
//===========================================================================

EDB         EData;
DB          Data;            // Master database parameters
DB_SYMB     XCh,YCh,ChFlag;
DB_SYMB     Line;            // Line Handle
DGW         Diag;             // Dialogue handle
VV          VVX,VVY,VVFlag,VVDist;
MVIEW       View;
MAP         Map;           
EMAP        EMap;

string(STR_FILE)       sFont,sGroup,sName, sMap;
string(STR_DB_SYMBOL) sChFlag,sLine;
string(STR_DEFAULT) sLabel;
string(STR_GROUP) sGrpName;

real        rSep;
real        rXFidStart,rXFidIncr,rYFidStart,rYFidIncr;
real        rMinX,rMinY,rMaxX,rMaxY;
real        rScaleMM,rXo,rYo,rTxtSize;
real        rXLegend, rYLegend;

int         i,k,iNew;
int         iLines;           // Number of Lines Processed
int         iTotLines;        // Total Number of Lines to Process

int         iInteract, iShowDialog, iPlotToMap, iPlotPath;

//===========================================================================
//                                   CODE
//===========================================================================

{
	// ---- Batch control ---
	
	iShowDialog = 1;
	if (iExistInt_SYS("QC", "SHOW_DIALOG"))
	{
		iShowDialog = iGetInt_SYS("QC", "SHOW_DIALOG");
		if(iShowDialog != iDUMMY)
			SetString_SYS("QC", "SHOW_DIALOG", "");		// force reset each time
		if(iShowDialog != 0) iShowDialog = 1;				// show by default in interactive mode
	}

	iPlotToMap = 1;
	if (iExistInt_SYS("QC", "OUTPUT_MAP"))
	{
		iPlotToMap = iGetInt_SYS("QC", "OUTPUT_MAP");
		if(iPlotToMap != iDUMMY)
			SetString_SYS("QC", "OUTPUT_MAP", "");			// force reset each time
		if(iPlotToMap != 0) iPlotToMap = 1;					// plot by default
	}

	iPlotPath = 1;
	if (iExistInt_SYS("QC", "PLOT_PATH"))
	{
		iPlotPath = iGetInt_SYS("QC", "PLOT_PATH");
		if(iPlotPath != iDUMMY)
			SetString_SYS("QC", "PLOT_PATH", "");			// force reset each time
		if(iPlotPath != 0) iPlotPath = 1;					// plot by default
	}

	if (iPlotToMap == 0)
		iPlotPath = 0;			                        // override


   iInteract = iInteractive_SYS();    
   rMinX = rMinY = rMaxX = rMaxY =rDUMMY;

   // --- Get current database ---
   
   EData = Current_EDB();


   // --- Are we running interactively ? ---

   i = 2;
   while (iInteractive_SYS() && (i == 2) && iShowDialog)
   {

      // --- Create the Dialogue ---

      Diag = Create_DGW("QCDENSTY");


      // --- Set any Defaults ---

      SetInfoSYS_DGW(Diag,_QCDENSTY_0,DGW_TEXT,"QCDENSTY","SEP");     
      SetInfoSYS_DGW(Diag,_QCDENSTY_1,DGW_LISTALIAS,"QCDENSTY","MAP");     

      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i == -1) Cancel_SYS();    // He hit cancel


      // --- Get the Strings ---

      GetInfoSYS_DGW(Diag,_QCDENSTY_0,DGW_TEXT,"QCDENSTY","SEP");     
      GetInfoSYS_DGW(Diag,_QCDENSTY_1,DGW_LISTALIAS,"QCDENSTY","MAP");     


      // --- Destroy the Dialogue ---

      Destroy_DGW(Diag);


      iNew    = iGetInt_SYS("QCDENSTY","MAP");
      
      if (iNew && iPlotToMap) 
		{
         
         // --- Run NEWMAP wizard ---
   
         iNew = iRunGX_SYS("newmap.gx");
              
         if (iNew == -1)        i = 2;
         else if (iNew == 1)    Cancel_SYS();
      }        
   }

	if (iPlotToMap)
	{
		if (!iInteractive_SYS() || iShowDialog == 0) 
		{
			iNew    = iGetInt_SYS("QCDENSTY","MAP");
      
			if (iNew) {
         
				// --- Run NEWMAP wizard ---
				iRunGX_SYS("newmap.gx");
				GetString_SYS("NEWMAP","MAP",sMap);
				Load_EMAP(sMap);
			}
		}      
   }


   // --- Get Parameters ---

   rSep  = rGetReal_SYS("QCDENSTY","SEP");
   

   // --- Verify parameters ---
   
   if (rSep <= 0.0) Abort_SYS(_("Maximum sample separation must be greater than 0.0."));

   // --- Lock Database ---

   Data = Lock_EDB(EData);
	GetName_DB(Data,DB_NAME_FILE,sName);


   // --- Get X and Y channel ---

   XCh = GetXYZChanSymb_DB(Data, DB_CHAN_X);
   if (XCh==NULLSYMB)
      Abort_SYS(_("The current X channel does not exist."));
   LockSymb_DB(Data,XCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);

   YCh = GetXYZChanSymb_DB(Data, DB_CHAN_Y);
   if (YCh==NULLSYMB)
      Abort_SYS(_("The current Y channel does not exist."));
   LockSymb_DB(Data,YCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);

   
   // --- Does the Flag channel exist ? ---

   
   Strcpy_STR(sChFlag,"Flag_Density");
   if (iExistSymb_DB(Data,sChFlag,DB_SYMB_CHAN)) {
      ChFlag = FindSymb_DB(Data,sChFlag,DB_SYMB_CHAN);
      LockSymb_DB(Data,ChFlag,DB_LOCK_READWRITE,DB_WAIT_INFINITY);
      DeleteSymb_DB(Data,ChFlag);
   }   
   ChFlag = CreateSymb_DB(Data,sChFlag,DB_SYMB_CHAN,DB_OWN_SHARED,DB_CATEGORY_CHAN_BYTE);
   LockSymb_DB(Data,ChFlag,DB_LOCK_READWRITE,DB_WAIT_INFINITY);
   
   
   // --- VVs ---
   
   VVFlag = CreateExt_VV(GS_BYTE,0);
   VVX   = Create_VV(REAL,0);
   VVY   = Create_VV(REAL,0);
   VVDist= Create_VV(REAL,0);


   // --- Prepare to do the work ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);
   Progress_SYS(1);

   // --- Go through all selected Lines ---

   ProgName_SYS("",1);
   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {

      // --- Update the Progress Bar ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      GetSymbName_DB(Data,Line,sLine);
      UnLockSymb_DB(Data,Line);
      Strcpy_STR(sLabel,_("Sample sep. QC on line: "));
      Strcat_STR(sLabel,sLine);
      ProgName_SYS(sLabel,0);
      ProgUpdateL_SYS(iLines,iTotLines);
      

      // --- Get mag data ---
            
      GetChanVV_DB(Data,Line,XCh,VVX);
      GetChanVV_DB(Data,Line,YCh,VVY);
      ReFidVV_VV(VVFlag, VVX);
         
      
      // --- Distance ---
      
      rXFidStart = rGetFidStart_DB(Data,Line,XCh);
      rXFidIncr  = rGetFidIncr_DB (Data,Line,XCh);
      rYFidStart = rGetFidStart_DB(Data,Line,YCh);
      rYFidIncr  = rGetFidIncr_DB (Data,Line,YCh);
      if (rXFidStart == rDUMMY) rXFidStart = 0.0;
      if (rXFidIncr == rDUMMY) rXFidIncr = 1.0;
      if (rYFidStart == rDUMMY) rYFidStart = 0.0;
      if (rYFidIncr == rDUMMY) rYFidIncr = 1.0;
      
      Distance_VVU(VVX,VVY,VVDist,rXFidStart,rXFidIncr,rYFidStart,rYFidIncr);


      // --- 1st difference ---
      
      Diff_VV(VVDist, 1);

      // --- Apply the QC---
            
      QC_VVU(VVDist,(VV)-1,VVFlag,0.0,rSep,rDUMMY,rDUMMY,QC_CRITERION_1);


      // --- Put QC result back to channel ---
            
      PutChanVV_DB(Data,Line,ChFlag,VVFlag);
 
      // --- Advance to Next Line ---        

      Line = NextSelLine_DB(Data, Line);
      iLines++;

   }

   // --- Add maker ---

   EasyMakerSymb_DB(Data,ChFlag,_("Quality control on sample separation"),"QCDENSTY;");


   // --- Unlock the channel symbol ---

   UnLockSymb_DB(Data,ChFlag);
   UnLockSymb_DB(Data,XCh);
   UnLockSymb_DB(Data,YCh);
   UnLock_EDB(EData);

   
	// --- done ---

   Progress_SYS(0);


	if (iPlotToMap)
	{
		// --- Plot line path and flag ---

		if (iInteract)
			SetInteractive_SYS(0);

		if (iPlotPath)
		{   
			SetString_SYS("PATH","LINE_THICKNESS","0.15");
			SetString_SYS("PATH","LINE_COLOR","k");
			SetString_SYS("PATH","TICKFLAG","0");
			SetString_SYS("PATH","LABEL_FORMAT","TL");
			SetString_SYS("PATH","LABEL_LOCATION","1");
			SetString_SYS("PATH","LABEL_SIZE","2.5");
			SetString_SYS("PATH","LABEL_COLOR","k");
			SetString_SYS("PATH","LABEL_WEIGHT","0");
			SetString_SYS("PATH","H_OFFSET","2.0");
			SetString_SYS("PATH","V_OFFSET","0");
			SetString_SYS("PATH","GAP","0");

			if (iRunGX_SYS("path.gx"))     
				Cancel_SYS(); 
		}

		SetString_SYS("QCDEVMAP","MAP","0");
		SetString_SYS("QCDEVMAP","RESULT",sChFlag);
		SetString_SYS("QCDEVMAP","THICK","0.2");
		SetString_SYS("QCDEVMAP","COLOR","g");
		SetString_SYS("QCDEVMAP","OFFSET","0.5");


		if (iRunGX_SYS("qcdevmap.gx")) Cancel_SYS(); 

		SetInteractive_SYS(iInteract);   


		// ---------------------------------------
		// --- Plot legend ---
   
		// --- check for base view ---

		EMap = Current_EMAP();
		Map = Lock_EMAP(EMap);
		if (!iExistView_MAP(Map,"*Base"))
			Abort_SYS(_("Legend cannot be drawn because a base view does not exist in this map."));
   
		if (iInteractive_SYS()) 
		{
			UnLock_EMAP(EMap);
			iSetCurrentView_EMAP(EMap,"*Base");
			Map = Lock_EMAP(EMap);
		}
		View = Create_MVIEW(Map,"*Base",MVIEW_WRITEOLD);
 
 
		// --- Where to plot ---
 
		rXLegend = rGetReal_SYS("QC", "LEGEND_X_IN");
		rYLegend = rGetReal_SYS("QC", "LEGEND_Y_IN");
		if(rXLegend != rDUMMY && rYLegend != rDUMMY)
		{
			rXo = rXLegend;
			rYo = rYLegend;
			SetString_SYS("QC", "LEGEND_X_IN", "");	// force reset each call
			SetString_SYS("QC", "LEGEND_Y_IN", "");
		}
		else if (iInteractive_SYS()) 
		{
			// --- Get the coordinates of a user selected box ---

			DisplayMessage_SYS(_("Locate legend"),_("Locate the lower left corner of the legend..."));

			UnLock_EMAP(EMap);   
			EMap = Current_EMAP();
			iSetCurrentView_EMAP(EMap,"*Base");

			if (iGetPoint_EMAP(EMap,_("Locate legend..."),rXo,rYo)) Cancel_SYS(); 

			Map = Lock_EMAP(EMap);
			View = Create_MVIEW(Map,"*Base",MVIEW_WRITEOLD);

		} 
		else 
		{
			// --- Get box area ---

			Extent_MVIEW(View, MVIEW_EXTENT_ALL, MVIEW_EXTENT_UNIT_VIEW, rMinX, rMinY, rMaxX, rMaxY);
			rXo = 0.2*rMinX + 0.8*rMaxX;
			rYo = 0.2*rMinY + 0.8*rMaxY;
		}

		rXLegend = rXo;
		rYLegend = rYo;


		// --- Scale parameters ---

		rScaleMM = rScaleMM_MVIEW(View);
		rTxtSize = rScaleMM*2.5;
		rXo *= rScaleMM;
		rYo *= rScaleMM;


		// --- Start a group ---

		FileNamePart_STR(sName,sName,STR_FILE_PART_NAME);
		GenGroupName_STR("LEGEND_QC",sName,_n("Density"),sGrpName);
		Strcpy_STR(sGroup,sGrpName);
		StartGroup_MVIEW(View,sGroup,MVIEW_GROUP_NEW);

		if (iGlobal_SYS("MONTAJ.DEFAULT_MAP_FONT",sFont) == 1)
			Strcpy_STR(sFont,_n("default"));
		TextFont_MVIEW(View,sFont,FALSE,MVIEW_FONT_WEIGHT_NORMAL,FALSE);
		TextSize_MVIEW(View,rTxtSize);
		TextAngle_MVIEW(View,0.0);
		TextColor_MVIEW(View,iColor_MVIEW("k"));
   
		LineThick_MVIEW(View,0.15*rScaleMM);
		LineStyle_MVIEW(View,0,0.0);
		LineColor_MVIEW(View,iColor_MVIEW("k"));
   
		if (iPlotPath)
		{
			Text_MVIEW(View,_("Line path"),rXo+15.0*rScaleMM,rYo);
			Line_MVIEW(View,rXo,rYo+1.25*rScaleMM,rXo+10.0*rScaleMM,rYo+1.25*rScaleMM);
			rYo+=5.0*rScaleMM;
		}

 
		// --- QC results ---
   
		TextColor_MVIEW(View,iColor_MVIEW("g"));
		Text_MVIEW(View,_("Flag_Separation"),rXo+15.0*rScaleMM,rYo);
   
		if (iGlobal_SYS("MONTAJ.DEFAULT_SYMBOL_FONT",sFont) == 1)
			Strcpy_STR(sFont,_n("symbols"));
		SymbFont_MVIEW(View,sFont,TRUE,MVIEW_FONT_WEIGHT_MEDIUM,FALSE);
		SymbColor_MVIEW(View,iColor_MVIEW("g"));
		SymbFillColor_MVIEW(View,iColor_MVIEW("g"));
		SymbNumber_MVIEW(View,20);  // solid circle
		SymbSize_MVIEW(View,0.2*rScaleMM);
		SymbAngle_MVIEW(View,0.0);

		k = (int)(30.0/0.2) + 1;
		for (i = 0; i < k; i++)
			Symbol_MVIEW(View, rXo + 0.33*(real)i*0.2*rScaleMM, rYo + 1.25*rScaleMM);

 
		// --- Save group location and extents ---

		SetReal_SYS("QC", "LEGEND_X_OUT", rXLegend);
		SetReal_SYS("QC", "LEGEND_Y_OUT", rYLegend);

		GetGroupExtent_MVIEW (View, sGroup, rMinX, rMinY, rMaxX, rMaxY, MVIEW_UNIT_MM);
		SetReal_SYS("QC", "LEGEND_WIDTH", rMaxX - rMinX);
		SetReal_SYS("QC", "LEGEND_HEIGHT", rMaxY - rMinY);


		// --- Done with legend ---

		Destroy_MVIEW(View);
		UnLock_EMAP(EMap);
	}
 
  
   // --- Set default plotting channel ---

   SetString_SYS("QCDEVMAP","RESULT",sChFlag);     
}
