//===========================================================================
NAME          = "Quality control on line separation"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/QC Utility"

DESCRIPTION   = "\

Use of this GX to carry out quality control on line separation

Parameters: 

  QCSEP.LINESEL   -  Line selection
       .NOMSEP    -  Nominal line separation
       .MAXSEP    -  Maximum separation
       .ALLSEP    -  Allowed separation
       .DIST      -  over a distance of 
       .RECALC    -  Force calculation distance channels?
       .MAP       -  New map (1) or current map (0)
  
"
// Revision History:
// v8.5:   Enabled for batch operation.
// v7.0.1: QA 13867: Prevent QCDEVMAP from plotting legend, it's done here.
// v6.2.0: Made it possible to run the two tests separately,as indicated in the help.
// v6.0:   Fixed that map has to be unlocked when call iGetPoint_EMAP(). 
// v5.1.3: Using "Current" X and Y channels
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "QCSEP.gr"
#include "QCSEP.grh"

//===========================================================================
//                                  INCLUDE
//===========================================================================

#include <all.gxh>     // system

//===========================================================================
//                                 VARIABLES
//===========================================================================

EDB         EData;            // Database handle
DB          Data;             // Database handle
DB_SELECT   Select;              // current selection mode
DB_SYMB     XCh,YCh;
DB_SYMB     ChFlagL,ChFlagR;
DB_SYMB     ChLeft,ChRight;
DB_SYMB     Line;             // Line Handle
VV          VVX,VVY,VVFlagL,VVFlagR,VVRight,VVLeft,VVDist;
DGW         Diag;             // Dialogue handle
MVIEW       View;
MAP         Map;
EMAP        EMap;

string(STR_DB_SYMBOL) sChFlagL,sChFlagR,sChLeft,sChRight,sLine;
string(STR_FILE)       sFont,sGroup,sName, sMap;
string(STR_DEFAULT) sLabel;
string(STR_DEFAULT_SHORT) sString, sColorL, sColorR;
string(STR_GROUP) sGrpName;
string(8)   sLineSel;

real        rLineDir, rNomSep,rMaxSep,rAllSep,rDist;
real        rXFidStart,rXFidIncr,rYFidStart,rYFidIncr;
real        rMinX,rMinY,rMaxX,rMaxY;
real        rScaleMM,rXo,rYo,rTxtSize;
real        rXLegend, rYLegend;

int         i,k, iInit, iQCType;
int         iNew;
int         iLines;           // Number of Lines Processed
int         iTotLines;        // Total Number of Lines to Process

int         iInteract, iShowDialog, iPlotToMap, iPlotPath;

//===========================================================================
//                                   CODE
//===========================================================================

{
	Strcpy_STR(sColorL, _n("m"));
	Strcpy_STR(sColorR, _n("r"));


	// ---- Batch control ---
	
	iShowDialog = 1;
	if (iExistInt_SYS("QC", "SHOW_DIALOG"))
	{
		iShowDialog = iGetInt_SYS("QC", "SHOW_DIALOG");
		if(iShowDialog != iDUMMY)
			SetString_SYS("QC", "SHOW_DIALOG", "");		// force reset each time
		if(iShowDialog != 0) iShowDialog = 1;				// show by default in interactive mode
	}

	iPlotToMap = 1;
	if (iExistInt_SYS("QC", "OUTPUT_MAP"))
	{
		iPlotToMap = iGetInt_SYS("QC", "OUTPUT_MAP");
		if(iPlotToMap != iDUMMY)
			SetString_SYS("QC", "OUTPUT_MAP", "");			// force reset each time
		if(iPlotToMap != 0) iPlotToMap = 1;					// plot by default
	}

	iPlotPath = 1;
	if (iExistInt_SYS("QC", "PLOT_PATH"))
	{
		iPlotPath = iGetInt_SYS("QC", "PLOT_PATH");
		if(iPlotPath != iDUMMY)
			SetString_SYS("QC", "PLOT_PATH", "");			// force reset each time
		if(iPlotPath != 0) iPlotPath = 1;					// plot by default
	}

	if (iPlotToMap == 0)
		iPlotPath = 0;			                        // override


   iInteract = iInteractive_SYS();    
   rMinX = rMinY = rMaxX = rMaxY =rDUMMY;

   // --- Get database ---
   
   EData = Current_EDB();   

   iInit = 1;
   Strcpy_STR(sChRight,"Closest_Right");
   Strcpy_STR(sChLeft, "Closest_Left");




   // --- If the separation channels don't exist, force recalc ---

   Data = Lock_EDB(EData);
   if(!iExistSymb_DB(Data,sChRight,DB_SYMB_CHAN) ||
      !iExistSymb_DB(Data,sChLeft,DB_SYMB_CHAN)) {
     
      SetString_SYS("QCSEP","RECALC","1");      
   }
   UnLock_EDB(EData);
   
   
   
   // --- Are we running interactively ? ---

   i = 2;
   while (iInteractive_SYS() && (i == 2) && iShowDialog)
   {

      // --- Create the Dialogue ---

      Diag = Create_DGW("QCSEP");

      // --- Set any Defaults ---

      SetInfoSYS_DGW(Diag,_QCSEP_0,DGW_LISTALIAS,"QCSEP","LINESEL");     
      SetInfoSYS_DGW(Diag,_QCSEP_1,DGW_TEXT,"QCSEP","NOMSEP");     
      SetInfoSYS_DGW(Diag,_QCSEP_2,DGW_TEXT,"QCSEP","MAXSEP");     
      SetInfoSYS_DGW(Diag,_QCSEP_3,DGW_TEXT,"QCSEP","ALLSEP");     
      SetInfoSYS_DGW(Diag,_QCSEP_4,DGW_TEXT,"QCSEP","DIST");     
      SetInfoSYS_DGW(Diag,_QCSEP_5,DGW_LISTALIAS,"QCSEP","RECALC");
      SetInfoSYS_DGW(Diag,_QCSEP_6,DGW_LISTALIAS,"QCSEP","MAP");     

      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i==-1) Cancel_SYS();    // He hit cancel


      // --- Get the Strings ---

      GetInfoSYS_DGW(Diag,_QCSEP_0,DGW_LISTALIAS,"QCSEP","LINESEL");     
      GetInfoSYS_DGW(Diag,_QCSEP_1,DGW_TEXT,"QCSEP","NOMSEP");     
      GetInfoSYS_DGW(Diag,_QCSEP_2,DGW_TEXT,"QCSEP","MAXSEP");     
      GetInfoSYS_DGW(Diag,_QCSEP_3,DGW_TEXT,"QCSEP","ALLSEP");     
      GetInfoSYS_DGW(Diag,_QCSEP_4,DGW_TEXT,"QCSEP","DIST");     
      GetInfoSYS_DGW(Diag,_QCSEP_5,DGW_LISTALIAS,"QCSEP","RECALC");
      GetInfoSYS_DGW(Diag,_QCSEP_6,DGW_LISTALIAS,"QCSEP","MAP");     

      // --- Destroy the Dialogue ---

      Destroy_DGW(Diag);
      

      iNew    = iGetInt_SYS("QCSEP","MAP");
      
      if (iNew && iPlotToMap) {
         
         // --- Run NEWMAP wizard ---
   
         iNew = iRunGX_SYS("newmap.gx");
              
         if (iNew == -1)        i = 2;
         else if (iNew == 1)    Cancel_SYS();
      }        
   }
   
	if (iPlotToMap)
	{
		if (!iInteractive_SYS() || iShowDialog == 0) 
		{
			iNew    = iGetInt_SYS("QCSEP","MAP");
      
			if (iNew) 
			{         
				// --- Run NEWMAP wizard ---
				
				iRunGX_SYS("newmap.gx");
				GetString_SYS("NEWMAP","MAP",sMap);
				Load_EMAP(sMap);
			}      
		}
	}

   // --- Get Parameters ---


   rNomSep  = rGetReal_SYS("QCSEP","NOMSEP");
   if(rNomSep==rDUMMY) 
      Abort_SYS(_("No nominal separation defined"));
   if(rNomSep<=0.0)
      Abort_SYS(_("Nominal separation must be > 0"));

   GetString_SYS("QCSEP","LINESEL",sLineSel);
   if (iStrMin_STR(sLineSel) == 0) Strcpy_STR(sLineSel,"L");
   

   rMaxSep  = rGetReal_SYS("QCSEP","MAXSEP");
   if(rMaxSep!=rDUMMY) 
   {
      if(rMaxSep<=0.0)
         Abort_SYS(_("Maximum separation must be > 0"));
   }

   rAllSep  = rGetReal_SYS("QCSEP","ALLSEP");
   rDist    = rGetReal_SYS("QCSEP","DIST");
   if(rAllSep==rDUMMY &&
      rMaxSep==rDUMMY)
   {
      Abort_SYS(_("Either the maximum separation or Line separation over a distance must be defined"));
   }
   else if(rAllSep!=rDUMMY)
   {
      if(rDist==rDUMMY) {
         Abort_SYS(_("No allowed separation distance defined"));
      }
      if(rAllSep<=0.0)
         Abort_SYS(_("Allowed separation must be > 0"));
      if(rDist<=0.0)
         Abort_SYS(_("Allowed distance must be > 0"));
   }
   

   // -- Force recalculation ? ---

   GetString_SYS("QCSEP","RECALC",sString);
   iInit = iScanI_STR(sString);
   if(iInit==iDUMMY) iInit = 1;
   if(iInit!=0 && iInit!=1) iInit = 1;


   // --- Lock Database ---

   Data = Lock_EDB(EData);
	GetName_DB(Data,DB_NAME_FILE,sName);


   // --- Override if the channels don't exist ---

   if(!iExistSymb_DB(Data,sChRight,DB_SYMB_CHAN) ||
      !iExistSymb_DB(Data,sChLeft,DB_SYMB_CHAN)) {

      iInit = 1;
   }


   // --- Set the QC Type ---
   
   if(rAllSep==rDUMMY)
      iQCType = 0;
   else if(rMaxSep==rDUMMY)
      iQCType = 1;
   else
      iQCType = 2;

   
   // --- Get the average line direction ---

   rLineDir = 0.0;   // prevent compiler warning
   AvgAzimuth_DU(Data, 1.0, rLineDir);


   // --- save current selection ---

   Select = GetSelect_DB(Data);

   // --- Exclude the "wrong" type of lines ---

   if(!iStrcmp_STR(sLineSel,"T",STR_CASE_TOLERANT)) { // Keep Tie lines
      Select_DB(Data,"L",DB_LINE_SELECT_EXCLUDE);     // Normal
      Select_DB(Data,"B",DB_LINE_SELECT_EXCLUDE);     // Base
      Select_DB(Data,"S",DB_LINE_SELECT_EXCLUDE);     // Test
      Select_DB(Data,"R",DB_LINE_SELECT_EXCLUDE);     // Trend
      Select_DB(Data,"P",DB_LINE_SELECT_EXCLUDE);     // Special
      Select_DB(Data,"D",DB_LINE_SELECT_EXCLUDE);     // Random
   }
   else {                                             // Keep Normal lines
      Select_DB(Data,"B",DB_LINE_SELECT_EXCLUDE);     // Base
      Select_DB(Data,"T",DB_LINE_SELECT_EXCLUDE);     // Tie
      Select_DB(Data,"S",DB_LINE_SELECT_EXCLUDE);     // Test
      Select_DB(Data,"R",DB_LINE_SELECT_EXCLUDE);     // Trend
      Select_DB(Data,"P",DB_LINE_SELECT_EXCLUDE);     // Special
      Select_DB(Data,"D",DB_LINE_SELECT_EXCLUDE);     // Random
   }

   if(iInit) {

      Progress_SYS(1);
      QCInitSeparation_DU(Data, rNomSep, rLineDir);
      Progress_SYS(0);

   }

      
   // --- Do the Flag channels exist ? ---

   Strcpy_STR(sChFlagL,"Flag_SepL");
   if (iExistSymb_DB(Data,sChFlagL,DB_SYMB_CHAN)) {
      ChFlagL = FindSymb_DB(Data,sChFlagL,DB_SYMB_CHAN);
      LockSymb_DB(Data,ChFlagL,DB_LOCK_READWRITE,DB_WAIT_INFINITY);
      DeleteSymb_DB(Data,ChFlagL);
   }   
   ChFlagL = CreateSymb_DB(Data,sChFlagL,DB_SYMB_CHAN,DB_OWN_SHARED,DB_CATEGORY_CHAN_BYTE);
   LockSymb_DB(Data,ChFlagL,DB_LOCK_READWRITE,DB_WAIT_INFINITY);
   
   Strcpy_STR(sChFlagR,"Flag_SepR");
   if (iExistSymb_DB(Data,sChFlagR,DB_SYMB_CHAN)) {
      ChFlagR = FindSymb_DB(Data,sChFlagR,DB_SYMB_CHAN);
      LockSymb_DB(Data,ChFlagR,DB_LOCK_READWRITE,DB_WAIT_INFINITY);
      DeleteSymb_DB(Data,ChFlagR);
   }   
   ChFlagR = CreateSymb_DB(Data,sChFlagR,DB_SYMB_CHAN,DB_OWN_SHARED,DB_CATEGORY_CHAN_BYTE);
   LockSymb_DB(Data,ChFlagR,DB_LOCK_READWRITE,DB_WAIT_INFINITY);
   
   // --- Get X and Y channel

   XCh = GetXYZChanSymb_DB(Data, DB_CHAN_X);
   if (XCh==NULLSYMB)
      Abort_SYS(_("The current X channel does not exist."));
   LockSymb_DB(Data,XCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);

   YCh = GetXYZChanSymb_DB(Data, DB_CHAN_Y);
   if (YCh==NULLSYMB)
      Abort_SYS(_("The current Y channel does not exist."));
   LockSymb_DB(Data,YCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);


   // --- Get the separation channels ---

   if (!iExistSymb_DB(Data,sChRight,DB_SYMB_CHAN)) {
      Abort_SYS(_("Right separation channel does not exist"));
   }
   ChRight = FindSymb_DB(Data,sChRight,DB_SYMB_CHAN);
   LockSymb_DB(Data,ChRight,DB_LOCK_READWRITE,DB_WAIT_INFINITY);

   if (!iExistSymb_DB(Data,sChLeft,DB_SYMB_CHAN)) {
      Abort_SYS(_("Left separation channel does not exist"));
   }
   ChLeft = FindSymb_DB(Data,sChLeft,DB_SYMB_CHAN);
   LockSymb_DB(Data,ChLeft,DB_LOCK_READWRITE,DB_WAIT_INFINITY);

   // --- VVs ---

   VVX      = Create_VV(REAL,0);
   VVY      = Create_VV(REAL,0);
   VVFlagR  = CreateExt_VV(GS_BYTE,0);
   VVFlagL  = CreateExt_VV(GS_BYTE,0);
   VVRight  = Create_VV(REAL,0);
   VVLeft   = Create_VV(REAL,0);
   VVDist   = Create_VV(REAL,0);



   // --- Prepare to do the work ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);

   // --- Go through all selected Lines ---

   Progress_SYS(1);
   ProgName_SYS("",1);
   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {
      // --- Update the Progress Bar ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      GetSymbName_DB(Data,Line,sLine);
      UnLockSymb_DB(Data,Line);

      Strcpy_STR(sLabel,_("Line Separation QC on line: "));
      Strcat_STR(sLabel,sLine);
      ProgName_SYS(sLabel,0);
      ProgUpdateL_SYS(iLines,iTotLines);

      
      // --- Get data from VVs ---
      
      GetChanVV_DB(Data,Line,XCh,VVX);
      GetChanVV_DB(Data,Line,YCh,VVY);
      GetChanVV_DB(Data,Line,ChRight,VVRight);
      GetChanVV_DB(Data,Line,ChLeft,VVLeft);

      ReFidVV_VV(VVDist,VVX);
      ReFidVV_VV(VVRight,VVX);
      ReFidVV_VV(VVLeft,VVX);
      ReFidVV_VV(VVFlagL,VVX);
      ReFidVV_VV(VVFlagR,VVX);


      // --- Prepare distance VV ---

      rXFidStart = rGetFidStart_DB(Data,Line,XCh);
      rXFidIncr  = rGetFidIncr_DB (Data,Line,XCh);
      rYFidStart = rGetFidStart_DB(Data,Line,YCh);
      rYFidIncr  = rGetFidIncr_DB (Data,Line,YCh);
      if (rXFidStart == rDUMMY || rXFidIncr == rDUMMY || 
          rYFidStart == rDUMMY || rYFidIncr == rDUMMY) {
          
          Line = NextSelLine_DB(Data, Line );
          iLines++;
          continue;
      }
          
         
      Distance_VVU(VVX,VVY,VVDist,rXFidStart,rXFidIncr,rYFidStart,rYFidIncr);

      // --- Apply the QC on the line separations ---
      
      QC_VVU(VVLeft,VVDist,VVFlagL,0.0,rMaxSep,rAllSep,rDist,iQCType);
      QC_VVU(VVRight,VVDist,VVFlagR,0.0,rMaxSep,rAllSep,rDist,iQCType);

      // --- Put QC result back to channel ---
      
      PutChanVV_DB(Data,Line,ChFlagL,VVFlagL);
      PutChanVV_DB(Data,Line,ChFlagR,VVFlagR);

      // --- Advance to Next Line ---        

      Line = NextSelLine_DB(Data, Line );
      iLines++;

   }

   // --- Add maker ---

   EasyMakerSymb_DB(Data,ChFlagL,_("Quality control on line separation"),"QCSEP;");
   EasyMakerSymb_DB(Data,ChFlagR,_("Quality control on line separation"),"QCSEP;");


   // --- Unlock the channel symbols ---

   UnLockSymb_DB(Data,ChLeft);
   UnLockSymb_DB(Data,ChRight);
   UnLockSymb_DB(Data,ChFlagL);
   UnLockSymb_DB(Data,ChFlagR);
   UnLockSymb_DB(Data,XCh);
   UnLockSymb_DB(Data,YCh);

   // --- done ---

   Progress_SYS(0);

   Destroy_SYS(VVX);
   Destroy_SYS(VVY);
   Destroy_SYS(VVFlagR);
   Destroy_SYS(VVFlagL);
   Destroy_SYS(VVRight);
   Destroy_SYS(VVLeft);
   Destroy_SYS(VVDist);

   // --- reset starting selections --- 

   SetSelect_DB(Data,Select);
   UnLock_EDB(EData);


	if (iPlotToMap)
	{
		// --- Plot line path and flag ---
   
		if (iInteract)
			SetInteractive_SYS(0);

		if (iPlotPath)
		{
			SetString_SYS("PATH","LINE_THICKNESS","0.15");
			SetString_SYS("PATH","LINE_COLOR","k");
			SetString_SYS("PATH","TICKFLAG","0");
			SetString_SYS("PATH","LABEL_FORMAT","TL");
			SetString_SYS("PATH","LABEL_LOCATION","1");
			SetString_SYS("PATH","LABEL_SIZE","2.5");
			SetString_SYS("PATH","LABEL_COLOR","k");
			SetString_SYS("PATH","LABEL_WEIGHT","0");
			SetString_SYS("PATH","H_OFFSET","2.0");
			SetString_SYS("PATH","V_OFFSET","0");
			SetString_SYS("PATH","GAP","0");
			SetString_SYS("PATH","LABEL_COMPASS","-1");

			if (iRunGX_SYS("path.gx"))     
				Cancel_SYS(); 
		}

		SetString_SYS("QCDEVMAP","MAP","0");
		SetString_SYS("QCDEVMAP","RESULT","Flag_SepR");
		SetString_SYS("QCDEVMAP","THICK","0.2");
		SetString_SYS("QCDEVMAP","COLOR", sColorR);
		SetReal_SYS("QCDEVMAP","OFFSET",0.5);
		SetInt_SYS("QCDEVMAP", "LEGEND", 0);  // legend is plotted here.

		// --- Set the nominal line direction parameter for QCDEVMAP 
		//     This must be reset each time QCDEVMAP is called. ---

		SetReal_SYS("QCDEVMAP","NOMDIR",rLineDir);
      
		if (iRunGX_SYS("qcdevmap.gx")) Cancel_SYS(); 
   
		SetString_SYS("QCDEVMAP","RESULT","Flag_SepL");
		SetString_SYS("QCDEVMAP","COLOR", sColorL);
		SetReal_SYS("QCDEVMAP","OFFSET",-0.5);
		SetReal_SYS("QCDEVMAP","NOMDIR",rLineDir);
		SetInt_SYS("QCDEVMAP", "LEGEND", 0);  // legend is plotted here.

		if (iRunGX_SYS("qcdevmap.gx")) Cancel_SYS(); 

		SetInteractive_SYS(iInteract);   


		// ---------------------------------------
		// --- Plot legend ---
     
		// --- check for base view ---

		EMap = Current_EMAP();
		Map = Lock_EMAP(EMap);
		if (!iExistView_MAP(Map,"*Base"))
			Abort_SYS(_("Legend cannot be drawn because a base view does not exist in this map."));
		UnLock_EMAP(EMap);   
   
		if (iInteractive_SYS())
			iSetCurrentView_EMAP(EMap,"*Base");

		Map = Lock_EMAP(EMap);
		View = Create_MVIEW(Map,"*Base",MVIEW_WRITEOLD);
 
 
		// --- Where to plot ---
 
		rXLegend = rGetReal_SYS("QC", "LEGEND_X_IN");
		rYLegend = rGetReal_SYS("QC", "LEGEND_Y_IN");
		if(rXLegend != rDUMMY && rYLegend != rDUMMY)
		{
			rXo = rXLegend;
			rYo = rYLegend;
			SetString_SYS("QC", "LEGEND_X_IN", "");	// force reset each call
			SetString_SYS("QC", "LEGEND_Y_IN", "");
		}
		else if (iInteractive_SYS()) 
		{
			// --- Get the coordinates of a user selected box ---

			DisplayMessage_SYS(_("Locate legend"),_("Locate the lower left corner of the legend..."));

			UnLock_EMAP(EMap);   
			EMap = Current_EMAP();
			iSetCurrentView_EMAP(EMap,"*Base");

			if (iGetPoint_EMAP(EMap,_("Locate legend..."),rXo,rYo)) Cancel_SYS(); 

			Map = Lock_EMAP(EMap);
			View = Create_MVIEW(Map,"*Base",MVIEW_WRITEOLD);

		} 
		else 
		{
			// --- Get box area ---

			Extent_MVIEW(View, MVIEW_EXTENT_ALL, MVIEW_EXTENT_UNIT_VIEW, rMinX, rMinY, rMaxX, rMaxY);
			rXo = 0.2*rMinX + 0.8*rMaxX;
			rYo = 0.2*rMinY + 0.8*rMaxY;
		}

		rXLegend = rXo;
		rYLegend = rYo;


		// --- Scale parameters ---

		rScaleMM = rScaleMM_MVIEW(View);
		rTxtSize = rScaleMM*2.5;
		rXo *= rScaleMM;
		rYo *= rScaleMM;


		// --- Start a group ---

		FileNamePart_STR(sName,sName,STR_FILE_PART_NAME);
		GenGroupName_STR("LEGEND_QC",sName,_n("Linesep"),sGrpName);
		Strcpy_STR(sGroup,sGrpName);
		StartGroup_MVIEW(View,sGroup,MVIEW_GROUP_NEW);

		if (iGlobal_SYS("MONTAJ.DEFAULT_MAP_FONT",sFont) == 1)
			Strcpy_STR(sFont,_n("default"));
		TextFont_MVIEW(View,sFont,FALSE,MVIEW_FONT_WEIGHT_NORMAL,FALSE);
		TextSize_MVIEW(View,rTxtSize);
		TextAngle_MVIEW(View,0.0);
		TextColor_MVIEW(View,iColor_MVIEW("k"));
   
		LineThick_MVIEW(View,0.15*rScaleMM);
		LineStyle_MVIEW(View,0,0.0);
		LineColor_MVIEW(View,iColor_MVIEW("k"));
   
		if (iPlotPath)
		{
			Text_MVIEW(View,_("Line path"),rXo+15.0*rScaleMM,rYo);
			Line_MVIEW(View,rXo,rYo+1.25*rScaleMM,rXo+10.0*rScaleMM,rYo+1.25*rScaleMM);
			rYo+=5.0*rScaleMM;
		}


		// --- QC results ---
   
		TextColor_MVIEW(View,iColor_MVIEW(sColorR));
		Text_MVIEW(View,_("Flag_SepR"),rXo+15.0*rScaleMM,rYo);
		rYo+=5.0*rScaleMM;

		TextColor_MVIEW(View,iColor_MVIEW(sColorL));
		Text_MVIEW(View,_("Flag_SepL"),rXo+15.0*rScaleMM,rYo);


		if (iGlobal_SYS("MONTAJ.DEFAULT_SYMBOL_FONT",sFont) == 1)
			Strcpy_STR(sFont,_n("symbols"));
		SymbFont_MVIEW(View,sFont,TRUE,MVIEW_FONT_WEIGHT_MEDIUM,FALSE);
		SymbColor_MVIEW(View,iColor_MVIEW(sColorR));
		SymbFillColor_MVIEW(View,iColor_MVIEW(sColorR));
		SymbNumber_MVIEW(View,20);  // solid circle
		SymbSize_MVIEW(View,0.2*rScaleMM);
		SymbAngle_MVIEW(View,0.0);

		k = (int)(30.0/0.2) + 1;
		for (i = 0; i < k; i++)
			Symbol_MVIEW(View, rXo + 0.33*(real)i*0.2*rScaleMM, rYo - 3.75*rScaleMM);

		SymbColor_MVIEW(View,iColor_MVIEW(sColorL));
		SymbFillColor_MVIEW(View,iColor_MVIEW(sColorL));
		for (i = 0; i < k; i++)
			Symbol_MVIEW(View, rXo + 0.33*(real)i*0.2*rScaleMM, rYo + 1.25*rScaleMM);


 		// --- Save group location and extents ---

		SetReal_SYS("QC", "LEGEND_X_OUT", rXLegend);
		SetReal_SYS("QC", "LEGEND_Y_OUT", rYLegend);

		GetGroupExtent_MVIEW (View, sGroup, rMinX, rMinY, rMaxX, rMaxY, MVIEW_UNIT_MM);
		SetReal_SYS("QC", "LEGEND_WIDTH", rMaxX - rMinX);
		SetReal_SYS("QC", "LEGEND_HEIGHT", rMaxY - rMinY);


		// --- Done with legend ---

		Destroy_MVIEW(View);
		UnLock_EMAP(EMap);
	}
 
 
   // --- Set default plotting channel ---

   SetString_SYS("QCDEVMAP","RESULT","Flag_SepR");     
}
