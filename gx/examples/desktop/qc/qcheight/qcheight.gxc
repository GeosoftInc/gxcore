//===========================================================================
NAME          = "Altitude Deviation"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/QC Utility"

DESCRIPTION   = "\

Use of this GX to carry out quality control on airplane flight height.

Parameters: 

  QCHEIGHT.CHAN      -  Radar-altimeter channel
			 .TOPO      -  Optional topography channel
          .NOMINAL   -  Nominal flight height
			 .MINHEIGHT -  Minimum height
			 .MAXELEVATION - Maximum elevation (requires topo channel)
          .MAXDEV    -  Maximum deviation
          .ALLDEV    -  Allowed deviation
          .DIST      -  over a distance of 
          .MAP       -  New map (1) or current map (0)
  
"
// Revision History:
// v8.5:   Enabled for batch operation.
// v8.5:   Added minimum height and maximum elevation parameters
// v6.0:   Fixed that map has to be unlocked when call iGetPoint_EMAP(). 
// v5.1.3: Using "Current" X and Y channels
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "QCHEIGHT.gr"
#include "QCHEIGHT.grh"

//===========================================================================
//                                  INCLUDE
//===========================================================================

#include <all.gxh>     // system

//===========================================================================
//                                 VARIABLES
//===========================================================================

DB          Data;             // Database handle
EDB         EData;             // Database handle
DB_SYMB     XCh,YCh;
DB_SYMB     ChFlag,ChAlt, ChMax, ChTmpFlag;
DB_SYMB     Line;             // Line Handle
VV          VVX,VVY,VVFlag,VVDist,VVAlt;
DGW         Diag;             // Dialogue handle
LST         List;             // List handle
MVIEW       View;
MAP         Map;
EMAP        EMap;
EXP         MinEXP, MaxEXP;

string(STR_DB_SYMBOL) sAlt,sFlag,sLine,sTopo,sMax,sTmpFlag;
string(STR_FILE)       sFont,sGroup,sName, sMap;
string(STR_DEFAULT) sLabel, sVal;
string(STR_GROUP) sGrpName;
string(STR_DEFAULT_LONG) sExp;

real        rNominal,rMaxDev,rAllDev,rDist;
real        rXFidStart,rXFidIncr,rYFidStart,rYFidIncr;
real        rMinX,rMinY,rMaxX,rMaxY;
real        rScaleMM,rXo,rYo,rTxtSize;
real        rMinHeight, rMaxElevation;
real        rXLegend, rYLegend;


int         i,k,iNew;
int         iQCType;
int         iLines;           // Number of Lines Processed
int         iTotLines;        // Total Number of Lines to Process

int         iInteract, iShowDialog, iPlotToMap, iPlotPath;

//===========================================================================
//                                   CODE
//===========================================================================

{
	// ---- Batch control ---
	
	iShowDialog = 1;
	if (iExistInt_SYS("QC", "SHOW_DIALOG"))
	{
		iShowDialog = iGetInt_SYS("QC", "SHOW_DIALOG");
		if(iShowDialog != iDUMMY)
			SetString_SYS("QC", "SHOW_DIALOG", "");		// force reset each time
		if(iShowDialog != 0) iShowDialog = 1;				// show by default in interactive mode
	}

	iPlotToMap = 1;
	if (iExistInt_SYS("QC", "OUTPUT_MAP"))
	{
		iPlotToMap = iGetInt_SYS("QC", "OUTPUT_MAP");
		if(iPlotToMap != iDUMMY)
			SetString_SYS("QC", "OUTPUT_MAP", "");			// force reset each time
		if(iPlotToMap != 0) iPlotToMap = 1;					// plot by default
	}

	iPlotPath = 1;
	if (iExistInt_SYS("QC", "PLOT_PATH"))
	{
		iPlotPath = iGetInt_SYS("QC", "PLOT_PATH");
		if(iPlotPath != iDUMMY)
			SetString_SYS("QC", "PLOT_PATH", "");			// force reset each time
		if(iPlotPath != 0) iPlotPath = 1;					// plot by default
	}

	if (iPlotToMap == 0)
		iPlotPath = 0;			                        // override


   iInteract = iInteractive_SYS();    
   rMinX = rMinY = rMaxX = rMaxY =rDUMMY;


   // --- Get database ---
   
   EData = Current_EDB();

   // --- Are we running interactively ? ---

   i = 2;
   while (iInteractive_SYS() && (i == 2) && iShowDialog)
   {

      // --- Create the Dialogue ---

      Diag = Create_DGW("QCHEIGHT");


      // --- Set up lists ---


      List = GetList_DGW(Diag,_QCHEIGHT_0);

      Data = Lock_EDB(EData);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      UnLock_EDB(EData);

      Sort_LST(List,0,0);
		Copy_LST(GetList_DGW(Diag,_QCHEIGHT_1), List);



      // --- Set any Defaults ---

      SetInfoSYS_DGW(Diag,_QCHEIGHT_0,DGW_TEXT,"QCHEIGHT","CHAN");     
      SetInfoSYS_DGW(Diag,_QCHEIGHT_1,DGW_TEXT,"QCHEIGHT","TOPO");     
      SetInfoSYS_DGW(Diag,_QCHEIGHT_2,DGW_TEXT,"QCHEIGHT","NOMINAL");     
      SetInfoSYS_DGW(Diag,_QCHEIGHT_3,DGW_TEXT,"QCHEIGHT","MINHEIGHT");     
      SetInfoSYS_DGW(Diag,_QCHEIGHT_4,DGW_TEXT,"QCHEIGHT","MAXELEVATION");     
      SetInfoSYS_DGW(Diag,_QCHEIGHT_5,DGW_TEXT,"QCHEIGHT","MAXDEV");     
      SetInfoSYS_DGW(Diag,_QCHEIGHT_6,DGW_TEXT,"QCHEIGHT","ALLDEV");     
      SetInfoSYS_DGW(Diag,_QCHEIGHT_7,DGW_TEXT,"QCHEIGHT","DIST");     
      SetInfoSYS_DGW(Diag,_QCHEIGHT_8,DGW_LISTALIAS,"QCHEIGHT","MAP");     

      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i == -1) Cancel_SYS();    // He hit cancel


      // --- Get the Strings ---

      GetInfoSYS_DGW(Diag,_QCHEIGHT_0,DGW_TEXT,"QCHEIGHT","CHAN");     
      GetInfoSYS_DGW(Diag,_QCHEIGHT_1,DGW_TEXT,"QCHEIGHT","TOPO");     
      GetInfoSYS_DGW(Diag,_QCHEIGHT_2,DGW_TEXT,"QCHEIGHT","NOMINAL");     
      GetInfoSYS_DGW(Diag,_QCHEIGHT_3,DGW_TEXT,"QCHEIGHT","MINHEIGHT");     
      GetInfoSYS_DGW(Diag,_QCHEIGHT_4,DGW_TEXT,"QCHEIGHT","MAXELEVATION");     
      GetInfoSYS_DGW(Diag,_QCHEIGHT_5,DGW_TEXT,"QCHEIGHT","MAXDEV");     
      GetInfoSYS_DGW(Diag,_QCHEIGHT_6,DGW_TEXT,"QCHEIGHT","ALLDEV");     
      GetInfoSYS_DGW(Diag,_QCHEIGHT_7,DGW_TEXT,"QCHEIGHT","DIST");     
      GetInfoSYS_DGW(Diag,_QCHEIGHT_8,DGW_LISTALIAS,"QCHEIGHT","MAP");     


      // --- Destroy the Dialogue ---

      Destroy_DGW(Diag);
      

		// --- If a maximum elevation is defined, we require a topography channel ---

		rMaxElevation = rGetReal_SYS("QCHEIGHT","MAXELEVATION");
		if(rMaxElevation != rDUMMY)
		{
			GetString_SYS("QCHEIGHT","TOPO",sTopo);
			if(iStrlen_STR(sTopo) == 0)
			{
				DisplayMessage_SYS(_("Quality control on flight height"), _("A topography channel is required if the maximum elevation is defined."));
				i = 2;
				continue;
			}
		}

      
      iNew    = iGetInt_SYS("QCHEIGHT","MAP");
      
      if (iNew && iPlotToMap) {
         
         // --- Run NEWMAP wizard ---
   
         iNew = iRunGX_SYS("newmap.gx");
              
         if (iNew == -1) 
			{
			   i = 2;
				continue;
			}
         else if (iNew == 1)    
				Cancel_SYS();
      }        
   }


	if (iPlotToMap)
	{
		if (!iInteractive_SYS() || iShowDialog == 0) 
		{
			iNew    = iGetInt_SYS("QCHEIGHT","MAP");
      
			if (iNew) {
         
				// --- Run NEWMAP wizard ---
   
				iNew = iRunGX_SYS("newmap.gx");
				GetString_SYS("NEWMAP","MAP",sMap);
				Load_EMAP(sMap);      
			}
		}
	}


   // --- Get Parameters ---

   rNominal = rGetReal_SYS("QCHEIGHT","NOMINAL");
	rMinHeight = rGetReal_SYS("QCHEIGHT","MINHEIGHT");
	rMaxElevation = rGetReal_SYS("QCHEIGHT","MAXELEVATION");
   rMaxDev  = rGetReal_SYS("QCHEIGHT","MAXDEV");
   rAllDev  = rGetReal_SYS("QCHEIGHT","ALLDEV");
   rDist    = rGetReal_SYS("QCHEIGHT","DIST");

   GetString_SYS("QCHEIGHT","CHAN",sAlt);
	GetString_SYS("QCHEIGHT","TOPO",sTopo);

   
   // --- Verify parameters ---
   
   iQCType = -1;
   if (rNominal == rDUMMY) Abort_SYS(_("Nominal flight height not defined"));
   if (rMaxDev >= 0.0) iQCType ++;
   if ((rAllDev >= 0.0) && (rDist > 0.0)) iQCType += 2;
   if (iQCType < 0) Abort_SYS(_("Quality control on Altitude Deviation is not applied as NO deviation parameters are defined."));
   if (rMinHeight != rDUMMY && iStrlen_STR(sTopo)==0) Abort_SYS(_("A topography channel is required if the maximum elevation is defined."));

      
   // --- Lock Database ---    
      
   Data = Lock_EDB(EData);
	GetName_DB(Data,DB_NAME_FILE,sName);
      
           
   // --- Get height channel ---
   
   if (!iExistSymb_DB(Data,sAlt,DB_SYMB_CHAN)) 
      Abort_SYS(_("Radar-altimeter (height) channel does not exist."));
   ChAlt = FindSymb_DB(Data,sAlt,DB_SYMB_CHAN);
   LockSymb_DB(Data,ChAlt,DB_LOCK_READWRITE,DB_WAIT_INFINITY);


	// --- Check for topo channel ---

	if (rMinHeight != rDUMMY)
	{
		if(iExistChan_DB(Data, sTopo) == 0)
			Abort_SYS(_("The topography channel does not exist."));

		if(iStrcmp_STR(sTopo, sAlt, STR_CASE_TOLERANT) == 0)
			Abort_SYS(_("The topography channel cannot be the same as the radar-altimeter (height) channel."));
	}


	// --- Temp Max elevation flag channel ---

	if (rMaxElevation != rDUMMY && rMinHeight != rDUMMY)
	{
		Strcpy_STR(sMax, _n("___MaxElevationFlag"));
		if (iExistSymb_DB(Data,sMax,DB_SYMB_CHAN)) {
			ChMax = FindSymb_DB(Data,sMax,DB_SYMB_CHAN);
			LockSymb_DB(Data,ChMax,DB_LOCK_READWRITE,DB_WAIT_INFINITY);
			DeleteSymb_DB(Data,ChMax);
		}   
		ChMax= CreateSymb_DB(Data,sMax,DB_SYMB_CHAN,DB_OWN_SHARED,DB_CATEGORY_CHAN_BYTE);
		LockSymb_DB(Data,ChMax,DB_LOCK_READWRITE,DB_WAIT_INFINITY);
	}
	else
		ChMax = NULLSYMB;
	

   // --- Does the Flag channel exist ? ---

   Strcpy_STR(sFlag, _("Flag_Height"));
   if (iExistSymb_DB(Data,sFlag,DB_SYMB_CHAN)) {
      ChFlag = FindSymb_DB(Data,sFlag,DB_SYMB_CHAN);
      LockSymb_DB(Data,ChFlag,DB_LOCK_READWRITE,DB_WAIT_INFINITY);
      DeleteSymb_DB(Data,ChFlag);
   }   
   ChFlag = CreateSymb_DB(Data,sFlag,DB_SYMB_CHAN,DB_OWN_SHARED,DB_CATEGORY_CHAN_BYTE);
   LockSymb_DB(Data,ChFlag,DB_LOCK_READWRITE,DB_WAIT_INFINITY);


	// --- A temp flag channel is required if checking min height or max elevation ---

	if (rMinHeight != rDUMMY || rMaxElevation != rDUMMY)
	{
		Strcpy_STR(sTmpFlag,_n("___Flag_Height"));
		if (iExistSymb_DB(Data,sTmpFlag,DB_SYMB_CHAN)) {
			ChTmpFlag = FindSymb_DB(Data,sTmpFlag,DB_SYMB_CHAN);
			LockSymb_DB(Data,ChTmpFlag,DB_LOCK_READWRITE,DB_WAIT_INFINITY);
			DeleteSymb_DB(Data,ChTmpFlag);
		}   
		ChTmpFlag = CreateSymb_DB(Data,sTmpFlag,DB_SYMB_CHAN,DB_OWN_SHARED,DB_CATEGORY_CHAN_BYTE);
		LockSymb_DB(Data,ChTmpFlag,DB_LOCK_READWRITE,DB_WAIT_INFINITY);	
	}
	else
		ChTmpFlag = ChFlag;
   
   
   // --- VVs ---
   
   VVFlag = CreateExt_VV(GS_BYTE,0);
   VVAlt  = Create_VV(REAL,0);
   VVDist = Create_VV(REAL,0);
   
   
   // --- Other channels if required ---
   
   if (iQCType > 0) {

      // --- Get X and Y channel

      XCh = GetXYZChanSymb_DB(Data, DB_CHAN_X);
      if (XCh==NULLSYMB)
         Abort_SYS(_("The current X channel does not exist."));
      LockSymb_DB(Data,XCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);

      YCh = GetXYZChanSymb_DB(Data, DB_CHAN_Y);
      if (YCh==NULLSYMB)
         Abort_SYS(_("The current Y channel does not exist."));
      LockSymb_DB(Data,YCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      
      // --- Get X and Y data ---
      
      VVX = Create_VV(REAL,0);
      VVY = Create_VV(REAL,0);
   }
   

	// --- Create expressions if required ---

	if(rMaxElevation != rDUMMY)
	{
		// --- Topo + Elevation must be less than or equal to the Max Elevation ---

		FormatR_STR(rMaxElevation, sVal, 12, 12);

		Strcpy_STR(sExp, _n("@F="));
		Strcat_STR(sExp, sTmpFlag);
		Strcat_STR(sExp, _n(";@A="));
		Strcat_STR(sExp, sAlt);
		Strcat_STR(sExp, _n(";@T="));
		Strcat_STR(sExp, sTopo);
		Strcat_STR(sExp, _n(";"));
		if(rMinHeight != rDUMMY)
			Strcat_STR(sExp, sMax);
		else
			Strcat_STR(sExp, sFlag);
		Strcat_STR(sExp, _n("=(@T != DUMMY && @A != DUMMY && (@T+@A)>"));
		Strcat_STR(sExp, sVal);
		Strcat_STR(sExp, _n(")?4:@F;"));

		MaxEXP = Create_EXP(Data, sExp, STR_DEFAULT_LONG);
	}


	if(rMinHeight != rDUMMY)
	{
		// --- The elevation must be greater than or equal to the minimum height ---

		FormatR_STR(rMinHeight, sVal, 12, 12);

		Strcpy_STR(sExp, _n("@F="));
		if(rMaxElevation != rDUMMY)
			Strcat_STR(sExp, sMax);
		else
			Strcat_STR(sExp, sTmpFlag);
		Strcat_STR(sExp, _n(";@A="));
		Strcat_STR(sExp, sAlt);
		Strcat_STR(sExp, _n(";"));
		Strcat_STR(sExp, sFlag);
		Strcat_STR(sExp, _n("=(@A != DUMMY && @A<"));
		Strcat_STR(sExp, sVal);
		Strcat_STR(sExp, _n(")?-4:@F;"));
		
		MinEXP = Create_EXP(Data, sExp, STR_DEFAULT_LONG);
	}


   // --- Prepare to do the work ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);
   Progress_SYS(1);

   // --- Go through all selected Lines ---

   ProgName_SYS("",1);
   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {
      // --- Update the Progress Bar ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      GetSymbName_DB(Data,Line,sLine);
      UnLockSymb_DB(Data,Line);
      Strcpy_STR(sLabel,_("Flight height QC on line: "));
      Strcat_STR(sLabel,sLine);
      ProgName_SYS(sLabel,0);
      ProgUpdateL_SYS(iLines,iTotLines);

      
      // --- Get data from VVs ---
      
      GetChanVV_DB(Data,Line,ChAlt,VVAlt);

      ReFidVV_VV(VVFlag,VVAlt);


      // --- Prepare distance VV ---

      if (iQCType > 0) {
         GetChanVV_DB(Data,Line,XCh,VVX);
         GetChanVV_DB(Data,Line,YCh,VVY);   

         rXFidStart = rGetFidStart_DB(Data,Line,XCh);
         rXFidIncr  = rGetFidIncr_DB (Data,Line,XCh);
         rYFidStart = rGetFidStart_DB(Data,Line,YCh);
         rYFidIncr  = rGetFidIncr_DB (Data,Line,YCh);
         
         if (rXFidStart == rDUMMY || rXFidIncr == rDUMMY || 
             rYFidStart == rDUMMY || rYFidIncr == rDUMMY) {
             
             Line = NextSelLine_DB(Data, Line );
             iLines++;
             continue;
         }
             
         
         Distance_VVU(VVX,VVY,VVDist,rXFidStart,rXFidIncr,rYFidStart,rYFidIncr);
         ReFidVV_VV(VVDist,VVAlt);
      }


      // --- Apply the QC on flight height ---
      
      QC_VVU(VVAlt,VVDist,VVFlag,rNominal,rMaxDev,rAllDev,rDist,iQCType);


      // --- Put QC result back to channel ---
      
      PutChanVV_DB(Data,Line,ChTmpFlag,VVFlag);


		// --- Apply min height or max elevation if required ---

		if(rMaxElevation != rDUMMY)
			Math_DU(Data, Line, MaxEXP);

		if(rMinHeight != rDUMMY)
			Math_DU(Data, Line, MinEXP);


      // --- Advance to Next Line ---        

      Line = NextSelLine_DB(Data, Line );
      iLines++;

   }

	
	// --- Delete temp channels ---

	if(ChMax != NULLSYMB)
		DeleteSymb_DB(Data,ChMax);
	if(ChTmpFlag != ChFlag)
		DeleteSymb_DB(Data,ChTmpFlag);


   // --- Add maker ---

   EasyMakerSymb_DB(Data,ChFlag,_("Quality control on flight height"),"QCHEIGHT;");


   // --- Unlock the channel symbol ---

   UnLockSymb_DB(Data,ChAlt);
   UnLockSymb_DB(Data,ChFlag);
   if (iQCType > 0) {
      UnLockSymb_DB(Data,XCh);
      UnLockSymb_DB(Data,YCh);
   }   
	UnLock_EDB(EData);   

   // --- done ---

   Progress_SYS(0);
   
	if (iPlotToMap)
	{
		// --- Plot line path and flag ---
   
		if (iInteract)
			SetInteractive_SYS(0);

		if (iPlotPath)
		{
			SetString_SYS("PATH","LINE_THICKNESS","0.15");
			SetString_SYS("PATH","LINE_COLOR","k");
			SetString_SYS("PATH","TICKFLAG","0");
			SetString_SYS("PATH","LABEL_FORMAT","TL");
			SetString_SYS("PATH","LABEL_LOCATION","1");
			SetString_SYS("PATH","LABEL_SIZE","2.5");
			SetString_SYS("PATH","LABEL_COLOR","k");
			SetString_SYS("PATH","LABEL_WEIGHT","0");
			SetString_SYS("PATH","H_OFFSET","2.0");
			SetString_SYS("PATH","V_OFFSET","0");
			SetString_SYS("PATH","GAP","0");

			if (iRunGX_SYS("path.gx"))     
				Cancel_SYS(); 
		}

		SetString_SYS("QCDEVMAP","MAP","0");
		SetString_SYS("QCDEVMAP","RESULT","Flag_Height");
		SetString_SYS("QCDEVMAP","THICK","0.2");
		SetString_SYS("QCDEVMAP","COLOR","c");
		SetString_SYS("QCDEVMAP","OFFSET","0.5");

		if (iRunGX_SYS("qcdevmap.gx")) Cancel_SYS(); 

		SetInteractive_SYS(iInteract);   


		// ---------------------------------------
		// --- Plot legend ---
   
		// --- check for base view ---

		EMap = Current_EMAP();
		Map = Lock_EMAP(EMap);
		if (!iExistView_MAP(Map,"*Base"))
			Abort_SYS(_("A base view is required to use this GX."));

		if (iInteractive_SYS()) 
		{
			UnLock_EMAP(EMap);   
			iSetCurrentView_EMAP(EMap,"*Base");
			Map = Lock_EMAP(EMap);
		}
		View = Create_MVIEW(Map,"*Base",MVIEW_WRITEOLD);


		// --- Where to plot ---
 
		rXLegend = rGetReal_SYS("QC", "LEGEND_X_IN");
		rYLegend = rGetReal_SYS("QC", "LEGEND_Y_IN");
		if(rXLegend != rDUMMY && rYLegend != rDUMMY)
		{
			rXo = rXLegend;
			rYo = rYLegend;
			SetString_SYS("QC", "LEGEND_X_IN", "");	// force reset each call
			SetString_SYS("QC", "LEGEND_Y_IN", "");
		}
		else if (iInteractive_SYS()) 
		{
			// --- Get the coordinates of a user selected box ---

			DisplayMessage_SYS(_("Locate legend"),_("Locate the lower left corner of the legend..."));

			UnLock_EMAP(EMap);   
			EMap = Current_EMAP();
			iSetCurrentView_EMAP(EMap,"*Base");

			if (iGetPoint_EMAP(EMap,_("Locate legend..."),rXo,rYo)) Cancel_SYS(); 

			Map = Lock_EMAP(EMap);
			View = Create_MVIEW(Map,"*Base",MVIEW_WRITEOLD);

		} 
		else 
		{
			// --- Get box area ---

			Extent_MVIEW(View, MVIEW_EXTENT_ALL, MVIEW_EXTENT_UNIT_VIEW, rMinX, rMinY, rMaxX, rMaxY);
			rXo = 0.2*rMinX + 0.8*rMaxX;
			rYo = 0.2*rMinY + 0.8*rMaxY;
		}

		rXLegend = rXo;
		rYLegend = rYo;


		// --- Scale parameters ---

		rScaleMM = rScaleMM_MVIEW(View);
		rTxtSize = rScaleMM*2.5;
		rXo *= rScaleMM;
		rYo *= rScaleMM;


		// --- Start a group ---

		FileNamePart_STR(sName,sName,STR_FILE_PART_NAME);
		GenGroupName_STR("LEGEND_QC",sName,_n("Height"),sGrpName);
		Strcpy_STR(sGroup,sGrpName);
		StartGroup_MVIEW(View,sGroup,MVIEW_GROUP_NEW);

		if (iGlobal_SYS("MONTAJ.DEFAULT_MAP_FONT",sFont) == 1)
			Strcpy_STR(sFont,_n("default"));
		TextFont_MVIEW(View,sFont,FALSE,MVIEW_FONT_WEIGHT_NORMAL,FALSE);
		TextSize_MVIEW(View,rTxtSize);
		TextAngle_MVIEW(View,0.0);
		TextColor_MVIEW(View,iColor_MVIEW("k"));
   
		LineThick_MVIEW(View,0.15*rScaleMM);
		LineStyle_MVIEW(View,0,0.0);
		LineColor_MVIEW(View,iColor_MVIEW("k"));
   
		if (iPlotPath)
		{
			Text_MVIEW(View,_("Line path"),rXo+15.0*rScaleMM,rYo);
			Line_MVIEW(View,rXo,rYo+1.25*rScaleMM,rXo+10.0*rScaleMM,rYo+1.25*rScaleMM);
			rYo+=5.0*rScaleMM;
		}

 
		// --- QC results ---
   
		TextColor_MVIEW(View,iColor_MVIEW("c"));
		Text_MVIEW(View,_("Flag_Height"),rXo+15.0*rScaleMM,rYo);
     
		if (iGlobal_SYS("MONTAJ.DEFAULT_SYMBOL_FONT",sFont) == 1)
			Strcpy_STR(sFont,_n("symbols"));
		SymbFont_MVIEW(View,sFont,TRUE,MVIEW_FONT_WEIGHT_MEDIUM,FALSE);
		SymbColor_MVIEW(View,iColor_MVIEW("c"));
		SymbFillColor_MVIEW(View,iColor_MVIEW("c"));
		SymbNumber_MVIEW(View,20);  // solid circle
		SymbSize_MVIEW(View,0.2*rScaleMM);
		SymbAngle_MVIEW(View,0.0);

		k = (int)(30.0/0.2) + 1;
		for (i = 0; i < k; i++)
			Symbol_MVIEW(View, rXo + 0.33*(real)i*0.2*rScaleMM, rYo + 1.25*rScaleMM);

		
		// --- Save group location and extents ---

		SetReal_SYS("QC", "LEGEND_X_OUT", rXLegend);
		SetReal_SYS("QC", "LEGEND_Y_OUT", rYLegend);

		GetGroupExtent_MVIEW (View, sGroup, rMinX, rMinY, rMaxX, rMaxY, MVIEW_UNIT_MM);
		SetReal_SYS("QC", "LEGEND_WIDTH", rMaxX - rMinX);
		SetReal_SYS("QC", "LEGEND_HEIGHT", rMaxY - rMinY);

 
		// --- Done with legend ---

		Destroy_MVIEW(View);
		UnLock_EMAP(EMap);
	}
 
   
	// --- Set default plotting channel ---

   SetString_SYS("QCDEVMAP","RESULT","Flag_Height");     
}
