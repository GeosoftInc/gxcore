//===========================================================================
NAME          = "Create a map to display survey plan"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/QC Utility"

DESCRIPTION   = "\

Use of this GX to create a new A3 map to display the survey plan generated by 
QCPLAN GX.

Parameters: 

    QCPLAMAP.MAP     -  Current map (0) or a new map (1) 
            .POLY    -  Boundary polygon file name
            .BDCOL   -  Color for boundary polygon
            .BDTHK   -  Line thickness (mm) for boundary polygon
            .SLCOL   -  Color for survey lines
            .SLTHK   -  Line thickness for survey lines
            .TLCOL   -  Color for tie lines
            .TLTHK   -  Line thickness for tie lines
            .SIZE    -  Text size in mm for labels
            
"
// Revision History:
// v5.1.3: Using "Current" X and Y channels
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "QCPLAMAP.gr"
#include "QCPLAMAP.grh"

#define  QCPLAMAP_BACK  999

//===========================================================================
//                                  INCLUDE
//===========================================================================

#include <all.gxh>     // system

//===========================================================================
//                                 VARIABLES
//===========================================================================

MAP         Map;
EMAP        EMap;
IPJ         DataIPJ;
MVIEW       View;
EDB         EData;             // Database handle
DB          Data;             // Database handle
DB_SYMB     XCh,YCh;
DB_SYMB     Line;             // Line Handle
DGW         Diag;             // Dialogue handle
PLY			Poly;					// polygon object
VV          VVx,VVy;				// polyline VV's
IPJ         hIPJ;

string(STR_FILE)  sFile;
string(STR_FILE)  sFont,sName, sMap;
string(STR_DB_SYMBOL) sLine,sLine1,sGroup;
string(STR_DEFAULT_SHORT) sBDCol,sSLCol,sTLCol;
string(STR_DEFAULT) sLabel;
string(STR_GROUP) sGrpName;

int         i;
int         iPoly;
int         iMap;
int         iLines,iTotLines;
int         fSurveyLine,fTieLine;

real        rScale;
real        rBDThk,rSLThk,rTLThk;
real        rLabelSize;
real        rMinX,rMinY,rMaxX,rMaxY;

//===========================================================================
//                                   CODE
//===========================================================================

{
   rMinX = rMinY = rMaxX = rMaxY =rDUMMY;

   // --- Are we running interactively ? ---

   i = QCPLAMAP_BACK;
   while (iInteractive_SYS() && (i == QCPLAMAP_BACK))
   {
      Diag = Create_DGW("QCPLAMAP");
      
      SetInfoSYS_DGW(Diag,_QCPLAMAP_0,DGW_LISTALIAS,"QCPLAMAP","MAP");     
      SetInfoSYS_DGW(Diag,_QCPLAMAP_1,DGW_FILEPATH, "QCPLAMAP","POLY");     
      SetInfoSYS_DGW(Diag,_QCPLAMAP_2,DGW_TEXT,     "QCPLAMAP","BDCOL");     
      SetInfoSYS_DGW(Diag,_QCPLAMAP_3,DGW_TEXT,     "QCPLAMAP","BDTHK");     
      SetInfoSYS_DGW(Diag,_QCPLAMAP_4,DGW_TEXT,     "QCPLAMAP","SLCOL");     
      SetInfoSYS_DGW(Diag,_QCPLAMAP_5,DGW_TEXT,     "QCPLAMAP","SLTHK");     
      SetInfoSYS_DGW(Diag,_QCPLAMAP_6,DGW_TEXT,     "QCPLAMAP","TLCOL");     
      SetInfoSYS_DGW(Diag,_QCPLAMAP_7,DGW_TEXT,     "QCPLAMAP","TLTHK");     
      SetInfoSYS_DGW(Diag,_QCPLAMAP_8,DGW_TEXT,     "QCPLAMAP","SIZE");     
      
      
      i = iRunDialogue_DGW(Diag);
      if (i == -1) Cancel_SYS(); 
      
      GetInfoSYS_DGW(Diag,_QCPLAMAP_0,DGW_LISTALIAS,"QCPLAMAP","MAP");     
      GetInfoSYS_DGW(Diag,_QCPLAMAP_1,DGW_FILEPATH, "QCPLAMAP","POLY");     
      GetInfoSYS_DGW(Diag,_QCPLAMAP_2,DGW_TEXT,     "QCPLAMAP","BDCOL");     
      GetInfoSYS_DGW(Diag,_QCPLAMAP_3,DGW_TEXT,     "QCPLAMAP","BDTHK");     
      GetInfoSYS_DGW(Diag,_QCPLAMAP_4,DGW_TEXT,     "QCPLAMAP","SLCOL");     
      GetInfoSYS_DGW(Diag,_QCPLAMAP_5,DGW_TEXT,     "QCPLAMAP","SLTHK");     
      GetInfoSYS_DGW(Diag,_QCPLAMAP_6,DGW_TEXT,     "QCPLAMAP","TLCOL");     
      GetInfoSYS_DGW(Diag,_QCPLAMAP_7,DGW_TEXT,     "QCPLAMAP","TLTHK");     
      GetInfoSYS_DGW(Diag,_QCPLAMAP_8,DGW_TEXT,     "QCPLAMAP","SIZE");     
      
      Destroy_DGW(Diag);


      // --- Run 2nd dialog ---
      
      iMap    = iGetInt_SYS("QCPLAMAP","MAP");
      
      if (iMap) {
         
         // --- Run NEWMAP wizard ---
   
         iMap = iRunGX_SYS("newmap.gx");
              
         if (iMap == -1)        i = 2;
         else if (iMap == 1)    Cancel_SYS();
      }        

   } 
   if (!iInteractive_SYS()) {
      iMap    = iGetInt_SYS("QCPLAMAP","MAP");
      
      if (iMap) {
         
         // --- Run NEWMAP wizard ---
   
         iMap = iRunGX_SYS("newmap.gx");
              
         if (iMap == -1)        i = 2;
         else if (iMap == 1)    Cancel_SYS();
      }
      GetString_SYS("NEWMAP","MAP",sMap);
      Load_EMAP(sMap);
   }

   // --- Get Parameters ---
   
   iMap    = iGetInt_SYS("QCPLAMAP","MAP");
   GetString_SYS("QCPLAMAP","POLY",sFile);
   GetString_SYS("QCPLAMAP","BDCOL",sBDCol);
   rBDThk  = rGetReal_SYS("QCPLAMAP","BDTHK");
   GetString_SYS("QCPLAMAP","SLCOL",sSLCol);
   rSLThk  = rGetReal_SYS("QCPLAMAP","SLTHK");
   GetString_SYS("QCPLAMAP","TLCOL",sTLCol);
   rTLThk  = rGetReal_SYS("QCPLAMAP","TLTHK");
   rLabelSize  = rGetReal_SYS("QCPLAMAP","SIZE");

   // --- Get database ---
   
   EData = Current_EDB();
   Data = Lock_EDB(EData);

   // --- Get map ---
   
   EMap   = Current_EMAP();
   Map    = Lock_EMAP(EMap);


   // --- Do the reference channels exist ? ---

   XCh = GetXYZChanSymb_DB(Data, DB_CHAN_X);
   if (XCh==NULLSYMB)
      Abort_SYS(_("The current X channel does not exist."));
   LockSymb_DB(Data,XCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);

   YCh = GetXYZChanSymb_DB(Data, DB_CHAN_Y);
   if (YCh==NULLSYMB)
      Abort_SYS(_("The current Y channel does not exist."));
   LockSymb_DB(Data,YCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);


   // --- Get map and view ---

   View = Create_MVIEW(Map,"*Data",MVIEW_WRITEOLD);
   hIPJ = Create_IPJ();
   GetIPJ_MVIEW(View,hIPJ);


   // --- Set thining and local scale ---
   
   SetThinRes_MVIEW(View,0.0);
   rScale = rScaleMM_MVIEW(View);

   // --- Handle Projections ---
   
   DataIPJ = Create_IPJ();
   GetIPJ_DB(Data,XCh,DataIPJ);
   SetWorkingIPJ_MVIEW(View,DataIPJ);


   // --- Create a group ---

   GetName_DB(Data,DB_NAME_FILE,sName);
   FileNamePart_STR(sName,sName,STR_FILE_PART_NAME);
//   Strcpy_STR(sGroup,"QC_");
//   Strcat_STR(sGroup,sName);
//   Strcat_STR(sGroup,"_Plan");
   GenGroupName_STR("QC_Plan",sName,"",sGrpName);
   Strcpy_STR(sGroup,sGrpName);
   StartGroup_MVIEW(View,sGroup,MVIEW_GROUP_NEW);



   // -----------------------------
   // --- Plot boundary polygon ---

   // --- Create VVs ---

   VVx = Create_VV(REAL,0);
   VVy = Create_VV(REAL,0);


   // --- If append, load current file ---

   Poly = Create_PLY();
   LoadTable_PLY(Poly,sFile);
   ChangeIPJ_PLY(Poly,hIPJ);
   iPoly = iNumPoly_PLY(Poly);


   // --- Set drawing attributes ---

   LineStyle_MVIEW(View,0,0.0);
   LineThick_MVIEW(View,rBDThk*rScale);
   LineColor_MVIEW(View,iColor_MVIEW(sBDCol));
   FillColor_MVIEW(View,iColor_MVIEW(""));


   for (i=0;i<iPoly;i++) {

      // --- Get polygon ---

      GetPolygon_PLY(Poly,VVx,VVy,i);


      // --- Draw it ---

      PolyLine_MVIEW(View,MVIEW_DRAW_POLYGON,VVx,VVy);

   }





   // --------------------------------
   // --- Plot line path           ---


   // --- Set font characteristics --- 

   if (iGlobal_SYS("MONTAJ.DEFAULT_MAP_FONT",sFont) == 1)
      Strcpy_STR(sFont,_n("Default"));
   TextFont_MVIEW(View,sFont,FALSE,0,FALSE);
   TextSize_MVIEW(View,rLabelSize*rScale);
   LineStyle_MVIEW(View,0,0.0);


   // --- Create link to database ---

   Link_MVIEW(View,Data,_n("Data Link"));


   // --- Draw survey lines ---

   fSurveyLine = fTieLine = 0;

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);
   Progress_SYS(1);
   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {

      // --- Get line label ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      LineLabel_DB(Data,Line,sLine, DB_LINE_LABEL_FORMAT_TYPE + 
                                    DB_LINE_LABEL_FORMAT_LINE + 
                                    DB_LINE_LABEL_FORMAT_VERSION);
      UnLockSymb_DB(Data,Line);


      // --- Is this a survey line or tie line ? ---
      
      if (iCharComp_STR(sLine,"L"))
      {   
         fSurveyLine = 1;
         TextColor_MVIEW(View,iColor_MVIEW(sSLCol));
         LineColor_MVIEW(View,iColor_MVIEW(sSLCol));
         LineThick_MVIEW(View,rSLThk*rScale);
         LineStyle_MVIEW(View,0,0.0);
      } else {
         fTieLine = 1;
         TextColor_MVIEW(View,iColor_MVIEW(sTLCol));
         LineColor_MVIEW(View,iColor_MVIEW(sTLCol));
         LineThick_MVIEW(View,rTLThk*rScale);
         LineStyle_MVIEW(View,0,0.0);
      }   

      // --- Update the progress bar ---

      Strcpy_STR(sLabel,_("Drawing line: "));
      Strcat_STR(sLabel,sLine);
      ProgName_SYS(sLabel,0);
      ProgUpdateL_SYS(iLines,iTotLines);


      // --- Get X and Y ---

      GetChanVV_DB(Data,Line,XCh,VVx);
      GetChanVV_DB(Data,Line,YCh,VVy);


      // --- add line link ---

      LineLabel_DB(Data,Line,sLine1,DB_LINE_LABEL_FORMAT_LINK);
      ChangeLineMessage_MVIEW(View,sLine1);


      // --- Draw the line ---

      PathPlotEx2_MVU(View, VVx, VVy, sLine, MVU_FLIGHT_LOCATE_END, MVU_FLIGHT_COMPASS_NONE,
                      75.0, 1, rLabelSize*rScale, 0.0, 0.0, MVU_FLIGHT_DUMMIES_INCLUDED);


      // --- Advance to Next Line ---        

      Line = NextSelLine_DB(Data, Line );
      iLines++;

   }

   Progress_SYS(0);

   // --- Add maker object ---

   EasyMaker_MVIEW(View,_("Display survey plan..."),"QCPLAMAP;");


   // --- Unlock the channel symbol ---

   UnLockSymb_DB(Data,XCh);
   UnLockSymb_DB(Data,YCh);

   UnLock_EDB(EData);

   Destroy_SYS(VVx);
   Destroy_SYS(VVy);
   Destroy_SYS(Poly);
   Destroy_SYS(View);
   Destroy_SYS(hIPJ);
   
}
