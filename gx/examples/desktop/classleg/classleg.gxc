//===========================================================================

NAME          = "CLASSLEG GX"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Euler3D/Plot Solution Symbols"

DESCRIPTION   = "
Plot a legend for the classified symbols based on an ITR file prepared
using CLASYMB GX.

   Parameters:

      CLASSLEG
            .ITR         ITR File with symbol information
            .TITLE       (Optional) Title for the legend
            .SUBTITLE    (Optional) Subtitle for the legend
            .X           X location of bottom left corner of legend
            .Y           Y location of bottom left corner of legend
            .FONTSIZE    Font size for labels
            .SYMBSCALE   Scaling factor for symbol size
"
// Revision History:
// v6.4.1: Allowed GX to run in script mode.
// v6.4.0: Set default symbol 20.
// v6.3.1: Force to base view when locating legend.
// v6.0.0: HF: Map locking problem when locating legend.
// v5.1.5: Removed commented out lines.
//         Fixed bug if zone file defined, but doesn't actually exist.
// v5.1.4: Initialized previously uninitialized title buffers.
//===========================================================================

RESOURCE="CLASSLEG.gr"
#include "CLASSLEG.grh"


//===========================================================================

#include <all.gxh>


//===========================================================================
//                             VARIABLES
//===========================================================================

string(STR_DEFAULT_SHORT) sTitle, sSubTitle;
string(STR_GROUP) sGroup;
string(STR_DEFAULT) sClassCh, sUnits;
string(STR_DEFAULT_SHORT) sHints;
string(STR_FILE) sITR;
real rFontSize, rX1, rY1, rSymbScale;

EMAP  EMap;
MAP   Map;
MVIEW View;
DGW   Diag, DiagSub;
BF  Bf;
ITR Itr;
REG Reg;

int iAction, iDone, iValue;
string(STR_DEFAULT_LONG) sFont;

//===========================================================================
//                           MAP CODE
//===========================================================================

{
   // --- Ensure we have a base map and that we are not working with grid documents ---
   
   if (iRunGX_SYS("sclmap") != 0) 
      Cancel_SYS();
	  
   // --- check for base view ---

   EMap = Current_EMAP();
   Map = Lock_EMAP(EMap);
   if (!iExistView_MAP(Map,"*Base"))
      Abort_SYS(_("A base view is required to use this GX."));
   UnLock_EMAP(EMap);   


   // --- get the map ---

   Map  = Lock_EMAP(EMap);


   // --- Initialize title and subtitle buffers ---

   Strcpy_STR(sTitle, "");
   Strcpy_STR(sSubTitle, "");


   rX1 = 0.0;     // prevents warning message on compile
   rY1 = 0.0;


   // --- See if an ITR file is listed in the INI ---
      
   GetString_SYS("CLASSLEG","ITR",sITR);
   

   // --- Are we running interactively ? ---

   if (iInteractive_SYS()) 
   {
      // --- Create the Dialogue ---

      Diag = Create_DGW("CLASSLEG");
      
      // --- If an ITR file has not been specified... ---

      if(!iStrlen_STR(sITR)) 
         iAction = 2;   // --- ...Specify an ITR file... ---
      else {
         if(iFileExist_SYS(sITR))
            iAction = 3;   // --- ... else Create title and subtitle
         else
            iAction = 2;
      }

      iDone = 0;
      while(!iDone) {

         if(iAction == 0) {   // --- Run Main dialogue ---

            // --- Put current values into the dialogue ---

            if(iStrlen_STR(sTitle)) 
               SetInfo_DGW(Diag,_CLASSLEG_0 ,DGW_TEXT, sTitle);

            if(iStrlen_STR(sSubTitle)) 
               SetInfo_DGW(Diag,_CLASSLEG_1 ,DGW_TEXT, sSubTitle);

            // --- Set any Defaults from INI. These are not generally ITR specific ---

            SetInfoSYS_DGW(Diag,_CLASSLEG_2,DGW_TEXT,"CLASSLEG","X");
            SetInfoSYS_DGW(Diag,_CLASSLEG_3,DGW_TEXT,"CLASSLEG","Y");
            SetInfoSYS_DGW(Diag,_CLASSLEG_4,DGW_TEXT,"CLASSLEG","FONTSIZE");
            SetInfoSYS_DGW(Diag,_CLASSLEG_5,DGW_TEXT,"CLASSLEG","SYMBSCALE");

            iValue = iRunDialogue_DGW(Diag);

            if(iValue != -1) {
            
               // --- Read the returned values from the dialogue ---

               GetInfo_DGW(Diag,_CLASSLEG_0 ,DGW_TEXT, sTitle);
               GetInfo_DGW(Diag,_CLASSLEG_1 ,DGW_TEXT, sSubTitle);
   
               // --- Put values back in INI ---

               GetInfoSYS_DGW(Diag,_CLASSLEG_0,DGW_TEXT,"CLASSLEG","TITLE");
               GetInfoSYS_DGW(Diag,_CLASSLEG_1,DGW_TEXT,"CLASSLEG","SUBTITLE");
               GetInfoSYS_DGW(Diag,_CLASSLEG_2,DGW_TEXT,"CLASSLEG","X");
               GetInfoSYS_DGW(Diag,_CLASSLEG_3,DGW_TEXT,"CLASSLEG","Y");
               GetInfoSYS_DGW(Diag,_CLASSLEG_4,DGW_TEXT,"CLASSLEG","FONTSIZE");
               GetInfoSYS_DGW(Diag,_CLASSLEG_5,DGW_TEXT,"CLASSLEG","SYMBSCALE");
      
            }

            if(iValue == 0)   // --- Plot ---

               iDone = 1;
            
            else if(iValue == 1) // --- Locate the plot corner

               iAction = 1;
            
            else if(iValue == 2) // --- Specify ITR File

               iAction = 2;

            else if(iValue == -1) // --- Cancel ---
               
               Cancel_SYS();    

         }  // --- End Main Dialogue ---

         else if(iAction == 1) {  // --- Locate Plot ---  

            // --- Get the coordinates of a user selected box ---

            if (HINTS)    
               DisplayMessage_SYS(_("Locate Legend"),_("Locate the Legend Lower Left Corner"));

            UnLock_EMAP(EMap);
            iSetCurrentView_EMAP(EMap,"*Base");
            if (!iGetPoint_EMAP(EMap,_("Locate Legend..."),rX1,rY1)) {

               SetReal_SYS("CLASSLEG","X",rX1);
               SetReal_SYS("CLASSLEG","Y",rY1);

            }
            Map = Lock_EMAP(EMap);

            iAction = 0;   // Main dialogue 

         }  // --- End if(iAction==1) Locate --

         else if(iAction == 2) {  // --- Specify an Input file ---           
         
         // --- Run the Input ITR dialogue ---

            DiagSub = Create_DGW("CLASSLEGINPUT");
            
            SetInfoSYS_DGW(DiagSub,_CLASSLEGINPUT_0,DGW_FILEPATH,"CLASSLEG","ITR");     

            iValue = iRunDialogue_DGW(DiagSub);

            if(iValue == 0) {
            
               GetInfoSYS_DGW(DiagSub,_CLASSLEGINPUT_0,DGW_FILEPATH,"CLASSLEG","ITR");     
               GetString_SYS("CLASSLEG","ITR",sITR);   

               iAction = 3;   // Create title and subtitle

            }
            else {  // Cancel

               // --- A file is required for this GX ---

               if(!iStrlen_STR(sITR)) Cancel_SYS();
            }

            Destroy_DGW(DiagSub);

            // --- Return to main menu ---

            iAction = 0;

         } // --- End if(iAction == 2) File ---

         else if(iAction == 3) {  // --- Create the title and subtitle ---           

            // --- Get the REG from the ITR ---

            Bf = Create_BF(sITR, BF_READ);
            Itr = CreateS_ITR(Bf);
            Reg = GetREG_ITR(Itr);

            // --- Read the channel ---
 
            Get_REG(Reg, "Channel", sClassCh, sizeof(sClassCh));

            // --- Read the units ---

            Get_REG(Reg, "Units", sUnits, sizeof(sUnits));

            // --- Convert to a Title and Subtitle ---

            Strcpy_STR(sTitle,sClassCh);
                     
            Strcpy_STR(sSubTitle,"");
            if(iStrlen_STR(sUnits)) {
               Strcpy_STR(sSubTitle, "(");
               Strcat_STR(sSubTitle, sUnits);
               Strcat_STR(sSubTitle, ")");
            }

            // --- Destroy the REG resource (The REG itself is not destroyed) ---

            Destroy_REG(Reg);

            // --- Destroy the other resources ---
 
            DestroyEx_BF(Bf);
            Destroy_ITR(Itr);
            
            iAction = 0;   // --- Return to main menu ---

         } // --- End if(iAction == 3) Create the title and subtitle --- 

      }  // End while(!iDone)
   }


   // --- Get the ITR file ---
   
   GetString_SYS("CLASSLEG","ITR",sITR);
   if(!iStrlen_STR(sITR))
       Abort_SYS(_("Zone file (*.itr) required for colours and ranges."));


   // --- Get Parameters ---

   rX1  = rGetReal_SYS("CLASSLEG","X");
   rY1  = rGetReal_SYS("CLASSLEG","Y");
   GetString_SYS("CLASSLEG", "TITLE", sTitle);
   GetString_SYS("CLASSLEG", "SUBTITLE", sSubTitle);

   rFontSize = rGetReal_SYS("CLASSLEG","FONTSIZE");
   if(rFontSize<=0.0) {
      Abort_SYS(_("The font size in mm must be > 0.0"));
   }

   rSymbScale = rGetReal_SYS("CLASSLEG","SYMBSCALE");
   if(rSymbScale<=0.0) {
      Abort_SYS(_("The symbol scale factor must be > 0.0"));
   }

   // --- Create a view ---

   View = Create_MVIEW(Map,"base",MVIEW_WRITEOLD);
   

   // --- Set a title group ---

   GenGroupName_STR("CSLEG",sTitle,"",sGroup);
   StartGroup_MVIEW(View,sGroup,MVIEW_GROUP_NEW);
   

   // --- add the maker ---

   Maker_MVIEW(View,0,1,"CLASSLEG",MAKER_GX,_("Classified Symbol Legend..."),"CLASSLEG;");

   // --- set default label font characteristics --- 

   if (iGlobal_SYS("MONTAJ.DEFAULT_MAP_FONT",sFont) == 1)
      Strcpy_STR(sFont,_n("Arial"));
   TextFont_MVIEW(View,sFont,FALSE,MVIEW_FONT_WEIGHT_NORMAL,FALSE);
   TextColor_MVIEW(View,C_BLACK);
   SymbNumber_MVIEW(View, 20);
   
   
   // --- Draw the legend ---

   CSymbLegend_MVU(View, rX1, rY1, rFontSize, rSymbScale,
                   sITR, sTitle, sSubTitle);


   // --- done ---

   Destroy_MVIEW(View);
   UnLock_EMAP(EMap);

}
