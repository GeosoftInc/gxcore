//===========================================================================
NAME          = "Import IMPORTBB binary flight data"
#include <version.gxh>
DESCRIPTION   = "
Import blocked binary data file.

    IMPORTBB.DATA     : Input data file name
            .TEMPLATE : Import template file name (.I2 assumed)
            .LINE     : Optional Line name, blank for no line.
            .FLIGHT   : Optional flight number.
            .DATE     : Optional date.
            .FID      : Optional fiducial channel.
"

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Database/Import"

// Revision History:
// v7.1:   QA 14976 Fixed optional line name option.
// v6.4.0: Fixed Fid option to re-fid all the lines, not just the last created.
// v6.1.0: Added option to set Fid start using fiducial channel.
// v5.1.3: Using "Current" X and Y channels
//         Added projection setting if enabled.

//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "importbb.gr"
#include "importbb.grh"

//===========================================================================
//                                  INCLUDE
//===========================================================================

#include <all.gxh>     // system

//===========================================================================
//                                 VARIABLES
//===========================================================================

EDB         EData;             // Database handle
DB          Data;             // Database handle
DGW         Diag;             // Dialogue handle
DB_SYMB     Line, FidCh, Ch;
VV          FidVV;
LST         ChanLST, LineLST;
WA          Wa;

int         i, iNLines, iNChans, iProtect;

string(STR_FILE) sData;
string(STR_FILE) sTemplate;
string(STR_DB_SYMBOL) sLine, sXCh, sYCh, sFid, sChan;
string(STR_DEFAULT_LONG) sMsg;

int         iFlight, iLine, iProg, iNProg, iWarn;
real        rDate, rFidStart, rFidInc;

//===========================================================================
//                                   CODE
//===========================================================================

{

   // --- get database ---
      
   EData = Current_EDB();
   Data = Lock_EDB(EData);

   // --- Are we running interactively ? ---

   if (iInteractive_SYS())
   {

     // --- Create the Dialogue ---

     Diag = Create_DGW("importbb");



     // --- Set any Defaults ---

     SetInfoSYS_DGW(Diag,_IMPORTBB_0,DGW_FILEPATH,"IMPORTBB","DATA");
     SetInfoSYS_DGW(Diag,_IMPORTBB_1,DGW_FILEPATH,"IMPORTBB","TEMPLATE");
     SetInfoSYS_DGW(Diag,_IMPORTBB_2,DGW_TEXT,"IMPORTBB","LINE");
     SetInfoSYS_DGW(Diag,_IMPORTBB_3,DGW_TEXT,"IMPORTBB","FLIGHT");
     SetInfoSYS_DGW(Diag,_IMPORTBB_4,DGW_TEXT,"IMPORTBB","DATE");
     SetInfoSYS_DGW(Diag,_IMPORTBB_5,DGW_TEXT,"IMPORTBB","FID");


     // --- Run the Dialogue ---

     i = iRunDialogue_DGW(Diag);
     if (i != 0) Cancel_SYS();    // He hit cancel


     // --- Get the Strings ---

     GetInfoSYS_DGW(Diag,_IMPORTBB_0,DGW_FILEPATH,"IMPORTBB","DATA");
     GetInfoSYS_DGW(Diag,_IMPORTBB_1,DGW_FILEPATH,"IMPORTBB","TEMPLATE");
     GetInfoSYS_DGW(Diag,_IMPORTBB_2,DGW_TEXT,"IMPORTBB","LINE");
     GetInfoSYS_DGW(Diag,_IMPORTBB_3,DGW_TEXT,"IMPORTBB","FLIGHT");
     GetInfoSYS_DGW(Diag,_IMPORTBB_4,DGW_TEXT,"IMPORTBB","DATE");
     GetInfoSYS_DGW(Diag,_IMPORTBB_5,DGW_TEXT,"IMPORTBB","FID");

     // --- Destroy the Dialogue ---

     Destroy_DGW(Diag);

   }

   // --- Get Parameters ---

   GetString_SYS("IMPORTBB","DATA",sData);
   GetString_SYS("IMPORTBB","TEMPLATE",sTemplate);
   if (iExistInt_SYS("IMPORTBB","FLIGHT"))
      iFlight = iGetInt_SYS("IMPORTBB","FLIGHT");
   else
      iFlight = iDUMMY;
   if (iExistString_SYS("IMPORTBB","DATE")) {
      GetString_SYS("IMPORTBB","DATE",sLine);
      rDate = rScanDate_STR(sLine,DATE_FORMAT_YYYYMMDD);
   }
   else
      rDate = rDUMMY;
   GetString_SYS("IMPORTBB","LINE",sLine);
   GetString_SYS("IMPORTBB","FID",sFid);
   

   // --- turn on progress ---

   Progress_SYS(1);
   ProgName_SYS(_("Import Blocked Binary"),1);
   
   
   // --- import ---

   Wa = Create_WA("ImportQA.log", WA_NEW);
   ImportBIN3_DU(Data,sData,sTemplate,sLine,iFlight,rDate,Wa);
   

   // --- get current X, Y channels ---
      
   GetXYZChan_DB(Data, DB_CHAN_X, sXCh);
   GetXYZChan_DB(Data, DB_CHAN_Y, sYCh);
   
   
   // --- Reset Fiducials based on a FID channel? ---
   
   iWarn = FALSE;
   if(iStrlen_STR(sFid)) 
   {
      
      FidCh = FindChan_DB(Data, sFid);
      if(FidCh==NULLSYMB) {
         Strcpy_STR(sMsg, _("Unable to locate fiducial reference channel "));
         Strcat_STR(sMsg, sFid);
         Strcat_STR(sMsg, _("."));
         Abort_SYS(sMsg);
      }
            
      FidVV = Create_VV(REAL, 0);
      LOCK_RW(Data, FidCh);
      

      // --- Make LSTs ---
      
      ChanLST = Create_LST(2*STR_DB_SYMBOL);
      ChanLST_DB(Data, ChanLST);
      iNChans = iSize_LST(ChanLST);

      LineLST = Create_LST(2*STR_DB_SYMBOL);
      LineLST_DB(Data, LineLST);      
      iNLines = iSize_LST(LineLST);
      
      
      // --- Loop over all the lines ---
      
      ProgName_SYS(_("Refidding channels"), 1);
      iNProg = iNChans*iNLines;      
      iProg = 0;
      for(iLine=0;iLine<iNLines;iLine++)
      {      
         GetSymbItem_LST(LineLST, iLine, sLine, Line);       
         GetChanVV_DB(Data, Line, FidCh, FidVV);

         
         // --- Need data to re-fid. If none, register warning and continue ---
               
         if(iLength_VV(FidVV)==0) 
         {
            iWarn = TRUE;
            continue;
         }
            
         
         // --- Reset the Fid start for all the channels ---
         
         rFidStart = rGetReal_VV(FidVV, 0);
         for(i=0;i<iNChans;i++) 
         {
            // --- Update progress ---
            
            iProg++;
            ProgUpdateL_SYS(iProg, iNProg);
            if(iCheckStop_SYS()) Cancel_SYS();
            
            GetSymbItem_LST(ChanLST, i, sChan, Ch);
            LOCK_RW(Data, Ch);
            rFidInc = rGetFidIncr_DB(Data, Line, Ch);
            iProtect = iGetChanProtect_DB(Data, Ch);
            SetChanProtect_DB(Data, Ch, DB_CHAN_UNPROTECTED);
            SetFid_DB(Data, Line, Ch, rFidStart, rFidInc);
            SetChanProtect_DB(Data, Ch, iProtect);
            UNLOCK(Data, Ch);
         }      
      }

      UNLOCK(Data, FidCh);

      if(iWarn)
      {
         Strcpy_STR(sMsg, _("Unable to reset channel fiducial starts on one or more lines because there are no items in the "));
         Strcat_STR(sMsg, sFid);
         Strcat_STR(sMsg, _(" channel."));
         DisplayMessage_SYS(_("Re-Fidding channels"), sMsg);
      }

   }


   // --- progress off ---

   Progress_SYS(0);


   // --- Release the Database ---

   UnLock_EDB(EData);

   if (iInteractive_SYS()) {       
      
      // --- display data ---
      
      DelLine0_EDB(EData);
      LoadChan_EDB(EData,sXCh);
      LoadChan_EDB(EData,sYCh);
      LoadAllChans_EDB(EData);
      DelLine0_EDB(EData);
      
   }



   // --- Set projection if not set already. ---

   iRunGX_SYS("impsetprj");

}
