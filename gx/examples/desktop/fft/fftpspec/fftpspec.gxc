//===========================================================================
NAME          = "Calculate FFT Power Spectrum"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/FFT1D"

DESCRIPTION   = "

Calculate the Log Power Spectrum of a channel

Parameters:

    FFTPSPEC.IN       - Name of the Input Channel
            .OUT      - Name of Power Spectrum output channel
     FFTSAMP.SAMPINCR - Required sampling distance increment.
            .METHOD   - \"Linear\", \"Min. Curvature\", \"Akima\"
"
// Revision History:
// v8.1.0: Replaced iGetLength_DB with iGetChannelLength_DB.
// v5.1.3: Using "Current" X and Y channels

//===========================================================================

RESOURCE = "fftpspec.gr"
#include "fftpspec.grh"

//===========================================================================

#include <all.gxh>

//===========================================================================
//                             GLOBAL VARIABLES
//===========================================================================

string(STR_DB_SYMBOL) sInCh;            // Input Channel Name
string(STR_DB_SYMBOL) sOutCh;           // Output Channel Name
string(STR_DB_SYMBOL) sFid,sRes;        // Channel Names
string(STR_DEFAULT) sMethod;            // interpolation method
string(STR_DEFAULT_SHORT) sTemp;        // temporary string
string(STR_DEFAULT) sLabel,sExt;
string(STR_FILE) sDBName,sSpcDBName;


EDB        EData,ESpcData;
DB         Data,SpcData;
DB_SYMB    Line,SpcLine;      // Line handle
DB_SYMB    InCh;              // Input Channel handle
DB_SYMB    OutCh;             // Output Channel handle
DB_SYMB    XCh,YCh,DisCh,FidCh,ResCh;     // Channel Handles
DGW        Diag;              // Dialogue handle
LST        List;              // List handle
VV         hVVin;             // VV for input channel
VV         hVVout;            // VV for output power spectrum
FFT        hFFT;              // FFT for data processing

real       rFinc;             // Fiducial increment of input VV
int        i;                 // utility int
int        iLine;             // Number of Lines Processed
int        iTotLines;         // Total Number of Lines to Process
real       rFidStart;         // Fiducial start of input Chan
real       rFidIncr;          // Fiducial increment of input Chan
real       rSampIncr;         // Required sampling distance increment
int        iMethod;           // 
int        iDist;             // iTRUE if "_Distance" exists
int        iVVlen;            // Length of input VV
int        iDum;              // flags if input VV is dummy
int        iXYChLocked;


//===========================================================================
//                      POWER SPECTRUM CALCULATION CODE
//===========================================================================

{

   // --- Get the Database ---

   EData = Current_EDB();
   Data = Lock_EDB(EData);


   // --- Are we running interactively ? ---

   if (iInteractive_SYS())
   {
      i = 1;
      while(i!=0) {
      
         switch(i) {
         
         case 1:
   
            // --- Create the Dialogue ---

            Diag = Create_DGW("FFTPSPECForm");


            // --- Set up lists ---
    
            List = GetList_DGW(Diag,_FFTPSPECFORM_0);
            SymbLST_DB(Data,List,DB_SYMB_CHAN);
            Sort_LST(List,0,0);
            List = GetList_DGW(Diag,_FFTPSPECFORM_1);
            SymbLST_DB(Data,List,DB_SYMB_CHAN);
            Sort_LST(List,0,0);
                                                     
            

            // --- Set any Defaults from INI ---

            SetInfoSYS_DGW(Diag,_FFTPSPECFORM_0,DGW_TEXT,"FFTPSPEC","IN");     
            SetInfoSYS_DGW(Diag,_FFTPSPECFORM_1,DGW_TEXT,"FFTPSPEC","OUT");     

            // --- Run the Dialogue ---

            i = iRunDialogue_DGW(Diag);
            if (i == -1) Cancel_SYS(); 


            // --- Get the Strings and replace in INI ---

            GetInfoSYS_DGW(Diag,_FFTPSPECFORM_0,DGW_TEXT,"FFTPSPEC","IN");     
            GetInfoSYS_DGW(Diag,_FFTPSPECFORM_1,DGW_TEXT,"FFTPSPEC","OUT");     


            // --- Destroy the Dialogue ---

            Destroy_DGW(Diag);

            break;

         case 2:
               
            iRunGX_SYS("FFTSAMP.GX");

            i = 1;
            break;
            
         } // end switch
      } // end while
   } // end if


   // --- Get Parameters ---

   GetString_SYS("FFTPSPEC","IN",sInCh);
   GetString_SYS("FFTPSPEC","OUT",sOutCh);

   // --- Check for null input and output channel strings ---

   if (!iStrlen_STR(sInCh))
      Abort_SYS(_("Input Channel Name not specified"));

   if (!iStrlen_STR(sOutCh))
      Abort_SYS(_("Output Channel Name not specified"));   


   // --- Get required sampling distance increment ---
   
   if (iExistReal_SYS("FFTSAMP","SAMPINCR"))
      rSampIncr  = rGetReal_SYS("FFTSAMP","SAMPINCR");
   else
      rSampIncr = rDUMMY;
   

   // --- Interpolation method ---
   
   GetString_SYS("FFTSAMP","METHOD",sMethod);
   if (iStrcmp_STR(sMethod,_n("Linear"),0) == 0)
      iMethod = DU_REFID_LINEAR;
   else if (iStrcmp_STR(sMethod,_n("Akima"),0) == 0)
      iMethod = DU_REFID_AKIMA;
   else 
      iMethod = DU_REFID_MINCUR;


   // --- Does the Input Channel Exist ? ---

   if (!iExistSymb_DB(Data,sInCh,DB_SYMB_CHAN))
      Abort_SYS(_("Input channel does not exist."));
   InCh = FindSymb_DB(Data,sInCh,DB_SYMB_CHAN);
   LockSymb_DB(Data,InCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);


   // --- Provide the new database name ---

   if (iExistString_SYS("CREATE","NAME"))
      GetString_SYS("CREATE","NAME",sSpcDBName);
   else
   {
      GetName_DB(Data,DB_NAME_FILE,sDBName);
      FileNamePart_STR (sDBName,sSpcDBName,STR_FILE_PART_NAME);
      FileNamePart_STR (sDBName,sExt,STR_FILE_PART_EXTENSION);
      Strcat_STR(sSpcDBName,"_spc.");
      Strcat_STR(sSpcDBName,sExt);
      SetString_SYS("CREATE","NAME",sSpcDBName);
   }
   
   
   // --- Create the new database ---
   
   iRunGX_SYS("geogxnet.dll(Geosoft.GX.NewGDB.NewGDB;Run)");
   ESpcData = Current_EDB();
   SpcData = Lock_EDB(ESpcData);

   if (!iExistSymb_DB(SpcData,sOutCh,DB_SYMB_CHAN))
      CreateSymb_DB(SpcData,sOutCh,DB_SYMB_CHAN,DB_OWN_SHARED,DB_CATEGORY_CHAN_DOUBLE);
   OutCh = FindSymb_DB(SpcData,sOutCh,DB_SYMB_CHAN);
   LockSymb_DB(SpcData,OutCh,DB_LOCK_READWRITE,DB_WAIT_INFINITY);


   // --- get distance channel ---
 
   iDist = iExistSymb_DB(Data,"_Distance",DB_SYMB_CHAN);

   iXYChLocked=0;
   if (!iDist) {

      XCh = GetXYZChanSymb_DB(Data, DB_CHAN_X);
      YCh = GetXYZChanSymb_DB(Data, DB_CHAN_Y);
      if (XCh==NULLSYMB || YCh==NULLSYMB)
         Abort_SYS(_("Current X and Y channels are required for distance calculation."));
      LockSymb_DB(Data,XCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      LockSymb_DB(Data,YCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      iXYChLocked=1;

      CreateSymb_DB(Data,"_Distance",DB_SYMB_CHAN,DB_OWN_SHARED,DB_CATEGORY_CHAN_DOUBLE);
   }
   DisCh = FindSymb_DB(Data,"_Distance",DB_SYMB_CHAN);
   LockSymb_DB(Data,DisCh,DB_LOCK_READWRITE,DB_WAIT_INFINITY);

   // --- get fiducial channel ---

   Strcpy_STR(sFid,sInCh);
   Strcat_STR(sFid,"_fid");
	GenValidChanSymb_DB(sFid, sFid, sizeof(sFid));
   if (!iExistSymb_DB(Data,sFid,DB_SYMB_CHAN))
      CreateSymb_DB(Data,sFid,DB_SYMB_CHAN,DB_OWN_SHARED,DB_CATEGORY_CHAN_DOUBLE);
   FidCh = FindSymb_DB(Data,sFid,DB_SYMB_CHAN);
   LockSymb_DB(Data,FidCh,DB_LOCK_READWRITE,DB_WAIT_INFINITY);

   // --- get resample channel ---

   Strcpy_STR(sRes,sInCh);
   Strcat_STR(sRes,"_Res");
	GenValidChanSymb_DB(sRes, sRes, sizeof(sRes));
   if (!iExistSymb_DB(Data,sRes,DB_SYMB_CHAN))
      CreateSymb_DB(Data,sRes,DB_SYMB_CHAN,DB_OWN_SHARED,DB_CATEGORY_CHAN_DOUBLE);
   ResCh = FindSymb_DB(Data,sRes,DB_SYMB_CHAN);
   LockSymb_DB(Data,ResCh,DB_LOCK_READWRITE,DB_WAIT_INFINITY);


   // --- create input and output VV's ---

   hVVin   = Create_VV(REAL,0);
   hVVout = Create_VV(REAL,0);

   // --- Prepare to do the work ---

   iLine = 0;
   iTotLines = iCountSelLines_DB(Data);
   Progress_SYS(1);

   // --- Go through all selected Lines ---

   ProgName_SYS("",1);
   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {                                                 
      // --- Update the Progress Bar ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      GetSymbName_DB(Data,Line,sTemp);
      Strcpy_STR(sLabel,_("Calculating line: "));
      Strcat_STR(sLabel,sTemp);
      ProgName_SYS(sLabel,0);
      ProgUpdateL_SYS(iLine,iTotLines);

      // --- Duplicate lines from Data to SpcData Databases ---

      if (!iExistSymb_DB(SpcData,sTemp,DB_SYMB_LINE))
         SpcLine = DupSymbAcross_DB(Data,SpcData,Line);
      else
         SpcLine = FindSymb_DB(SpcData,sTemp,DB_SYMB_LINE);
      LockSymb_DB(SpcData,SpcLine,DB_LOCK_READONLY,DB_WAIT_INFINITY);


      // --- get input chan fid info ---

      rFidStart = rGetFidStart_DB(Data,Line,InCh);
      rFidIncr  = rGetFidIncr_DB(Data,Line,InCh);


      // --- Create distance channel ---

      if (!iDist || (iDist && iGetChannelLength_DB(Data,Line,DisCh)==0) ) {
         if(iXYChLocked==0)	{
            XCh = GetXYZChanSymb_DB(Data, DB_CHAN_X);
            YCh = GetXYZChanSymb_DB(Data, DB_CHAN_Y);
            if (XCh==NULLSYMB || YCh==NULLSYMB)
               Abort_SYS(_("Current X and Y channels are required for distance calculation."));
            LockSymb_DB(Data,XCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
            LockSymb_DB(Data,YCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
            iXYChLocked=1;
    	 }
         Distance_DU(Data,Line,XCh,YCh,DisCh);
      }   


      // --- Create fiducial channel ---

      MakeFid_DU(Data,Line,DisCh,FidCh);


      // --- Refid the data ---

      ReFid_DU(Data,Line, InCh,DisCh,ResCh,iMethod,rDUMMY,rSampIncr,rDUMMY);
      ReFid_DU(Data,Line,FidCh,DisCh,FidCh,iMethod,rDUMMY,rSampIncr,rDUMMY);


      // --- Get the current channel data into input VV ---

      GetChanVV_DB(Data,Line,ResCh,hVVin);

      // --- Set the length of output VV = length of input VV ---

      iVVlen = iLength_VV(hVVin);

      // --- if input VV is empty or all dummy, then don't do FFT process ---

      if (iVVlen)
         iDum = iFindDum_VV(hVVin,0,(iVVlen-1),1,0);

      if ((iVVlen) && (iDum != -1))
      {  
         rFinc   = rGetFidIncr_VV(hVVin);


         // --- Get FFT and calculate spectrum ---

         hFFT = Create_FFT(hVVin,rFinc,FFT_DETREND_ALL);
         Spectrum_FFT(hFFT,hVVout);         


         // --- Write the output VV back to database (SpcData)---

         PutChanVV_DB(SpcData,SpcLine,OutCh,hVVout);

         SetFid_DB(SpcData,SpcLine,OutCh,0.0,rWaveIncr_FFT(hFFT));


         // --- get rid of hFFT ---

         Destroy_FFT(hFFT);
      }

      // --- Advance to Next Line ---    

      UnLockSymb_DB(Data,Line);
      UnLockSymb_DB(SpcData,SpcLine);
      Line = NextSelLine_DB(Data, Line);
      iLine++;

   }


   // --- Add maker ---

   EasyMakerSymb_DB(SpcData,OutCh,_("Calculate FFT power spectrum & density"),"FFTPSPEC;FFTSAMP");


   // --- done ---

   Progress_SYS(0);
   
   Destroy_VV(hVVin);
   Destroy_VV(hVVout);
   DeleteSymb_DB(Data,FidCh);
   DeleteSymb_DB(Data,ResCh);
   

   // --- Unlock the channel symbol ---

   UnLockSymb_DB(Data,InCh);
   if (iXYChLocked==1) {
      UnLockSymb_DB(Data,XCh);
      UnLockSymb_DB(Data,YCh);
   }
   UnLockSymb_DB(Data,DisCh);
   UnLockSymb_DB(SpcData,OutCh);

   UnLock_EDB(EData);
   UnLock_EDB(ESpcData);
   
   if (iInteractive_SYS())
   {
      DelLine0_EDB(ESpcData);
      LoadChan_EDB(ESpcData,sOutCh);
   }
}
