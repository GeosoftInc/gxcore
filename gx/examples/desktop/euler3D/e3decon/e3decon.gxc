//===========================================================================
NAME          = "Standard Euler Deconvolution"
#include <version.gxh>

TRANSLATIONDOMAIN = "euler"
TRANSLATIONFRIENDLYPATH = "GX/Euler3D"
DESCRIPTION   = "\
Potential field interpretation using Euler deconvolution.

Parameters:

      E3DECON.GRID     Input Grid (T ) file name.
      EULER3D.DX       Input X-Derivative Grid (Tx) file name.
      EULER3D.DY       Input Y-Derivative Grid (Ty) file name.
      EULER3D.DZ       Input Z-Derivative Grid (Tz) file name.
      EULER3D.SOLDB    Output Database (Solution) file name.
      EULER3D.SOLGRP   Output solution group name.
      EULER3D.WNDSIZ   Window size (from 3 - 20 inclusive)   (default=10)
      EULER3D.GI       Geometric index, from 0.0 to 3.0      (default=1.0)
      EULER3D.TOLRNC   Max tolerance to allow (percentage)   (default=15.0)
      EULER3D.MAXDIS   Max dist. acceptable (0 for infinite) (default=0.0)
      EULER3D.OBSHGHT  Height of observation plane           (default=0.0)
      EULER3D.OBSELEV  Elevation of observation plane       
"
// Revision History
// v5.1.8  Modified not to clip off the negative depth solution, now keep them all.
// v5.1.5  Euler3D upgrade.
//===========================================================================

RESOURCE = "E3DECON.gr"
#include "E3DECON.grh"

//===========================================================================

#include <all.gxh>


#define  SETREAL(A, B, C)        \
   A = rGetReal_SYS("EULER3D",B); \
   if(A==rDUMMY) A = C;

#define  SETINT(A, B, C)        \
   A = iGetInt_SYS("EULER3D",B); \
   if(A==iDUMMY) A = C;

#define GETCHAN(A, B, C, D, E, F)   \
   A = FindChan_DB(Data, B);        \
   if(A==NULLSYMB) {               \
      A=CreateSymb_DB(Data, B, DB_SYMB_CHAN,DB_OWN_SHARED, C); \
      LockSymb_DB(Data,A,DB_LOCK_READWRITE,DB_WAIT_NONE);      \
      SetChanFormat_DB(Data,A,DB_CHAN_FORMAT_NORMAL);          \
      SetChanWidth_DB(Data,A,D);       \
      SetChanDecimal_DB(Data,A,E);     \
      SetChanProtect_DB(Data,A,F); \
      Associate_DB(Data, Solutions, A);  \
   } else  \
      LockSymb_DB(Data,A,DB_LOCK_READWRITE,DB_WAIT_NONE);      \

#define DO_EXPRESSION(A, B)   \
   iProtected = iGetChanProtect_DB(Data, A);        \
   SetChanProtect_DB(Data, A, DB_CHAN_UNPROTECTED);\
   Math_DU(Data,Solutions,B);               \
   SetChanProtect_DB(Data, A, iProtected);

#define SET_IPJ(A,B,C,D)                            \
   iProtected = iGetChanProtect_DB(A,B);            \
   iProtected = iGetChanProtect_DB(A,C);            \
   SetIPJ_DB(A,B,C,D);                              \
   SetChanProtect_DB(A,B,iProtected);               \
   SetChanProtect_DB(A,C,iProtected);
   
#define SET_UNITS(A,B,C)                            \
   iProtected = iGetChanProtect_DB(A,B);            \
   SetChanUnit_DB(A,B,C);                           \
   SetChanProtect_DB(A,B,iProtected);
   
//===========================================================================
//                             GLOBAL VARIABLES
//===========================================================================

DGW         Diag;              // Dialogue handle

EDB         EData;                          // output solution database Edited
DB          Data;                           // output solution database
DB_SYMB     Solutions;                      // the output solution group.

LST         List;
IMG         ImgT,ImgTX,ImgTY,ImgTZ;         
EUL3        EUL3G;                          
VV          SOLN_VV;                        
DB_SYMB     XWndCh,YWndCh,XEulCh,YEulCh,ZEulCh,BgCh,ZErCh,XYErCh;
DB_SYMB     XOffCh,YOffCh,MaskCh,WndSzCh; // channel handles
EXP         XOff_Exp,YOff_Exp,Mask_Exp;         // math expressions
IPJ         hIPJ;

int         i, iProtected;
int         iWndSz,iObsFlg;     
int         iChans, iLines, iBlobs;     
real        rGI,rTolrnc,rMaxDis,rObsHght,rObsElev; // user set parameters
real        rCellSize,rF;

string(STR_DB_SYMBOL) sSolutions; 
string(DB_GROUP_CLASS_SIZE) sClass;
string(STR_DB_SYMBOL) sXEulCh,sYEulCh,sZEulCh,sBgCh,sZerCh,sXYerCh;
string(STR_DB_SYMBOL) sWndSzCh,sMaskCh,sXWndCh,sYWndCh,sXOffCh,sYOffCh;

string(STR_FILE) sGrdT,sDx,sDy,sDz;     // Name of input grids 
string(STR_FILE) sSolDB;                // Name of output database
string(STR_DEFAULT_LONG) sExp;
string(STR_DEFAULT)      sUnits;


//===========================================================================
//                            GRID UTIL CODE
//===========================================================================

{
   // --- Set output solution group class name ---

   Strcpy_STR(sClass, _n("Targets"));


   // --- Set output channel names ---

   Strcpy_STR(sXEulCh, _n("X_Euler"));
   Strcpy_STR(sYEulCh, _n("Y_Euler"));
   Strcpy_STR(sZEulCh, _n("Depth"));
   Strcpy_STR(sWndSzCh,_n("WndSize"));
   Strcpy_STR(sBgCh,   _n("Backgrnd"));
   Strcpy_STR(sZerCh,  _n("dZ"));
   Strcpy_STR(sXYerCh, _n("dXY"));
   Strcpy_STR(sXWndCh, _n("X"));
   Strcpy_STR(sYWndCh, _n("Y"));
   Strcpy_STR(sXOffCh, _n("X_Offset"));
   Strcpy_STR(sYOffCh, _n("Y_Offset"));
   Strcpy_STR(sMaskCh, _n("Mask"));


   if (iInteractive_SYS())
   {

      // --- Create the Dialogue ---

      Diag = Create_DGW("E3DECON");
   

      // --- Create the group list from the current database ---

      if(iHaveCurrent_EDB()) {
         EData = Current_EDB();
         Data = Lock_EDB(EData);
      
         List = GetList_DGW(Diag,_E3DECON_5);
         ClassGroupLST_DB (Data, List, sClass);

         UnLock_EDB(EData);
      }


      // --- Set any Defaults from INI ---

      SetInfoSYS_DGW(Diag,_E3DECON_0, DGW_FILEPATH,"E3DECON","GRID");
      SetInfoSYS_DGW(Diag,_E3DECON_1, DGW_FILEPATH,"EULER3D","DX");
      SetInfoSYS_DGW(Diag,_E3DECON_2, DGW_FILEPATH,"EULER3D","DY");
      SetInfoSYS_DGW(Diag,_E3DECON_3, DGW_FILEPATH,"EULER3D","DZ");
      SetInfoSYS_DGW(Diag,_E3DECON_4, DGW_FILEPATH,"EULER3D","SOLDB");     
      SetInfoSYS_DGW(Diag,_E3DECON_5, DGW_TEXT,    "EULER3D","SOLGRP");     
      SetInfoSYS_DGW(Diag,_E3DECON_6, DGW_TEXT,    "EULER3D","GI"); 
      SetInfoSYS_DGW(Diag,_E3DECON_7, DGW_TEXT,    "EULER3D","TOLRNC"); 
      SetInfoSYS_DGW(Diag,_E3DECON_8, DGW_TEXT,    "EULER3D","WNDSIZ"); 
      SetInfoSYS_DGW(Diag,_E3DECON_9, DGW_TEXT,    "EULER3D","MAXDIS"); 
      SetInfoSYS_DGW(Diag,_E3DECON_10,DGW_TEXT,    "EULER3D","OBSHGHT"); 
      SetInfoSYS_DGW(Diag,_E3DECON_11,DGW_TEXT,    "EULER3D","OBSELEV"); 


      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i != 0) Cancel_SYS();


      // --- Get the Strings and replace in INI ---

      GetInfoSYS_DGW(Diag,_E3DECON_0, DGW_FILEPATH,"E3DECON","GRID");
      GetInfoSYS_DGW(Diag,_E3DECON_1, DGW_FILEPATH,"EULER3D","DX");
      GetInfoSYS_DGW(Diag,_E3DECON_2, DGW_FILEPATH,"EULER3D","DY");
      GetInfoSYS_DGW(Diag,_E3DECON_3, DGW_FILEPATH,"EULER3D","DZ");
      GetInfoSYS_DGW(Diag,_E3DECON_4, DGW_FILEPATH,"EULER3D","SOLDB");     
      GetInfoSYS_DGW(Diag,_E3DECON_5, DGW_TEXT,    "EULER3D","SOLGRP");     
      GetInfoSYS_DGW(Diag,_E3DECON_6, DGW_TEXT,    "EULER3D","GI"); 
      GetInfoSYS_DGW(Diag,_E3DECON_7, DGW_TEXT,    "EULER3D","TOLRNC"); 
      GetInfoSYS_DGW(Diag,_E3DECON_8, DGW_TEXT,    "EULER3D","WNDSIZ"); 
      GetInfoSYS_DGW(Diag,_E3DECON_9, DGW_TEXT,    "EULER3D","MAXDIS"); 
      GetInfoSYS_DGW(Diag,_E3DECON_10,DGW_TEXT,    "EULER3D","OBSHGHT"); 
      GetInfoSYS_DGW(Diag,_E3DECON_11,DGW_TEXT,    "EULER3D","OBSELEV"); 

      // --- Destroy the Dialogue ---

      Destroy_DGW(Diag);
   }

   // --- Get Parameters ---

   GetString_SYS("E3DECON","GRID", sGrdT);
   GetString_SYS("EULER3D","DX",sDx);
   GetString_SYS("EULER3D","DY",sDy);
   GetString_SYS("EULER3D","DZ",sDz);
   GetString_SYS("EULER3D","SOLDB", sSolDB);
   GetString_SYS("EULER3D","SOLGRP", sSolutions);


   // --- Check for null input and output file name strings ---

   if (!iStrlen_STR(sGrdT))
      Abort_SYS(_("Input grid not specified!"));
   if (!iStrlen_STR(sDx))
      Abort_SYS(_("Input Dx grid not specified!"));
   if (!iStrlen_STR(sDy))
      Abort_SYS(_("Input Dy grid not specified!"));
   if (!iStrlen_STR(sDz))
      Abort_SYS(_("Input Dz grid not specified!"));

   if (!iStrlen_STR(sSolDB))
      Abort_SYS(_("Output database not specified!"));

   if (!iStrlen_STR(sSolutions))
      Abort_SYS(_("Output solution group not specified!"));


   // --- Check for null parameter strings and set to default values if blank

   SETREAL(rGI,      "GI",      1.0)
   SETREAL(rTolrnc,  "TOLRNC", 15.0)
   SETREAL(rMaxDis,  "MAXDIS",  0.0)
   SETREAL(rObsHght, "OBSHGHT", 0.0)
   SETINT(iWndSz,    "WNDSIZ",  10)

   rObsElev = rGetReal_SYS("EULER3D","OBSELEV");
   iObsFlg = 1;
   if(rObsElev==rDUMMY) iObsFlg = 0;

   // --- If using elevation, change the channel name ---

   if(iObsFlg)
      Strcpy_STR(sZEulCh, _n("Elevation"));


   // --- Check the parameters ---

   if ((rGI < 0.0))
      Abort_SYS(_("Invalid geometric index! Must be a real number greater than 0.0."));

   if (rTolrnc < 0.0)
      rTolrnc = 0.0;

   if (iWndSz < 3 || iWndSz > 20)
      Abort_SYS(_("Invalid window size! It must be at least 3 and no more than 20."));

   if (rMaxDis < 0.0)
      rMaxDis = 0.0;


   // --- Start Progress ---

   Progress_SYS(1);
   ProgName_SYS(_("Euler Deconvolution for Depth"),1);


   // --- Create IMGs for input grids ---
   
   ImgT  = CreateFile_IMG(GS_FLOAT,sGrdT, IMG_FILE_READONLY); 
   ImgTX = CreateFile_IMG(GS_FLOAT,sDx,IMG_FILE_READONLY); 
   ImgTY = CreateFile_IMG(GS_FLOAT,sDy,IMG_FILE_READONLY); 
   ImgTZ = CreateFile_IMG(GS_FLOAT,sDz,IMG_FILE_READONLY); 
   

   // --- Create Solution Database if it doesn't exist ---

   if(!iFileExist_SYS(sSolDB)) {
      iLines = 20;
      iChans = 20;
      iBlobs = iLines + iChans + 20;
      Create_DB(sSolDB,iLines,iChans,iBlobs,20,10,"super","");
   }

   EData = Load_EDB(sSolDB);
   Data = Lock_EDB(EData);


   // --- Create EUL3 object ---

   EUL3G = Creat_EUL3(ImgT,ImgTX,ImgTY,ImgTZ,
                      iWndSz,rGI,rTolrnc,rMaxDis,iObsFlg,rObsHght,rObsElev);


   // --- Create a group line to store the solutions in. Make it a different
   //     class than the located Euler solutions ---

   Solutions = FindSymb_DB(Data,sSolutions,DB_SYMB_LINE);
   if(Solutions != NULLSYMB) {
      LockSymb_DB(Data,Solutions,DB_LOCK_READWRITE,DB_WAIT_NONE);
      DeleteSymb_DB(Data, Solutions);
   }
   Solutions=CreateSymb_DB(Data,sSolutions,DB_SYMB_LINE,DB_OWN_SHARED,DB_CATEGORY_LINE_GROUP);
   
   LockSymb_DB(Data,Solutions,DB_LOCK_READWRITE,DB_WAIT_NONE);
   SetGroupClass_DB(Data, Solutions, sClass);
   UnLockSymb_DB(Data,Solutions);


   // --- Create the window center x, y channels ---

   GETCHAN(XWndCh, sXWndCh, DB_CATEGORY_CHAN_DOUBLE, 10, 2, DB_CHAN_PROTECTED)
   GETCHAN(YWndCh, sYWndCh, DB_CATEGORY_CHAN_DOUBLE, 10, 2, DB_CHAN_PROTECTED)


   // --- Create the solution x, y position channels ---
   
   GETCHAN(XEulCh, sXEulCh, DB_CATEGORY_CHAN_DOUBLE, 10, 2, DB_CHAN_PROTECTED)
   GETCHAN(YEulCh, sYEulCh, DB_CATEGORY_CHAN_DOUBLE, 10, 2, DB_CHAN_PROTECTED)
   GETCHAN(ZEulCh, sZEulCh, DB_CATEGORY_CHAN_DOUBLE, 10, 2, DB_CHAN_PROTECTED)


   // --- Create the solution background level channel ---

   GETCHAN(BgCh, sBgCh, DB_CATEGORY_CHAN_DOUBLE,  9, 2, DB_CHAN_PROTECTED)
   

   // --- Create the window size channel ---

   GETCHAN(WndSzCh, sWndSzCh, DB_CATEGORY_CHAN_DOUBLE,  8, 2, DB_CHAN_PROTECTED)


   // --- Create the depth error channel ---

   GETCHAN(ZErCh, sZerCh, DB_CATEGORY_CHAN_DOUBLE,  6, 2, DB_CHAN_PROTECTED)
   

   // --- Create the location error channel ---

   GETCHAN(XYErCh, sXYerCh, DB_CATEGORY_CHAN_DOUBLE,  6, 2, DB_CHAN_PROTECTED)
  

   // --- Create a VV to hold solutions from EUL3 ---

   SOLN_VV=Create_VV(REAL,0);

   // --- Read solutions into database ---

   GetResult_EUL3(EUL3G,SOLN_VV,EUL3_RESULT_X);
   PutChanVV_DB(Data,Solutions,XEulCh,SOLN_VV);
   
   GetResult_EUL3(EUL3G,SOLN_VV,EUL3_RESULT_Y);
   PutChanVV_DB(Data,Solutions,YEulCh,SOLN_VV);
  
   GetResult_EUL3(EUL3G,SOLN_VV,EUL3_RESULT_DEPTH);
   //if(iObsFlg==0)   Clip_VVU(SOLN_VV,0.0,rDUMMY,VVU_CLIP_LIMIT);  // Clip the negative results
   PutChanVV_DB(Data,Solutions,ZEulCh,SOLN_VV);
  
   GetResult_EUL3(EUL3G,SOLN_VV,EUL3_RESULT_BACKGROUND);
   PutChanVV_DB(Data,Solutions,BgCh,SOLN_VV);
   
   GetResult_EUL3(EUL3G,SOLN_VV,EUL3_RESULT_DEPTHERROR);
   PutChanVV_DB(Data,Solutions,ZErCh,SOLN_VV);
   
   GetResult_EUL3(EUL3G,SOLN_VV,EUL3_RESULT_LOCATIONERROR);
   PutChanVV_DB(Data,Solutions,XYErCh,SOLN_VV);
   
   GetResult_EUL3(EUL3G,SOLN_VV,EUL3_RESULT_WINDOWX);
   PutChanVV_DB(Data,Solutions,XWndCh,SOLN_VV);
   
   GetResult_EUL3(EUL3G,SOLN_VV,EUL3_RESULT_WINDOWY);
   PutChanVV_DB(Data,Solutions,YWndCh,SOLN_VV);


   // --- Write the window size ---

   rCellSize = rQuery_IMG(ImgT, IMG_QUERY_rDX);
   SetRealN_VV(SOLN_VV, 0, -1, (real)iWndSz*rCellSize);
   PutChanVV_DB(Data,Solutions,WndSzCh,SOLN_VV);


   // --- Copy projection and units to output gdb ---
   
   hIPJ = Create_IPJ();
   GetIPJ_IMG(ImgT, hIPJ);
   GetUnits_IPJ(hIPJ, rF, sUnits);
   
   SET_IPJ(Data,XEulCh,YEulCh,hIPJ)
   SET_IPJ(Data,XWndCh,YWndCh,hIPJ)

   SET_UNITS(Data,XEulCh,sUnits)
   SET_UNITS(Data,YEulCh,sUnits)
   SET_UNITS(Data,ZEulCh,sUnits)
   SET_UNITS(Data,XWndCh,sUnits)
   SET_UNITS(Data,YWndCh,sUnits)
   SET_UNITS(Data,WndSzCh,sUnits)
   SET_UNITS(Data,ZErCh,"%")
   SET_UNITS(Data,XYErCh,"%")


   // --- Unlock ---

   UnLockSymb_DB(Data,XEulCh);
   UnLockSymb_DB(Data,YEulCh);
   UnLockSymb_DB(Data,ZEulCh);
   
   UnLockSymb_DB(Data,BgCh);
   UnLockSymb_DB(Data,ZErCh);
   UnLockSymb_DB(Data,XYErCh);
   UnLockSymb_DB(Data,XWndCh);
   UnLockSymb_DB(Data,YWndCh);
   UnLockSymb_DB(Data,WndSzCh);



   // --- Destroy objects ---

   Destr_EUL3(EUL3G);
   Destroy_VV(SOLN_VV);
   Destroy_IMG(ImgT);       
   Destroy_IMG(ImgTX);       
   Destroy_IMG(ImgTY);       
   Destroy_IMG(ImgTZ);       
   Destroy_IPJ(hIPJ);       
                

   // CREATE NEW CHANNELS FOR USE IN E3WINDOW.GX:
   
   // --- Create the x and y-offset channel ---

   GETCHAN(XOffCh, sXOffCh, DB_CATEGORY_CHAN_DOUBLE,  10, 2, DB_CHAN_UNPROTECTED)
   GETCHAN(YOffCh, sYOffCh, DB_CATEGORY_CHAN_DOUBLE,  10, 2, DB_CHAN_UNPROTECTED)

   SET_UNITS(Data,XOffCh,sUnits)
   SET_UNITS(Data,YOffCh,sUnits)


   // --- Create the mask channel ---

   GETCHAN(MaskCh, _n("Mask"), DB_CATEGORY_CHAN_LONG,  5, 0, DB_CHAN_UNPROTECTED)
   SetRegSymbSetting_DB(Data, MaskCh, "CLASS", "Mask");
   

   // --- Create expressions to calculate new channel values ---

   Strcpy_STR(sExp, sXOffCh);
   Strcat_STR(sExp, "=");
   Strcat_STR(sExp, sXEulCh);
   Strcat_STR(sExp, "-");
   Strcat_STR(sExp, sXWndCh);
   Strcat_STR(sExp, ";");
   XOff_Exp=Create_EXP(Data,sExp,50);

   Strcpy_STR(sExp, sYOffCh);
   Strcat_STR(sExp, "=");
   Strcat_STR(sExp, sYEulCh);
   Strcat_STR(sExp, "-");
   Strcat_STR(sExp, sYWndCh);
   Strcat_STR(sExp, ";");
   YOff_Exp=Create_EXP(Data,sExp,50);

   Strcpy_STR(sExp, sMaskCh);
   Strcat_STR(sExp, "=");
   Strcat_STR(sExp, sXEulCh);
   Strcat_STR(sExp, "-");
   Strcat_STR(sExp, sXEulCh);
   Strcat_STR(sExp, "+1;");
   Mask_Exp=Create_EXP(Data,sExp,50);


   // --- Apply formulas to set values in new channels ---

   DO_EXPRESSION(XOffCh, XOff_Exp)
   DO_EXPRESSION(YOffCh, YOff_Exp)
   DO_EXPRESSION(MaskCh, Mask_Exp)


   // --- Destroy expressions ---

   Destroy_EXP(XOff_Exp);
   Destroy_EXP(YOff_Exp);
   Destroy_EXP(Mask_Exp);


   // --- Unlock ---

   UnLockSymb_DB(Data,XOffCh);
   UnLockSymb_DB(Data,YOffCh);
   UnLockSymb_DB(Data,MaskCh);

   
   // --- Load the channels ---

   AddAssociatedLoad_DB(Data, Solutions, XEulCh);     
   AddAssociatedLoad_DB(Data, Solutions, YEulCh);     
   AddAssociatedLoad_DB(Data, Solutions, ZEulCh);     
   AddAssociatedLoad_DB(Data, Solutions, BgCh);    
   AddAssociatedLoad_DB(Data, Solutions, WndSzCh); 
   AddAssociatedLoad_DB(Data, Solutions, ZErCh);   
   AddAssociatedLoad_DB(Data, Solutions, XYErCh);  
   AddAssociatedLoad_DB(Data, Solutions, MaskCh);  
   AddAssociatedLoad_DB(Data, Solutions, XWndCh);  
   AddAssociatedLoad_DB(Data, Solutions, YWndCh);  
   AddAssociatedLoad_DB(Data, Solutions, XOffCh);  
   AddAssociatedLoad_DB(Data, Solutions, YOffCh);  


   // --- Update the activity log ---

   AddTimeComment_DB(Data, _n("E3DECON GX (Euler deconvolution)"), FALSE);
   AddComment_DB(Data, "Solution list", sSolutions, TRUE);
   AddRealComment_DB(Data, _n("Structural Index"), rGI, TRUE);
   AddComment_DB(Data, "Size channel", sWndSzCh, TRUE);
   AddComment_DB(Data, "Depth channel", sZEulCh, TRUE);
   AddComment_DB(Data, "Location error channel", sXYerCh, TRUE);
   AddComment_DB(Data, "Depth error channel", sZerCh, TRUE);
   AddComment_DB(Data, "X channel", sXWndCh, TRUE);
   AddComment_DB(Data, "Y channel", sYWndCh, TRUE);
   AddComment_DB(Data, "X_Euler channel",  sXEulCh, TRUE);
   AddComment_DB(Data, "Y_Euler channel",  sYEulCh, TRUE);
   AddComment_DB(Data, "X_Offset channel", sXOffCh, TRUE);
   AddComment_DB(Data, "Y_Offset channel", sYOffCh, TRUE);


   // --- Make X_Euler and Y_Euler the current X, Y channels ---

   SetXYZChan_DB(Data, DB_CHAN_X, sXEulCh);
   SetXYZChan_DB(Data, DB_CHAN_Y, sYEulCh);


   // --- Release the database ---

   UnLock_EDB(EData);

   
   // --- Delete empty line 0 ---
   
   DelLine0_EDB(EData);


   // --- go to the solutions line ---

   SetCurLine_EDB(EData, sSolutions);


   // --- Done ---

   Progress_SYS(0);

}
