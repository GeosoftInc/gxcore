//===========================================================================
NAME          = "Drill Hole - Export to a new Drill Project."
#include <version.gxh>

TRANSLATIONDOMAIN = "drillhole"
TRANSLATIONFRIENDLYPATH = "GX/DH-Data"

DESCRIPTION   = "

   Export a Drill Hole project to a new Drill Hole project.
	
   DHSUBSETPROJ.NAME      Name of the new project.
               .SELECTED  SELECTED, ALL or LIST
               .LIST      CSV separated hole list, used with
                          the \"LIST\" option of DHSUBSETPROJ.SELECTED 
   DH.PROJECT_DIR         Directory for the new project.                     

"
// Revision History:
// v6.4.2: QA 10978 Fixed selection bug (was overwriting, not appending).
// v6.0.1: New GX
//===========================================================================

RESOURCE = "dhsubsetproj.gr"
#include "dhsubsetproj.grh"


//===========================================================================

#include <all.gxh>

//===========================================================================
//                             GLOBAL VARIABLES
//===========================================================================

EDB         EData;         // database handle
DH          Drill;
DB          Data, hCollarDB;
DGW         Diag;          // dialogue box
LST         DeleteLST, HoleLST, SelectedLST;
VV          VVdb, VVdb2, VVdb3, SelectVV;

string(STR_DEFAULT_SHORT) sSelected, sHole;
string(STR_FILE) sMasterDB, sGDB, sNewGDB, sProject, sNewProject, sDir, sOrigDir, sName, sVol, sNewDir;
string(STR_FILE) sCollarDB, sNewName, sPart;
string(STR_DH_HOLES) sHoles;
string(2048) sMsg;

int i, iNDB, iN, iNDelete, iP, iRet, iItem, iNLines, iInteractive, iRefreshSelection, iSelect;


//===========================================================================
//                              CODE
//===========================================================================

{

   // --- Get current database and open Drill project. ---

   EData = Current_EDB();
   GetName_EDB(EData, sMasterDB);
   Drill = Create_DH(sMasterDB);
   GetProjectName_DH(Drill, sProject);
   
   
   // --- Get the full collar table name, and from it the volume and directory ---
   
   hCollarDB = hCollarDB_DH(Drill);
   GetName_DB(hCollarDB, DB_NAME_FILE, sCollarDB);
   AbsoluteFileName_SYS(sCollarDB, sCollarDB);
   
   FileNamePart_STR(sCollarDB, sVol, STR_FILE_PART_VOLUME);
   FileNamePart_STR(sCollarDB, sDir, STR_FILE_PART_DIRECTORY);
   FileCombineParts_STR(sVol, sDir, "", "", "", sOrigDir);
   
   
   // --- Get the current hole selection (to reset at the end) ---
   
   SelectedLST = Create_LST(2*STR_DB_SYMBOL);
   HoleLST_DH(Drill, SelectedLST);


   // --- Get the project databases ---
   
   VVdb = Create_VV(-STR_FILE, 0);
   GetDatabasesVV_DH(Drill, VVdb);   
   
   Destroy_DH(Drill);      
   
   
   // --- Get the current project database directory ---

   GetString_SYS("DH", "PROJECT_DIR", sDir);
   if(!iStrlen_STR(sDir) || !iDirExist_SYS(sDir))
      GetDirectory_SYS(SYS_DIR_LOCAL, sDir);    // default to workspace directory


   // --- Reset project directory ---

   SetString_SYS("DH", "PROJECT_DIR", sDir);

   iInteractive = iInteractive_SYS();
   if(iInteractive) {

      iRet = 0;
      while(1) {


         if(iRet==0) {


            // --- Create the Dialogue ---

            Diag = Create_DGW("DHSUBSETPROJ");

            while (1) {
      
      
               // --- Set any Defaults ---
                                  
               SetInfoSYS_DGW(Diag,_DHSUBSETPROJ_0,DGW_TEXT,"DHSUBSETPROJ","NAME");
               SetInfo_DGW(Diag,_DHSUBSETPROJ_1,DGW_TEXT,sDir);
               SetInfoSYS_DGW(Diag,_DHSUBSETPROJ_2,DGW_LISTALIAS,"DHSUBSETPROJ","SELECTED");


               // --- Run the Dialogue ---

               iRet = iRunDialogue_DGW(Diag);
               if (iRet == -1) Cancel_SYS();    // He hit cancel


               // --- Get the Strings ---

               GetInfoSYS_DGW(Diag,_DHSUBSETPROJ_0,DGW_TEXT,"DHSUBSETPROJ","NAME");
               GetInfoSYS_DGW(Diag,_DHSUBSETPROJ_2,DGW_LISTALIAS,"DHSUBSETPROJ","SELECTED");


               // --- Go directly for new directory? ---

               if(iRet==1) break;


               // --- does database exist? ---
         
               GetString_SYS("DHSUBSETPROJ","NAME",sName);
               TrimSpace_STR(sName, STR_TRIMBOTH);

               if(!iStrlen_STR(sName)) {
                  DisplayMessage_SYS(_("Project Name"), _("You must enter a valid project name"));
                  continue;
               }

               
               // --- New project name cannot be the same as the current project name if
               //     the output directory is the same as well ---
               
               GetString_SYS("DHSUBSETPROJ","NAME",sNewProject);
               if(iStrcmp_STR(sProject, sNewProject, STR_CASE_TOLERANT)==0 &&
                  iStrcmp_STR(sOrigDir, sDir, STR_CASE_TOLERANT)==0) {
                  
                  Strcpy_STR(sMsg, _("In order to use the same project name on export,\r\nyou must specify a different output directory."));
                  
                  DisplayMessage_SYS(_("Project Name"), sMsg);
                  continue;
               }


               // --- Project names cannot have underscores ---

               if(iStriMask_STR("*_*", sName)) {
                  DisplayMessage_SYS(_("Project Name"), _("The project name cannot contain underscore '_' characters."));
                  SetString_SYS("DHSUBSETPROJ","NAME","");
                  continue;
               }
               
               break;
               
            }  // ! end while(1)          

            // --- Destroy the Dialogue ---

            Destroy_DGW(Diag);

            if(iRet==0) break;

         }  // end if(iRet=0)
         
         else if(iRet==1) {
               
            // --- Get the new directory to look in ---

            if(!iBrowseDir_GUI(_("Select directory for new drill project"), sDir, sNewDir)) {


               // --- If the directory does not exist, create it ---
               
               if(!iDirExist_SYS(sNewDir)) 
               {
                  if(iMakeDir_SYS(sNewDir)) {
                     Printf_STR(sMsg, sizeof(sMsg), _("Unable to create the new project directory %s."), sNewDir);
                     DisplayMessage_SYS(_("Project Directory"), sMsg);
                     
                     iRet = 0;
                     continue;
                  }
               }
               
               
               // --- Reset project directory ---

               Strcpy_STR(sDir, sNewDir);
               SetString_SYS("DH", "PROJECT_DIR", sNewDir);
            }
            iRet = 0;               
         }
      }  
   } 


	// --- Get parameters ---

   GetString_SYS("DH", "PROJECT_DIR", sDir);
   GetString_SYS("DHSUBSETPROJ","NAME",sNewProject);
	GetString_SYS("DHSUBSETPROJ","SELECTED",sSelected);


   // --- New project name cannot be the same as the current project name if
   //     the output directory is the same as well ---
   
   if(iStrcmp_STR(sProject, sNewProject, STR_CASE_TOLERANT)==0 &&
      iStrcmp_STR(sOrigDir, sDir, STR_CASE_TOLERANT)==0) {
      
      Abort_SYS(_("Cannot export to same project."));
   }

   Progress_SYS(1);
   
   
   // --- Create a VV with the new database names ---
   
   iNDB = iLength_VV(VVdb);
   VVdb2 = Create_VV(-STR_FILE, iNDB);
   VVdb3 = Create_VV(-STR_FILE, iNDB);    // DBs to delete before exporting
   
   iNDelete = 0;
	iP = iStrlen_STR(sProject);
   for(i=0;i<iNDB;i++) {
   
      GetString_VV(VVdb, i, sGDB);
      

      // --- Form the new database name ---
      
      FileNamePart_STR(sGDB, sName, STR_FILE_PART_NAME);

		iN = iStrlen_STR(sName);
		Substr_STR(sPart, sName, iP+1, iN-iP+1);
      
      Strcpy_STR(sNewName, sNewProject);
      Strcat_STR(sNewName, "_");
      Strcat_STR(sNewName, sPart);
      
      FileCombineParts_STR("", sDir, sNewName, "gdb", "", sNewGDB);

      SetString_VV(VVdb2, i, sNewGDB);
      
      if(iFileExist_SYS(sNewGDB)) {
         SetString_VV(VVdb3, iNDelete, sNewGDB);
         iNDelete++;         
      }   
   }
   
   
   if(iNDelete>0) {
   
      if(iInteractive) {
      
         Strcpy_STR(sMsg, _("The following databases will be deleted/overwritten:\r\n\r\n"));
         for(i=0;i<iNDelete;i++) {
            GetString_VV(VVdb3, i, sNewGDB);
            Strcat_STR(sMsg, sNewGDB);
            Strcat_STR(sMsg, "\r\n");
         }
         Strcat_STR(sMsg, _("\r\nDo you wish to continue?"));
         if(iDisplayQuestion_SYS(_("Export subset project"), sMsg)==0)
            Cancel_SYS();
      }
      
      for(i=0;i<iNDelete;i++) {      
         
         GetString_VV(VVdb3, i, sNewGDB);
         
         if(iLoaded_EDB(sNewGDB))
            UnLoad_EDB(sNewGDB);
         if(iDeleteFile_SYS(sNewGDB)) {
            Printf_STR(sMsg, sizeof(sMsg), _("Error deleting existing GDB %s."), sNewGDB);
            Abort_SYS(sMsg);
         }
      }
   }
                  
   
	// --- Make a LST to hold the names of holes to subset ---

   HoleLST = Create_LST(2*STR_DB_SYMBOL);


	// --- Make a VV for hole indices ---

	SelectVV = Create_VV(INT, 0);
   

	// --- Selection from the hole list ---
	
	if (iStrcmp_STR(sSelected,"LIST",STR_CASE_TOLERANT) == 0)
	{
		if(iInteractive)
		{
   
			// --- Do the channel selection by calling the CHCHANLST GX ---

			SetString_SYS("DHHOLELST","DATA",sSelected);
			SetString_SYS("DHHOLELST","GX","DHSUBSETPROJ");

			if(iRunGX_SYS("DHHOLELST.GX")) Cancel_SYS();
		}
		GetString_SYS("DHSUBSETPROJ", "LIST", sHoles);
      ConvertFromCSVString_LST(HoleLST, sHoles);
		if(iSize_LST(HoleLST)==0)
		   Abort_SYS(_("No holes have been selected for export."));
   }
   

   // --- Reopen Drill project ---

   Drill = Create_DH(sMasterDB);
	GetSelectedHolesVV_DH(Drill, SelectVV);

   
	// --- ALL holes and SELECTED holes ---

	iRefreshSelection = 0;
   if (iStrcmp_STR(sSelected,"ALL",STR_CASE_TOLERANT) == 0) 
	{
      SelectAllHoles_DH(Drill);
		iRefreshSelection = TRUE;
	}
	else if (iStrcmp_STR(sSelected,"LIST",STR_CASE_TOLERANT) == 0)
	{
      UnSelectAllHoles_DH(Drill);
      iN = iSize_LST(HoleLST);
      for(i=0;i<iN;i++) {
         GetItem_LST(HoleLST, 0, i, sHole);
         SelectName_DH(Drill, sHole, 1, 1);
      }  
		iRefreshSelection = TRUE;
	}
	else if (iStrcmp_STR(sSelected,"SELECTED",STR_CASE_TOLERANT) == 0)
	{
	   if(iNumSelectedHoles_DH(Drill)==0)
		   Abort_SYS(_("No holes have been selected for export."));
		HoleLST_DH(Drill, HoleLST);  // selected holes
	}

   Destroy_DH(Drill);
   
   
   // --- Call the DBSUBSET GX on all the databases to create the new
   //     project ---
   
   Strcpy_STR(sNewGDB, "");
   for(i=0;i<iNDB;i++)
   {   
      GetString_VV(VVdb, i, sGDB);
      

      // --- Does this database have any lines selected? ---
            
      EData = Load_EDB(sGDB);
      Data = Lock_EDB(EData);

      iNLines = iCountSelLines_DB(Data);      
      UnLock_EDB(EData);

      
      // --- Skip if no lines to export ---
      
      if(iNLines==0) continue;
      
      
      // --- Get the new database name ---
      
      GetString_VV(VVdb2, i, sNewGDB);
      
      
      // --- Run the subsetdb GX ---
      
      SetString_SYS("DBSUBSET","DIALOG","No");
      SetString_SYS("DBSUBSET","NAME",sNewGDB);
      SetString_SYS("DBSUBSET","MASK","");
      SetString_SYS("DBSUBSET","LINES","Selected");
      SetString_SYS("DBSUBSET","CHANNELS","All");
      SetInt_SYS("DBSUBSET","COMPRESSION",2);
      
      if(iRunGX_SYS("dbsubset.gx")!=0) Cancel_SYS();
      
      
      // --- Load the new database ---
      
      Load_EDB(sNewGDB);
   }
      

   if(!iStrlen_STR(sNewGDB))
      Abort_SYS(_("No new databases created."));
      
      
	// --- Refresh selection of the original project ---

	if(iRefreshSelection)
	{
	   Drill = Create_DH(sMasterDB);
		SetSelectedHolesVV_DH(Drill, SelectVV, 0);
		Destroy_DH(Drill);
	}


   // --- Open the new project ---
   
   SetString_SYS("DHOPENPRJ", "NAME", sNewProject);
	SetString_SYS("DH", "PROJECT_DIR", sDir);   
	
   SetInteractive_SYS(0);
   iRunGX_SYS("geogxnet.dll(Geosoft.GX.DrillHole.DHOpenPrj;Run)");
   SetInteractive_SYS(iInteractive);   
   Drill = Create_DH(sNewGDB);
   
   hCollarDB = hCollarDB_DH(Drill);
   GetName_DB(hCollarDB, DB_NAME_FILE, sCollarDB);
   
   
	// --- Remove any non-selected holes from the collar table ---
   
   if (iStrcmp_STR(sSelected,"ALL",STR_CASE_TOLERANT) != 0) 
	{
		// --- Create a LST of holes to delete ---
   
		DeleteLST = Create_LST(2*STR_DB_SYMBOL);
		HoleLST2_DH(Drill, DeleteLST);
      

		// --- Remove any items we want to retain (the export list) ---
         
		iN = iSize_LST(HoleLST);         
		for(i=0;i<iN;i++) {
			GetItem_LST(HoleLST, 0, i, sHole);
			iItem = iFindItem_LST(DeleteLST, 0, sHole);
			if(iItem!=-1)
				DelItem_LST(DeleteLST, iItem);
		}  
      
   
		// --- ...and delete them ---      

		DeleteHoles_DH(Drill, DeleteLST);
	}
	   
   
   // --- Get rid of unregistered holes that were copied over ---
   
   Clean_DH(Drill);

   
   // --- Select all the holes in the new project that were selected in the original project selection ---
   
   HoleLST2_DH(Drill, HoleLST);
   iN = iSize_LST(HoleLST);
   SetLen_VV(SelectVV, iN);
   iSelect = 0;
   for(i=0; i<iN; i++)
   {
      GetItem_LST(HoleLST, LST_ITEM_NAME, i, sHole);
      if (iFindItem_LST(SelectedLST, LST_ITEM_NAME, sHole) == -1)
         continue;
      SetInt_VV(SelectVV, iSelect, i);
      iSelect++;
   }
   SetLen_VV(SelectVV, iSelect);
   SetSelectedHolesVV_DH(Drill, SelectVV, 0);
   Destroy_DH(Drill);


   // --- Bring the collar table to the front ---
   
   Load_EDB(sCollarDB);

   Progress_SYS(0);
}
