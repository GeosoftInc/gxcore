//===========================================================================
NAME          = "DHLIMASK GX"
#include <version.gxh>

TRANSLATIONDOMAIN = "drillhole"
TRANSLATIONFRIENDLYPATH = "GX/DH-Plot"

DESCRIPTION   = "

   Window data from a rock code channel.
   Script Parameters:
      DHLIMASK.CHAN   Channel with rock codes
              .MASK   Mask channel
              .APPEND 0: Append selection to existing, 1: New selection
              .SELECT 0: All holes, 1: Selected holes.
              .CODES  Codes, comma separated list.
"
// Revision History:
// v7.0.0: QA 11876 Prevent usage with survey databases.
// v6.4.2: QA 11436 List not getting all values for ALL HOLES selection.
// v6.4.0: Added selection of multiple codes from a list.
// v5.1.3: New GX: Based on DHLIMASK
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "dhlimask.gr"
#include "dhlimask.grh"

//===========================================================================
//                                  INCLUDE
//===========================================================================

#include <all.gxh>     // system

//===========================================================================
//                                 VARIABLES
//===========================================================================

EDB         EData;
DB          Data;
DB_SYMB     Line;
DB_SYMB     LithCh,MaskCh;
LST         List, LineLST, ItemLST, SelLST;
DGW         Diag;
VV          MaskVV,LithVV;

DB_SELECT Select;

string(STR_DB_SYMBOL) sLithCh,sMaskCh,sLine;
string(STR_DEFAULT_LONG) sLabel;
string(1024) sTemp,sCode;
string(32768) sCodes;
string(STR_FILE) sName;

int         i, ii, iN;
int         iChType;
int         iTotLines;
int         iAppend, iSelect;

//===========================================================================
//                                   CODE
//===========================================================================

{

   // --- Get the database ---

   EData = Current_EDB();
   
   
	// --- Prevent usage with Survey databases ---
	
	GetName_EDB(EData, sName);	
	if(iStrStr_STR(sName, "_Survey", STR_CASE_TOLERANT)!= -1 ||
		iStrStr_STR(sName, "_ENSurvey", STR_CASE_TOLERANT)!= -1)
	{
		Abort_SYS(_("This method cannot be applied to survey databases."));
	}
   
	
   // --- Set default mask channel ---

   GetString_SYS("DHLIMASK","MASK",sMaskCh);
   if(!iStrlen_STR(sMaskCh)) {
      if (iGlobal_SYS("WHOLEPLOT.MASK",sMaskCh) == 0) {
         SetString_SYS("DHLIMASK","MASK",sMaskCh);
      }
   }


   // --- Lock the database ---
   
   Data = Lock_EDB(EData);

      
   // --- Are we running interactively ? ---

   if (iInteractive_SYS())
   {
      // --- Create the dialogue ---

      Diag = Create_DGW("DHLIMASK");

      // --- Set up channel list ---

      List = GetList_DGW(Diag,_DHLIMASK_0);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);

      // --- Set up mask channel list ---

      List = GetList_DGW(Diag,_DHLIMASK_1);
      MaskChanLST_DB(Data,List);
      i = iFindItem_LST(List, LST_ITEM_NAME, "None");
      if(i!=-1) DelItem_LST(List, i);
      Sort_LST(List,0,0);


      // --- Set any defaults ---

      SetInfoSYS_DGW(Diag,_DHLIMASK_0,DGW_TEXT,"DHLIMASK","CHAN");
      SetInfoSYS_DGW(Diag,_DHLIMASK_1,DGW_TEXT,"DHLIMASK","MASK");
      SetInfoSYS_DGW(Diag,_DHLIMASK_2,DGW_LISTALIAS,"DHLIMASK","APPEND");
      SetInfoSYS_DGW(Diag,_DHLIMASK_3,DGW_LISTALIAS,"DHLIMASK","SELECT");

      // --- Run the dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i == -1) Cancel_SYS();    // He hit cancel

      // --- Get the strings ---

      GetInfoSYS_DGW(Diag,_DHLIMASK_0,DGW_TEXT,"DHLIMASK","CHAN");
      GetInfoSYS_DGW(Diag,_DHLIMASK_1,DGW_TEXT,"DHLIMASK","MASK");
      GetInfoSYS_DGW(Diag,_DHLIMASK_2,DGW_LISTALIAS,"DHLIMASK","APPEND");
      GetInfoSYS_DGW(Diag,_DHLIMASK_3,DGW_LISTALIAS,"DHLIMASK","SELECT");

  
      // --- Destroy the dialogue ---

      Destroy_DGW(Diag);
  }


   // --- Get Parameters ---

   GetString_SYS("DHLIMASK","CHAN",sLithCh);
   GetString_SYS("DHLIMASK","MASK",sMaskCh);
   iAppend = iGetInt_SYS("DHLIMASK","APPEND");
   iSelect = iGetInt_SYS("DHLIMASK","SELECT");
   if(iSelect!=0) iSelect = 1;


   // --- Mask channel must be specified ---

   if(!iStrlen_STR(sMaskCh))
      Abort_SYS(_("A Mask Channel must be specified."));


   // --- Create or open mask channel ---
      
   if (!iExistChan_DB(Data,sMaskCh)) {
      MaskCh = CreateSymb_DB(Data,sMaskCh,DB_SYMB_CHAN,DB_OWN_SHARED,DB_CATEGORY_CHAN_LONG);
      SetRegSymbSetting_DB(Data,MaskCh,"CLASS","MASK");
   }
   else
      MaskCh = FindChan_DB(Data,sMaskCh);
   LockSymb_DB(Data,MaskCh,DB_LOCK_READWRITE,DB_WAIT_INFINITY);


   // --- Get code channel ---
   
   if (!iExistChan_DB(Data,sLithCh))
   {
      Printf_STR(sTemp, sizeof(sTemp), _("The current data database does not have the code channel '%s' as specified."), sLithCh);
      Abort_SYS(sTemp);
   }
   LithCh = FindChan_DB(Data,sLithCh);
   LockSymb_DB(Data,LithCh,DB_LOCK_READWRITE,DB_WAIT_INFINITY);


   // --- Change selection to "ALL" if doing all the lines ---
   
   if(iSelect==0)
   {
      Select = GetSelect_DB(Data); 
      Select_DB(Data, "", DB_LINE_SELECT_INCLUDE);  
   }
   
   
   // --- Get a LST of the available items ---
   
   ItemLST = Create_LST(64);
   SelLST = Create_LST(64);
   GetChanDataLST_DU(Data, LithCh, NULLSYMB, ItemLST);
   

   // --- Reset selection ---   
   
   if(iSelect==0)
   {
      SetSelect_DB(Data, Select); 
   }
   
   
   if(iInteractive_SYS())
   {
   
      // --- Get the CSV list of codes ---
   
      GetString_SYS("DHLIMASK","CODES", sCodes);
      

      // --- Set starting selection for GUI ---

      ConvertFromCSVString_LST(SelLST, sCodes);
   
      if(iTwoPanelSelection_GUI(ItemLST, SelLST, _("Select codes"))) 
         Cancel_SYS();
         
      // --- Save selection ---
      
      ConvertToCSVString_LST(SelLST, sCodes);       
      SetString_SYS("DHLIMASK","CODES", sCodes);
   }


   // --- Get the CSV list of codes ---
   
   GetString_SYS("DHLIMASK","CODES", sCodes);
   if(!iStrlen_STR(sCodes))
      Abort_SYS(_("No codes were specified"));
   
   
   // --- Convert to a LST and find matches among the available codes ---
      
   SelectCSVStringItems_LST(ItemLST, sCodes, SelLST);

   iN = iSize_LST(SelLST);      
   if(iN==0)
      Abort_SYS(_("None of the selected codes were located in the specified channel."));
      

   // --- Create VVs ---

   iChType = iGetChanType_DB(Data,LithCh);
   LithVV = CreateExt_VV(iChType,0);

   iChType = iGetChanType_DB(Data,MaskCh);
   MaskVV = CreateExt_VV(iChType,0);


   // --- process lines ---

   LineLST = Create_LST(STR_DB_SYMBOL);
   if(iSelect!=1)
      SymbLST_DB(Data, LineLST, DB_SYMB_LINE);
   else
      SelectedLineLST_DB(Data, LineLST);


   iTotLines = iSize_LST(LineLST);
   Progress_SYS(1);
   for(i=0; i<iTotLines; i++)
   {

      // --- get line label and symbol ---

      GetItem_LST(LineLST, 0, i, sLine);
      Line = (DB_SYMB)iGetInt_LST(LineLST, 1, i);


      // --- Update the Progress Bar ---

      Strcpy_STR(sLabel,_("Processing line: "));
      Strcat_STR(sLabel,sLine);
      ProgName_SYS(sLabel,0);
      ProgUpdateL_SYS(i,iTotLines);


      // --- Get lithology channel to VV --

      GetChanVV_DB(Data,Line,LithCh,LithVV);


      // --- Create mask channel ---

      GetChanVV_DB(Data,Line,MaskCh,MaskVV);
      ReFidVV_VV(MaskVV,LithVV);


      // --- If creating new, set all mask values to dummy ---

      if(iAppend==DH_MASK_NEW)
         SetIntN_VV(MaskVV, 0, -1, iDUMMY);


      // --- Mask  ---

      for(ii=0;ii<iN;ii++)
      {
         GetItem_LST(SelLST, LST_ITEM_NAME, ii, sCode);
         MaskStr_VV(MaskVV,LithVV,sCode);
      }


      // --- Put MaskVV back to channel ---

      PutChanVV_DB(Data,Line,MaskCh,MaskVV);
   }


   // --- progress off ---

   Progress_SYS(0);


   // --- clean up ---

   UnLockSymb_DB(Data,MaskCh);
   UnLockSymb_DB(Data,LithCh);

   Destroy_VV(LithVV);
   Destroy_VV(MaskVV);
   Destroy_LST(LineLST);
   Destroy_LST(ItemLST);
   Destroy_LST(SelLST);


   // --- Release the Database ---

   UnLock_EDB(EData);
}
