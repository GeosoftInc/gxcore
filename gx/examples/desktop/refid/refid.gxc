//===========================================================================
NAME          = "Re-Fid a channel"
#include <version.gxh>
DESCRIPTION   = "\

Change the fid sampling of a channel to be based on a reference channel.
This is normally done to re-sample data based on a distance channel, in 
which case the new fiducial will be distance.  Note that the new channel
should only be viewed or processed with other channels that have been
resampled using the same reference channel.

PARAMETERS:

   REFID.IN       - data channel to be re-sampled.
        .REF      - reference channel.
        .OUT      - new re-sampled channel.
        .METHOD   - \"Linear\", \"Min. Curvature\", \"Akima\"
        .START    - required new start fiducial, blank for default
        .INCR     - required new data increment.
        .GAP      - gaps in the data larger than this will not be
                    interpolated.
"

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Database Tools/Channel Tools"

// Revision History
// v6.0.0: Fixed to use FindChan, iExistChan for compatibility with current 
//         X, Y channels.
//===========================================================================
//                               RESOURCES
//===========================================================================

RESOURCE = "refid.gr"
#include "refid.grh"

//===========================================================================
//                               INCLUDES
//===========================================================================

#include <all.gxh>

//===========================================================================
//                               VARIABLES
//===========================================================================

string(STR_DB_SYMBOL) sInCh,sRefCh,sOutCh;   // Channel names
string(STR_DEFAULT) sLabel;
string(STR_DEFAULT) sTemp;                 

EDB         EData;
DB          Data;                  // Database
DGW         Diag;                  // Dialogue handle
DB_SYMB     InCh,RefCh,OutCh;      // Channel Handles
DB_SYMB     Line;                  // Line Handle
LST         List;                  // List handle

real        rStart,rIncr,rGap;     // parameters
int         iMethod;               // interpolation method
int         i;                     // utility
int         iLines;                // Number of Lines Processed
int         iTotLines;             // Total Number of Lines to Process

//===========================================================================
//                                CODE
//===========================================================================

{
   // --- Get the Database ---

   EData = Current_EDB();
   Data = Lock_EDB(EData);

   // --- Are we running interactively ? ---

   if (iInteractive_SYS())
   {

      // --- Create the Dialogue ---

      Diag = Create_DGW("refid");


      // --- Set up lists ---

      List = GetList_DGW(Diag,_REFID_0);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);
      List = GetList_DGW(Diag,_REFID_1);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);
      List = GetList_DGW(Diag,_REFID_2);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);

      // --- Set any Defaults ---

      SetInfoSYS_DGW(Diag,_REFID_0,DGW_TEXT,"REFID","IN");     
      SetInfoSYS_DGW(Diag,_REFID_1,DGW_TEXT,"REFID","OUT");
      SetInfoSYS_DGW(Diag,_REFID_2,DGW_TEXT,"REFID","REF");     
      SetInfoSYS_DGW(Diag,_REFID_3,DGW_TEXT,"REFID","START");
      SetInfoSYS_DGW(Diag,_REFID_4,DGW_TEXT,"REFID","INCR");
      SetInfoSYS_DGW(Diag,_REFID_5,DGW_TEXT,"REFID","GAP");
      SetInfoSYS_DGW(Diag,_REFID_6,DGW_LISTALIAS,"REFID","METHOD");

      // --- Run the Dialogue ---

      i = iRunDialogue_DGW(Diag);
      if (i != 0) Cancel_SYS();    // she hit cancel


      // --- Get the Strings ---

      GetInfoSYS_DGW(Diag,_REFID_0,DGW_TEXT,"REFID","IN");     
      GetInfoSYS_DGW(Diag,_REFID_1,DGW_TEXT,"REFID","OUT");     
      GetInfoSYS_DGW(Diag,_REFID_2,DGW_TEXT,"REFID","REF");     
      GetInfoSYS_DGW(Diag,_REFID_3,DGW_TEXT,"REFID","START");
      GetInfoSYS_DGW(Diag,_REFID_4,DGW_TEXT,"REFID","INCR");
      GetInfoSYS_DGW(Diag,_REFID_5,DGW_TEXT,"REFID","GAP");
      GetInfoSYS_DGW(Diag,_REFID_6,DGW_LISTALIAS,"REFID","METHOD");     


      // --- Destroy the Dialogue ---

      Destroy_DGW(Diag);

   }


   // --- Get Parameters ---

   GetString_SYS("REFID","IN",sInCh);
   GetString_SYS("REFID","REF",sRefCh);
   GetString_SYS("REFID","OUT",sOutCh);
   rStart = rGetReal_SYS("REFID","START");
   rIncr  = rGetReal_SYS("REFID","INCR");
   rGap   = rGetReal_SYS("REFID","GAP");
   

   // --- method ---
   
   GetString_SYS("REFID","METHOD",sTemp);
   if (iStrcmp_STR(sTemp	,_n("Linear"),0) == 0)
      iMethod = DU_REFID_LINEAR;
   else if (iStrcmp_STR(sTemp,_n("Minimum Curvature"),0) == 0)
      iMethod = DU_REFID_MINCUR;
   else if (iStrcmp_STR(sTemp,_n("Akima"),0) == 0)
      iMethod = DU_REFID_AKIMA;
   else if (iStrcmp_STR(sTemp,_n("Nearest"),0) == 0)
      iMethod = DU_REFID_NEAREST;
   else 
      Abort_SYS(_("Invalid interpolation method."));


   // --- Do the channels exist ? ---

   if (!iExistChan_DB(Data,sInCh))
      Abort_SYS(_("Input channel does not exist."));
   InCh = FindChan_DB(Data,sInCh);
   if (!iExistChan_DB(Data,sRefCh))
      Abort_SYS(_("Reference channel does not exist."));
   RefCh = FindChan_DB(Data,sRefCh);


   // --- Does the Ouput Channel Exist ? ---

   if (!iExistChan_DB(Data,sOutCh)) 
      DupSymbNoLock_DB(Data,InCh,sOutCh); // Create it 
   OutCh = FindChan_DB(Data,sOutCh);


   // --- must be different channels ---

   if ( (RefCh == OutCh) || (InCh == RefCh) )
      Abort_SYS(_("Input and Output channels cannot be the reference channel."));


   // --- Lock the channel symbols ---

   if (InCh != OutCh) 
      LockSymb_DB(Data,InCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
   LockSymb_DB(Data,RefCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);
   LockSymb_DB(Data,OutCh,DB_LOCK_READWRITE,DB_WAIT_INFINITY);


   // --- Prepare to do the work ---

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);

   // --- Go through all selected Lines ---

   Progress_SYS(1);
   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {

      // --- Update the Progress Bar ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      GetSymbName_DB(Data,Line,sTemp);
      UnLockSymb_DB(Data,Line);
      Strcpy_STR(sLabel,_("Processing line: "));
      Strcat_STR(sLabel,sTemp);
      ProgName_SYS(sLabel,0);
      ProgUpdateL_SYS(iLines,iTotLines);


      // --- Refid the data ---

      ReFid_DU(Data,Line,InCh,RefCh,OutCh,iMethod,rStart,rIncr,rGap);


      // --- Advance to Next Line ---        

      Line = NextSelLine_DB(Data, Line );
      iLines++;

   }

   // --- Add maker ---

   EasyMakerSymb_DB(Data,OutCh,_("Re-fid channel"),"REFID;");


   // --- Unlock the channel symbol ---

   if (InCh != OutCh) UnLockSymb_DB(Data,InCh);
   UnLockSymb_DB(Data,RefCh);
   UnLockSymb_DB(Data,OutCh);


   // --- done ---

   Progress_SYS(0);

   // --- Release the Database ---

   UnLock_EDB(EData);
}
