//===========================================================================
NAME          = "Load location data."
#include <version.gxh>

TRANSLATIONDOMAIN = "gravity"
TRANSLATIONFRIENDLYPATH = "GX/Gravity/Locations"

DESCRIPTION   = "

    GRLDXYE.FILE  location file
           .TYPE  file type
           
   Data will be loaded into the GRAVRED.LOCATION_DATABASE.           

"
// Revision History:
// v8.1.0: Replaced iGetLength_DB with iGetChannelLength_DB.
// v6.0.0: Validates location database before doing anything.
//         Can suppress "do you want to create" message.
// v5.1.3: Using "Current" X and Y channels

//===========================================================================
//                               RESOURCES
//===========================================================================

RESOURCE = "grldxye.gr"
#include "grldxye.grh"

//===========================================================================
//                               INCLUDES
//===========================================================================

#include <all.gxh>

//===========================================================================
//                               VARIABLES
//===========================================================================

EDB         eDB;                  // Database
DB          hDB;                  // Database
EDB         eLdDB;                // Load from database
DB          hLdDB;                // Load from database
DGW         hDGW;                 // Dialogue handle
LTB         hLTB;                 // Table Handle
DB_SYMB     Group,Ch;
REG         hWorkREG;

string(STR_FILE) sDB,sFile;
string(STR_DEFAULT_SHORT) sType;
string(STR_DB_SYMBOL) sXCh, sYCh;
int i,i0,iType,iForceCreate;

#define TYPE_CSV 0
#define TYPE_GDB 1

//===========================================================================
//                                CODE
//===========================================================================

{

   // --- Suppress "Create new database" message? Must set every time. ---
   
   iForceCreate = iGetInt_SYS("GRLDXYE", "FORCE_CREATE");
   if(iForceCreate!=1) iForceCreate = 0;
   SetInt_SYS("GRLDXYE", "FORCE_CREATE", 0);   
   
   
   // --- get workspace REG and parameters ---
   
   hWorkREG = Create_REG(156);
   GetWorkspaceREG_SYS(hWorkREG);
   Get_REG(hWorkREG,"GRAVRED.LOCATION_DATABASE",sDB,sizeof(sDB));
   
   
   // --- determine file type ---
   
   GetString_SYS("GRLDXYE","FILE",sFile);
   if (iStriMask_STR("*.gdb",sFile))
      Strcpy_STR(sType,_n("Geosoft database (gdb)"));
   else
      Strcpy_STR(sType,_n("ASCII CSV file"));
      

   // --- Are we running interactively ? ---

   if (iInteractive_SYS()) {
   
      i = 0;
      while (i != 2) switch (i) {
         
         case 0:
         
            hDGW = Create_DGW("GRLDXYE");
            SetInfo_DGW(hDGW,_GRLDXYE_0,DGW_FILEPATH,sDB);
            SetInfo_DGW(hDGW,_GRLDXYE_1,DGW_TEXT,sType);
      
            i0 = 0;
            while(!i0) {
      
               i = iRunDialogue_DGW(hDGW);
               if (i == -1) Cancel_SYS();
               GetInfo_DGW(hDGW,_GRLDXYE_0,DGW_FILEPATH,sDB);
               GetInfo_DGW(hDGW,_GRLDXYE_1,DGW_TEXT,sType);
         
   
               // --- check database exists ---
   
               if (!iFileExist_SYS(sDB)) {
                  if(iForceCreate)
                     i0 = 1;
                  else
                     i0 = iDisplayQuestion_SYS(sDB,_("Database does not exist.  Create new?"));
               } else
                  i0 = 1;   
            }
      
            Destroy_DGW(hDGW);
            break;      
      
         case 1:
         
         
            // --- determine file type ---
            
            if (iCharComp_STR(sType,"G")) {
            
               iType = TYPE_GDB;
               hDGW = Create_DGW("GRLDXYE_GDB");
               SetInfo_DGW(hDGW,_GRLDXYE_GDB_0,DGW_FILEPATH,sFile);
               i = iRunDialogue_DGW(hDGW);
               if (i == -1) Cancel_SYS();
               if (i == 2)
                  GetInfo_DGW(hDGW,_GRLDXYE_GDB_0,DGW_FILEPATH,sFile);
               Destroy_DGW(hDGW);
               
            } else {
            
               iType = TYPE_CSV;
               hDGW = Create_DGW("GRLDXYE_CSV");
               SetInfo_DGW(hDGW,_GRLDXYE_CSV_0,DGW_FILEPATH,sFile);
               i = iRunDialogue_DGW(hDGW);
               if (i == -1) Cancel_SYS();
               if (i == 2)
                  GetInfo_DGW(hDGW,_GRLDXYE_CSV_0,DGW_FILEPATH,sFile);
               Destroy_DGW(hDGW);
               
            }
            
            break;
         
         default:
            Abort_SYS(_("I'm lost"));   
      }
      
   }
   
   
   // --- set parameters ---

   SetString_SYS("GRLDXYE","FILE",sFile);
   SetString_SYS("GRLDXYE","TYPE",sType);
   if (iCharComp_STR(sType,"G"))
      iType = TYPE_GDB;
   else
      iType = TYPE_CSV;
      
            
   // --- Is the location database actually set up correctly? ---

   if(iRunGX_SYS("grtestloc.gx"))
      Cancel_SYS();
   

   // --- load/create the new database ---

   if (!iFileExist_SYS(sDB)) {
      Set_REG(hWorkREG,"GRAVRED.LOCATION_DATABASE",sDB);
      SetWorkspaceREG_SYS(hWorkREG);
      if (iRunGX_SYS("grxyenew")) 
         Abort_SYS(_("Unable to create a new location database."));
   }
   
   
   // --- new database ---

   eDB = Load_EDB(sDB);
   hDB = Lock_EDB(eDB);
   Group = FindSymb_DB(hDB,"Location",DB_SYMB_LINE);
   if (Group == NULLSYMB)
      Group = FirstSelLine_DB(hDB);
   if (Group == NULLSYMB)
      Abort_SYS(_("No location group or selected lines in location database."));   
   
   
   // --- refid to match station ---
   
   if (iExistSymb_DB(hDB,"Station",DB_SYMB_CHAN)) {
      Ch = FindSymb_DB(hDB,"Station",DB_SYMB_CHAN);
      LockSymb_DB(hDB,Ch,DB_LOCK_READONLY,DB_WAIT_NONE);
      ReFidAllCh_DU(hDB,Group,FindSymb_DB(hDB,"Station",DB_SYMB_CHAN));
      UnLockSymb_DB(hDB,Ch);
      Associate_DB(hDB,Group,Ch);
   } else {
      Ch = CreateSymb_DB(hDB,"Station",DB_SYMB_CHAN,DB_OWN_SHARED,-24);
      LOCK_RW(hDB,Ch);
      SetChanWidth_DB(hDB,Ch,10);
      UNLOCK(hDB,Ch);
      Associate_DB(hDB,Group,Ch);
   }
   
   
   // --- create geographic channels ---

   Ch = FindSymb_DB(hDB,"Longitude",DB_SYMB_CHAN);
   if (Ch == NULLSYMB) {
      Ch = CreateSymb_DB(hDB,"Longitude",DB_SYMB_CHAN,DB_OWN_SHARED,GS_DOUBLE);
      LOCK_RW(hDB,Ch);
      SetChanWidth_DB(hDB,Ch,13);
      SetChanDecimal_DB(hDB,Ch,2);
      SetChanFormat_DB(hDB,Ch,DB_CHAN_FORMAT_GEOGR);
      SetChanUnit_DB(hDB,Ch,_("dega"));
      UNLOCK(hDB,Ch);
      Associate_DB(hDB,Group,Ch);
   }

   Ch = FindSymb_DB(hDB,"Latitude",DB_SYMB_CHAN);
   if (Ch == NULLSYMB) {
      Ch = CreateSymb_DB(hDB,"Latitude",DB_SYMB_CHAN,DB_OWN_SHARED,GS_DOUBLE);
      LOCK_RW(hDB,Ch);
      SetChanWidth_DB(hDB,Ch,13);
      SetChanDecimal_DB(hDB,Ch,2);
      SetChanFormat_DB(hDB,Ch,DB_CHAN_FORMAT_GEOGR);
      SetChanUnit_DB(hDB,Ch,_("dega"));
      UNLOCK(hDB,Ch);
      Associate_DB(hDB,Group,Ch);
   }

   Ch = GetXYZChanSymb_DB(hDB, DB_CHAN_X);
   if (Ch == NULLSYMB) {
      GetXYZChan_DB(hDB, DB_CHAN_X, sXCh);
      Ch = CreateSymb_DB(hDB,sXCh,DB_SYMB_CHAN,DB_OWN_SHARED,GS_DOUBLE);
      LOCK_RW(hDB,Ch);
      SetChanWidth_DB(hDB,Ch,10);
      SetChanDecimal_DB(hDB,Ch,2);
      SetChanUnit_DB(hDB,Ch,_("m"));
      UNLOCK(hDB,Ch);
      Associate_DB(hDB,Group,Ch);
   }

   Ch = GetXYZChanSymb_DB(hDB, DB_CHAN_Y);
   if (Ch == NULLSYMB) {
      GetXYZChan_DB(hDB, DB_CHAN_Y, sYCh);
      Ch = CreateSymb_DB(hDB,sYCh,DB_SYMB_CHAN,DB_OWN_SHARED,GS_DOUBLE);
      LOCK_RW(hDB,Ch);
      SetChanWidth_DB(hDB,Ch,10);
      SetChanDecimal_DB(hDB,Ch,2);
      SetChanUnit_DB(hDB,Ch,_("m"));
      UNLOCK(hDB,Ch);
      Associate_DB(hDB,Group,Ch);
   }

   Ch = FindSymb_DB(hDB,"Elevation",DB_SYMB_CHAN);
   if (Ch == NULLSYMB) {
      Ch = CreateSymb_DB(hDB,"Elevation",DB_SYMB_CHAN,DB_OWN_SHARED,GS_DOUBLE);
      LOCK_RW(hDB,Ch);
      SetChanWidth_DB(hDB,Ch,10);
      SetChanDecimal_DB(hDB,Ch,2);
      SetChanUnit_DB(hDB,Ch,_("m"));
      UNLOCK(hDB,Ch);
      Associate_DB(hDB,Group,Ch);
   }
     
   if (iType == TYPE_CSV) {
   
   
      // --- load from CSV ---

      hLTB = CreateCSV_LTB(sFile);                           
      LoadLTB_DU(hDB,Group,hLTB,DU_LOADLTB_APPEND);
      AssociateAll_DB(hDB,Group);
      Destroy_SYS(hLTB);
      
   
   } else {
   
   
      // --- load from separate database ---

      if (iLoaded_EDB(sFile)) {
         eLdDB = Load_EDB(sFile);
         hLdDB = Lock_EDB(eLdDB);
      } else   
         hLdDB = Open_DB(sFile,"SUPER","");
      
      Append_DU(hLdDB,hDB,TRUE);
      AssociateAll_DB(hDB,Group);
      
   }
   
            
   // --- update the reg ---

   Set_REG(hWorkREG,"GRAVRED.LOCATION_DATABASE",sDB);
   SetWorkspaceREG_SYS(hWorkREG);
   Destroy_SYS(hWorkREG);


   // --- refid to match station if there is station data ---
   
   Ch = FindSymb_DB(hDB,"Station",DB_SYMB_CHAN);
   LOCK_R(hDB,Ch);
   if (iGetChannelLength_DB(hDB,Group,Ch) > 0)
      ReFidAllCh_DU(hDB,Group,FindSymb_DB(hDB,"Station",DB_SYMB_CHAN));
   UNLOCK(hDB,Ch);
      

   // --- delete line 0 ---

   UnLock_EDB(eDB);
   DelLine0_EDB(eDB);
   
}
