//===========================================================================
NAME          = "Load gravity file into a new database"
#include <version.gxh>

TRANSLATIONDOMAIN = "gravity"
TRANSLATIONFRIENDLYPATH = "GX/Gravity/Import"

DESCRIPTION   = "

	GRLOAD.FILE       name of the data file to import
			.TYPE       \"RAW\" for Geosoft RAW file
							\"CG3\" for Geosoft CG3 data file
							\"CG5\" for Geosoft CG5 data file

"
// Revision History:
// v7.3.0: Added tide correction using CG3/CG5 ETC.
// v5.1.7: Added support for CG5 files.
// v5.1.3: Using "Current" X and Y channels
//===========================================================================
//                                 RESOURCES
//===========================================================================

RESOURCE = "grload.gr"
#include "grload.grh"

//===========================================================================
//                                  INCLUDE
//===========================================================================

#include <all.gxh>     // system

//===========================================================================
//                                 VARIABLES
//===========================================================================

EDB         EData;          // Database handle
DB          Data;           // Database handle
DGW         Diag;           // Dialogue handle
DB_SYMB     Survey;
REG         hDataREG;       // Gravity REG
REG         hWorkREG;       // Workspace REG

string(STR_FILE)  sData,sRaw,sDatabase;
string(STR_DEFAULT_LONG) sTemp;
string(STR_DB_SYMBOL) sXCh, sYCh;
int                      i;
int                      iTideCorrOpt;    // 1 - Calculate, 0 - Use CG3/CG5 ETC
string(STR_DEFAULT_LONG) sTideCorrOpt;


//===========================================================================
// macros

#define DEFDATA(A)\
	Get_REG(hWorkREG,A,sTemp,sizeof(sTemp));\
	if (iStrlen_STR(sTemp)) Set_REG(hDataREG,A,sTemp); Strcpy_STR(sTemp,"");
	

//===========================================================================
//                                   CODE
//===========================================================================

{

	// --- Are we running interactively ? ---

	if (iInteractive_SYS()) {


	  // --- Create the Dialogue ---

	  Diag = Create_DGW("GRLOAD");


	  // --- Set any Defaults ---

	  SetInfoSYS_DGW(Diag,_GRLOAD_0,DGW_FILEPATH,"GRLOAD","DATA");
	  SetInfoSYS_DGW(Diag,_GRLOAD_1,DGW_LISTALIAS,"GRLOAD","TYPE");
	  

	  // --- Run the Dialogue ---

	  if (iRunDialogue_DGW(Diag) != 0) Cancel_SYS();


	  // --- Get the Strings ---

	  GetInfoSYS_DGW(Diag,_GRLOAD_0,DGW_FILEPATH,"GRLOAD","DATA");
	  GetInfoSYS_DGW(Diag,_GRLOAD_1,DGW_LISTALIAS,"GRLOAD","TYPE");


	  // --- Destroy the Dialogue ---

	  Destroy_DGW(Diag);

	}


	// --- Get Parameters ---

	GetString_SYS("GRLOAD","DATA",sData);
	GetString_SYS("GRLOAD","TYPE",sTemp);

	if (iInteractive_SYS()) {
		
		if (iStrcmp_STR(sTemp,"CG3",STR_CASE_TOLERANT) == 0 || 
			 iStrcmp_STR(sTemp,"CG5",STR_CASE_TOLERANT) == 0) 
		{
		  // --- Create the Dialogue ---

		  Diag = Create_DGW("GRLOAD2");


		  // --- Set any Defaults ---

		  SetInfoSYS_DGW(Diag,_GRLOAD2_0,DGW_LISTALIAS,"GRLOAD","TIDECORROPT");
		  

		  // --- Run the Dialogue ---

		  if (iRunDialogue_DGW(Diag) != 0) Cancel_SYS();


		  // --- Get the Strings ---

		  GetInfoSYS_DGW(Diag,_GRLOAD2_0,DGW_LISTALIAS,"GRLOAD","TIDECORROPT");


		  // --- Destroy the Dialogue ---

		  Destroy_DGW(Diag);

		}
	}


	if (iStrcmp_STR(sTemp,"RAW",STR_CASE_TOLERANT) == 0) 
	{
		Strcpy_STR(sRaw,sData);
		iTideCorrOpt = 1;
	}
	else if (iStrcmp_STR(sTemp,"CG3",STR_CASE_TOLERANT) == 0) 
	{
		FileNamePart_STR(sData,sRaw,STR_FILE_PART_NAME);
		FileExt_STR(sRaw,"raw",sRaw,FILE_EXT_FORCE);
		iTideCorrOpt = iGetInt_SYS("GRLOAD","TIDECORROPT");
		ConvertCG3toRAW_MISC(sData,sRaw,iTideCorrOpt);
	}
	else if (iStrcmp_STR(sTemp,"CG5",STR_CASE_TOLERANT) == 0) 
	{
		FileNamePart_STR(sData,sRaw,STR_FILE_PART_NAME);
		FileExt_STR(sRaw,"raw",sRaw,FILE_EXT_FORCE);
		iTideCorrOpt = iGetInt_SYS("GRLOAD","TIDECORROPT");
		ConvertCG5toRAW_MISC(sData,sRaw,iTideCorrOpt);
	} else
		Abort_SYS(_("Only \"RAW\" and \"CG#\" data files are suppoted."));
		
		
	// --- database name ---
			
	FileNamePart_STR(sData,sDatabase,STR_FILE_PART_NAME);
	FileExt_STR(sDatabase,"gdb",sDatabase,FILE_EXT_FORCE);
	if (iFileExist_SYS(sDatabase) && iInteractive_SYS())
	{
		i = iDisplayQuestionWithCancel_SYS(sDatabase,_("Database exists.  Overwrite?"));
	
		if(i == 2)
			Cancel_SYS();
		else if(i == 0)
		{
		  DisplayMessage_SYS("GRLOAD",_("Please provide a new database name"));
		  
		  // --- Create the Dialogue ---

		  Diag = Create_DGW("GRLOAD1");


		  // --- Set any Defaults ---

		  SetInfoSYS_DGW(Diag,_GRLOAD1_0,DGW_FILEPATH,"GRLOAD","NEWDB");

		  // --- Run the Dialogue ---

		  if (iRunDialogue_DGW(Diag) != 0) Cancel_SYS();

		  // --- Get the Strings ---

		  GetInfoSYS_DGW(Diag,_GRLOAD1_0,DGW_FILEPATH,"GRLOAD","NEWDB");

		  // --- Destroy the Dialogue ---

		  Destroy_DGW(Diag);

		  GetString_SYS("GRLOAD","NEWDB",sDatabase);
		}   
	}


	// --- turn on progress ---

	Progress_SYS(1);
	ProgName_SYS(_("Import gravity data"),1);


	// --- create/load the new database ---

	if (iLoaded_EDB(sDatabase)) UnLoad_EDB(sDatabase);
	iDeleteFile_SYS(sDatabase);
	Create_DB(sDatabase,10,50,10+50+20,10,100,"SUPER","");
	EData = Load_EDB(sDatabase);
	Data = Lock_EDB(EData);
	
	
	// --- get reg's ---

	hDataREG    = Create_REG(256);
	GetRegSymb_DB(Data,NULLSYMB,hDataREG);
	hWorkREG = Create_REG(256);
	GetWorkspaceREG_SYS(hWorkREG);
	
	
	// --- initialize REG with default values ---
	
	DEFDATA("GRAVRED.OPERATOR")
	DEFDATA("GRAVRED.DATE")
	DEFDATA("GRAVRED.INSTRUMENT")
	DEFDATA("GRAVRED.INSTRUMENT_SCALE")
	DEFDATA("GRAVRED.BASE_DATABASE")
	DEFDATA("GRAVRED.FORMULA")
	DEFDATA("GRAVRED.FREE_AIR")
	DEFDATA("GRAVRED.GMT_DIFFERENCE")
	DEFDATA("GRAVRED.DISTANCE_UNITS")
	DEFDATA("GRAVRED.DENSITY_EARTH")
	DEFDATA("GRAVRED.DENSITY_WATER")
	DEFDATA("GRAVRED.DENSITY_ICE")
	DEFDATA("GRAVRED.MAP_PROJECTION")
	Set_REG(hDataREG,"GRAVRED.FILE",sData);
	Set_REG(hDataREG,"GRAVRED.TYPE","Survey");

	if(iTideCorrOpt==1)   Strcpy_STR(sTideCorrOpt,"1");
	else                  Strcpy_STR(sTideCorrOpt,"0");   
	Set_REG(hDataREG,"GRAVRED.TIDECORROPT",sTideCorrOpt);
	

	// --- create line symbol ---

	CreateSymb_DB(Data,"GravData",DB_SYMB_LINE,DB_OWN_SHARED,DB_CATEGORY_LINE_GROUP);
	Survey = FindSymb_DB(Data,"GravData",DB_SYMB_LINE);


	// --- import ---

	LoadGravity_DU(Data,hDataREG,Survey,sRaw);
	AssociateAll_DB(Data,Survey);


	// --- put data reg into database ---
	
	Set_REG(hDataREG,"GRAVRED.FILE",sData);
	SetRegSymb_DB(Data,NULLSYMB,hDataREG);
	
	
	// --- update workspace reg ---
	
	Merge_REG(hWorkREG,hDataREG,REG_MERGE_ADD);
	SetWorkspaceREG_SYS(hWorkREG);
	
	
	// --- clean up ---

	Destroy_REG(hDataREG);
	Destroy_REG(hWorkREG);


	// --- Get current reference channels ---
		
	GetXYZChan_DB(Data, DB_CHAN_X, sXCh);
	GetXYZChan_DB(Data, DB_CHAN_Y, sYCh);


	// --- release database to EDB ---
	
	UnLock_EDB(EData);
	
	

	// --- delete line 0 and display channels ---
	
	DelLine0_EDB(EData);
	LoadChan_EDB(EData,"Line");
	LoadChan_EDB(EData,"Station");
	LoadChan_EDB(EData,"Type");
	LoadChan_EDB(EData,"Date");
	LoadChan_EDB(EData,"Time");
	LoadChan_EDB(EData,"Reading");
	LoadChan_EDB(EData,"Height");
	LoadChan_EDB(EData,"Longitude");
	LoadChan_EDB(EData,"Latitude");
	LoadChan_EDB(EData, sXCh);
	LoadChan_EDB(EData, sYCh);
	LoadChan_EDB(EData,"Elevation");
	LoadChan_EDB(EData,"ETC");
	
	Progress_SYS(0);
	
	// --- display parameters for user verification ---
	
	if (iInteractive_SYS()) iRunGX_SYS("grparm");
	
}
