//===========================================================================
NAME          = "ARROWS GX"
#include <version.gxh>
TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/Arrows"

DESCRIPTION   = "
Plot arrows based on X and Y magnitudes.

Parameters:

ARROWS.X     : X Location Channel
ARROWS.Y     : Y Location Channel
ARROWS.DX    : X Vector Magnitude Channel
ARROWS.DY    : Y Vector Magnitude Channel
ARROWS.SCALE : Arrow length in mm/unit
ARRPWS.POS   : Arrow origin

"
// Revision History
// v5.1.3: Using FindChan_DB and iExistChan_DB
//===========================================================================

RESOURCE = "ARROWS.GR"
#include "ARROWS.grh"

//===========================================================================

#include <all.gxh>


//===========================================================================
//                             VARIABLES
//===========================================================================

EDB        EData;
DB         Data;
DGW        Diag;
DB_SYMB    XCh,YCh,XVCh, YVCh;     // Channel handles
DB_SYMB    Line;                   // Line handle
EMAP       EMap;
MAP        Map;
MVIEW      View;
LST        List;
VV         X_VV,Y_VV, XV_VV, YV_VV;
IPJ        DataIPJ;

string(STR_DEFAULT) sColor;
string(STR_DB_SYMBOL) sXCh, sYCh, sXVCh, sYVCh;
string(STR_DEFAULT_LONG) sLabel,sName,sGroup;
string(STR_DB_SYMBOL) sLine;
string(STR_GROUP) sGrpName;

int iLines,iTotLines,iColor;
int iPos, iSize, iStyle, iAngle;
real rM, rMax, rMin, rThickness;

real rScale;

//===========================================================================
//                           MAP CODE
//===========================================================================

{
   // --- Ensure we have a base map and that we are not working with grid documents ---
   
   if (iRunGX_SYS("sclmap") != 0) 
      Cancel_SYS();

   // --- Get current database and map ---

   EData = Current_EDB();
   Data = Lock_EDB(EData);


   // --- Are we running interactively ? ---

   if (iInteractive_SYS()) {

      // --- Create the Dialogue ---

      Diag = Create_DGW("ARROWS");

      // --- Create the Dialogue ---

      Diag = Create_DGW("ARROWS");
     
      // --- Set up lists ---

      List = GetList_DGW(Diag,_ARROWS_0);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);
      List = GetList_DGW(Diag,_ARROWS_1);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);
      List = GetList_DGW(Diag,_ARROWS_2);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);
      List = GetList_DGW(Diag,_ARROWS_3);
      SymbLST_DB(Data,List,DB_SYMB_CHAN);
      Sort_LST(List,0,0);

      // --- Set any Defaults from INI ---

      SetInfoSYS_DGW(Diag,_ARROWS_0,DGW_TEXT,"ARROWS","X");
      SetInfoSYS_DGW(Diag,_ARROWS_1,DGW_TEXT,"ARROWS","Y");
      SetInfoSYS_DGW(Diag,_ARROWS_2,DGW_TEXT,"ARROWS","XV");
      SetInfoSYS_DGW(Diag,_ARROWS_3,DGW_TEXT,"ARROWS","YV");
      SetInfoSYS_DGW(Diag,_ARROWS_4,DGW_TEXT,"ARROWS","SCALE");
      SetInfoSYS_DGW(Diag,_ARROWS_5,DGW_LISTALIAS,"ARROWS","POS");
      SetInfoSYS_DGW(Diag,_ARROWS_6,DGW_LISTALIAS,"ARROWS","SIZE");
      SetInfoSYS_DGW(Diag,_ARROWS_7,DGW_LISTALIAS,"ARROWS","STYLE");
      SetInfoSYS_DGW(Diag,_ARROWS_8,DGW_LISTALIAS,"ARROWS","ANGLE");
      SetInfoSYS_DGW(Diag,_ARROWS_9,DGW_TEXT,"ARROWS","COLOR");
      SetInfoSYS_DGW(Diag,_ARROWS_10,DGW_TEXT,"ARROWS","THICKNESS");

      if(iRunDialogue_DGW(Diag)==-1) Cancel_SYS();

      GetInfoSYS_DGW(Diag,_ARROWS_0,DGW_TEXT,"ARROWS","X");
      GetInfoSYS_DGW(Diag,_ARROWS_1,DGW_TEXT,"ARROWS","Y");
      GetInfoSYS_DGW(Diag,_ARROWS_2,DGW_TEXT,"ARROWS","XV");
      GetInfoSYS_DGW(Diag,_ARROWS_3,DGW_TEXT,"ARROWS","YV");
      GetInfoSYS_DGW(Diag,_ARROWS_4,DGW_TEXT,"ARROWS","SCALE");
      GetInfoSYS_DGW(Diag,_ARROWS_5,DGW_LISTALIAS,"ARROWS","POS");
      GetInfoSYS_DGW(Diag,_ARROWS_6,DGW_LISTALIAS,"ARROWS","SIZE");
      GetInfoSYS_DGW(Diag,_ARROWS_7,DGW_LISTALIAS,"ARROWS","STYLE");
      GetInfoSYS_DGW(Diag,_ARROWS_8,DGW_LISTALIAS,"ARROWS","ANGLE");
      GetInfoSYS_DGW(Diag,_ARROWS_9,DGW_TEXT,"ARROWS","COLOR");
      GetInfoSYS_DGW(Diag,_ARROWS_10,DGW_TEXT,"ARROWS","THICKNESS");

      Destroy_DGW(Diag);

   }

   // --- Get parameters ---

   GetString_SYS("ARROWS","X",sXCh);
   GetString_SYS("ARROWS","Y",sYCh);
   GetString_SYS("ARROWS","XV",sXVCh);
   GetString_SYS("ARROWS","YV",sYVCh);
   GetString_SYS("ARROWS","COLOR",sColor);

   // --- channels exist ? ---

   if (!iExistChan_DB(Data,sXCh))
      Abort_SYS(_("X channel does not exist."));
   XCh = FindChan_DB(Data,sXCh);
   LockSymb_DB(Data,XCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);

   if (!iExistChan_DB(Data,sYCh))
      Abort_SYS(_("Y channel does not exist."));
   YCh = FindChan_DB(Data,sYCh);
   LockSymb_DB(Data,YCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);

   if (!iExistChan_DB(Data,sXVCh))
      Abort_SYS(_("X vector channel does not exist."));
   XVCh = FindChan_DB(Data,sXVCh);
   LockSymb_DB(Data,XVCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);

   if (!iExistChan_DB(Data,sYVCh))
      Abort_SYS(_("Y vector channel does not exist."));
   YVCh = FindChan_DB(Data,sYVCh);
   LockSymb_DB(Data,YVCh,DB_LOCK_READONLY,DB_WAIT_INFINITY);

   if(!iStrlen_STR(sColor))
      Strcpy_STR(sColor, "R0");

   rScale = rGetReal_SYS("ARROWS","SCALE");
   iPos = iGetInt_SYS("ARROWS","POS");
   iSize = iGetInt_SYS("ARROWS","SIZE");
   iStyle = iGetInt_SYS("ARROWS","STYLE");
   iAngle = iGetInt_SYS("ARROWS","ANGLE");
   rThickness = rGetReal_SYS("ARROWS","THICKNESS");

   if(rScale!=rDUMMY && rScale<=0.0) 
      Abort_SYS(_("Scale must be undefined or a positive value."));
   if(iPos<0 || iPos>2) 
      Abort_SYS(_("Position value must be in range 0-2"));
   if(iSize<0 || iSize>4) 
      Abort_SYS(_("Arrow head size value must be in range 0-4"));
   if(iStyle<0 || iStyle>2) 
      Abort_SYS(_("Arrow head style value must be in range 0-2"));
   if(iAngle<0 || iAngle>2) 
      Abort_SYS(_("Arrow head pointedness value must be in range 0-2"));

   // --- Create some VVs ---

   X_VV = Create_VV(REAL,0);
   Y_VV = Create_VV(REAL,0);
   XV_VV = Create_VV(REAL,0);
   YV_VV = Create_VV(REAL,0);

   // --- Open the data view ---

   EMap = Current_EMAP();
   Map  = Lock_EMAP(EMap);
   View = Create_MVIEW(Map,"*Data",MVIEW_WRITEOLD);
   SetThinRes_MVIEW(View,0.02);

   // --- Handle Projections ---
   
   DataIPJ = Create_IPJ();
   GetIPJ_DB(Data,XCh,DataIPJ);
   SetWorkingIPJ_MVIEW(View,DataIPJ);
   
   // --- Start a group ---

   GetName_DB(Data,DB_NAME_FILE,sName);
   FileNamePart_STR(sName,sName,STR_FILE_PART_NAME);
   GenGroupName_STR("VECTOR",sName,"",sGrpName);
   Strcpy_STR(sGroup,sGrpName);
   StartGroup_MVIEW(View,sGroup,MVIEW_GROUP_NEW);

   // --- Add maker ---

   Maker_MVIEW(View,1,1,"ARROWS",MAKER_GX,_("Arrows..."),"ARROWS;");

   // --- Link ---

   Link_MVIEW(View,Data,_n("Data Link"));

   // --- Set global line parameters ---

   iColor = iColor_MVIEW(sColor);
   LineColor_MVIEW(View, iColor);
   FillColor_MVIEW(View, iColor);

   iLines = 0;
   iTotLines = iCountSelLines_DB(Data);

   // --- Pre-scale data? ---

   rMax = 0.0;
   if(rScale==rDUMMY) {

      Progress_SYS(1);
      Line = FirstSelLine_DB(Data);
      while (iIsLineValid_DB(Data,Line))
      {

         // --- Get line label ---

         LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
         LineLabel_DB(Data,Line,sLine,DB_LINE_LABEL_FORMAT_FULL);
         UnLockSymb_DB(Data,Line);

         // --- Update the Progress Bar ---

         Strcpy_STR(sLabel,_("Autoscaling data, Line: "));
         Strcat_STR(sLabel,sLine);
         ProgName_SYS(sLabel,0);
         ProgUpdateL_SYS(iLines,iTotLines);

         // --- Get data ---

         GetChanVV_DB(Data,Line,XVCh,XV_VV);
         GetChanVV_DB(Data,Line,YVCh,YV_VV);
         ReFidVV_VV(YV_VV, XV_VV);

         // --- Get the range in magnitudes ---

         RangeVectorMag_VVU(XV_VV, YV_VV, rMin, rM);

         if(rM > rMax) rMax = rM;

         // --- Advance to Next Line ---

         Line = NextSelLine_DB(Data, Line );
         iLines++;

      }

      // --- Calculate default scaling so largest arrow is 10 mm. --

      if(rMax==0.0) 
         Abort_SYS(_("Vector data has zero magnitude, cannot auto-scale"));

      rScale = 10.0*rScaleMM_MVIEW(View) / rMax;
   }
   else 

      // --- Convert scale factor from units/mm to the multiplicative factor
      //     to be used on the actual values in the XV and YV channels.
      //    (The plotting is done in the data view).

      rScale = rScaleMM_MVIEW(View) / rScale;

   // --- Plot the arrows ---

   Progress_SYS(1);
   Line = FirstSelLine_DB(Data);
   while (iIsLineValid_DB(Data,Line))
   {

      // --- Get line label ---

      LockSymb_DB(Data,Line,DB_LOCK_READONLY,DB_WAIT_INFINITY);
      LineLabel_DB(Data,Line,sLine,DB_LINE_LABEL_FORMAT_FULL);
      UnLockSymb_DB(Data,Line);

      // --- Update the Progress Bar ---

      Strcpy_STR(sLabel,_("Plotting arrows, Line: "));
      Strcat_STR(sLabel,sLine);
      ProgName_SYS(sLabel,0);
      ProgUpdateL_SYS(iLines,iTotLines);

      // --- Get data ---

      GetChanVV_DB(Data,Line,XCh,X_VV);
      GetChanVV_DB(Data,Line,YCh,Y_VV);
      GetChanVV_DB(Data,Line,XVCh,XV_VV);
      GetChanVV_DB(Data,Line,YVCh,YV_VV);

      ReFidVV_VV(X_VV, XV_VV);
      ReFidVV_VV(Y_VV, XV_VV);
      ReFidVV_VV(YV_VV, XV_VV);

      // --- Add line link ---

      LineLabel_DB(Data,Line,sLine,DB_LINE_LABEL_FORMAT_LINK);
      ChangeLineMessage_MVIEW(View,sLine);

      // --- Call the arrows method ---

      ArrowVectorVV_MVU(View, X_VV, Y_VV, XV_VV, YV_VV, rScale, iPos, iSize, 
                       iStyle, iAngle, rThickness);

      // --- Advance to Next Line ---

      Line = NextSelLine_DB(Data, Line );
      iLines++;

   }

   // --- Done with arrow plot ---

   Progress_SYS(0);


   // --- Unlock the channel symbols ---

   UnLockSymb_DB(Data,XCh);
   UnLockSymb_DB(Data,YCh);
   UnLockSymb_DB(Data,XVCh);
   UnLockSymb_DB(Data,YVCh);


   // --- Destroy the VVs ---

   Destroy_VV(X_VV);
   Destroy_VV(Y_VV);
   Destroy_VV(XV_VV);
   Destroy_VV(YV_VV);
   
   // --- Done with the data view ---

   Destroy_MVIEW(View);  

   // --- Done ---

   UnLock_EMAP(EMap);
   UnLock_EDB(EData);

}
