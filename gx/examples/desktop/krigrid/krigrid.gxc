//===========================================================================
NAME          = "KRIGRID Gridding Program"
#include <version.gxh>

TRANSLATIONDOMAIN = "core"
TRANSLATIONFRIENDLYPATH = "GX/GeochemMap/Grids/Gridding"

DESCRIPTION   = "\

Creates a Grid file using minimum curvature gridding.

Parameters: 

		 KRIGRID.CHAN    - Channel to grid                        
				  .GRID    - Name of New Grid file
				  .ERR     - Name of Error Grid file
				  .INVAR   - Name of Input Variogram file
				  .OUTVAR  - Name of Output Variogram file
				  .CS      - Cell size
				  .XY      - Xmin,Ymin,Xmax,Ymax
				  .LOGOPT  - Log option
				  .LOGMIN  - Log minimum
				  .DSF     - Low-pass desampling factor
				  .BKD     - Blanking distance
				  .RT      - Remove trend
				  .MODEL   - Variogram model
				  .POWER   - Power 
				  .RS      - Range/Slope
				  .NUG     - Nugget
				  .SILL    - Sill
				  .VARONLY - Compute the variogram file only
				  .LOGFILE - Log File
				  .STRIKE  - Strike angle
				  .STRIKEWT - Strike weight
				 
"
// Revision History:
// v7.3.0: Added strike angle and strike weight options for anisotropy.
// v7.0.1: Unload/delete existing grid to ensure proper refresh of grid window.
// v6.2:   Variogram map name takes variogram file name. Fixes in initial sizing.
// v6.0:   Fixed a bug of asking the output grid even in the case of "Variogram only".
// v5.1.8: Automatically display variogram to a new map if "variogram only"
// v5.1.3: Using "Current" X and Y channels
//         Using new iRun2_KGRD function

//===========================================================================

RESOURCE = "krigrid.gr"
#include "krigrid.grh"

//===========================================================================

#include <all.gxh>


//===========================================================================
//                             GLOBAL VARIABLES
//===========================================================================

string(STR_FILE) sCtl;         // Name of control file
string(STR_FILE) sGrid;        // Name of new grid file
string(STR_FILE) sErrGrd;      // Name of error grid file
string(STR_FILE) sInVar;       // Name of input variogram file
string(STR_FILE) sOutVar;      // Name of output variogram file
string(STR_FILE) sVarMap;      // Name of map to display variogram
string(STR_FILE) sLogFile;     // Name of log file
string(STR_FILE) sName;
string(STR_DB_SYMBOL) sXCh,sYCh,sZCh;  // channels
string(STR_DEFAULT) sCS;          //    .
string(STR_DEFAULT_LONG) sXY;          //    .
string(STR_DEFAULT) sLogOpt;      //    .
string(STR_DEFAULT) sLogMin;      //    .
string(STR_DEFAULT) sDSF;         //    .
string(STR_DEFAULT) sBKD;         // optional parameter settings
string(STR_DEFAULT) sRT, sAliasFlag;          //    .
string(STR_DEFAULT) sModel;       //    .
string(STR_DEFAULT) sPower;       //    .
string(STR_DEFAULT) sRS;          //    .
string(STR_DEFAULT) sNug;         //    .
string(STR_DEFAULT) sSill;        //    .
string(STR_DEFAULT) sStrike;      //    .
string(STR_DEFAULT) sStrikeWt;    //    .

WA          WA_con;       // Handle to write to control file
string(STR_DEFAULT_LONG) sText;        // Line of text to write to control file
														 
EDB         EData;
DB          Data;         // Database handle
DGW         Diag;         // Dialogue handle
LST         List;         // List handle
EMAP        EMap;         // Variogram map handle
MAP         Map;          // Variogram map handle
MVIEW       MView;        // Data view handle
														  
int         i;            // utility int
int         iVAO;         // flag of variogram only

int         iDone, iLocked;
						 
string(STR_DEFAULT_LONG) sMsg;
string(64)               sLicClass;

int                      iArcGIS;
int                      iInteractive;
int         iRunMode;
#define MODE_NORMAL 0
#define MODE_OPTIONS 1
#define MODE_CONTROL_FILE 2

//==========================================================================
//                           KRIGRID CODE
//===========================================================================

{
	// --- Are we running inside ArcGIS ---
	GetLicenseClass_SYS(sLicClass);
	iArcGIS = iStrcmp_STR(sLicClass, "ArcGIS", STR_CASE_TOLERANT) == 0;
	
	// --- Determine open method. On rare occasions, KRIGRID and RANGRID are
	//     called from "C" code which has itself already been called from a
	//     GX where the database has already been locked. In this case, don't try
	//     to unlock it at the end, or the underlying DB object will be destroyed.
	//     Lock_EDB will return an error ("Locked twice") in this case, but it
	//     will still work.

	iLocked = iGetInt_SYS("KRIGRID","LOCKED");
	if(iLocked!=1) iLocked = 0;
	iRunMode = iGetInt_SYS("KRIGRID", "RUNMODE");
	SetInt_SYS("KRIGRID", "RUNMODE", 0);      // must set every time, default to normal behaviour
	if(iRunMode!=MODE_OPTIONS && 
		iRunMode!=MODE_CONTROL_FILE) iRunMode = MODE_NORMAL;

	// --- Locking mode must be reset for every call --

	SetInt_SYS("KRIGRID","LOCKED",0);

	// --- Get the Database ---

	EData = Current_EDB();
	Data = Lock_EDB(EData);


	// --- Are we running interactively ? ---
	if(iRunMode == MODE_OPTIONS)
	{ 
		  if(!iInteractive_SYS())
				Abort_SYS(_("Krigrid OPTIONS mode must be run interactively"));
		  // --- Create the Dialogue ---
	  

		  Diag = Create_DGW("KRIGRID_ADV");

		  // --- Set any Defaults from INI ---

		  SetInfoSYS_DGW(Diag,_KRIGRID1_0,DGW_FILEPATH,"KRIGRID","ERR");
		  SetInfoSYS_DGW(Diag,_KRIGRID1_1,DGW_FILEPATH,"KRIGRID","INVAR");
		  SetInfoSYS_DGW(Diag,_KRIGRID1_2,DGW_FILEPATH,"KRIGRID","OUTVAR");
		  SetInfoSYS_DGW(Diag,_KRIGRID1_3,DGW_TEXT,"KRIGRID","XY");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_4,DGW_LISTALIAS,"KRIGRID","LOGOPT");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_5,DGW_TEXT,"KRIGRID","LOGMIN");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_6,DGW_TEXT,"KRIGRID","DSF");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_7,DGW_TEXT,"KRIGRID","BKD");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_8,DGW_TEXT,"KRIGRID","RT");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_9,DGW_LISTALIAS,"KRIGRID","MODEL");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_10,DGW_TEXT,"KRIGRID","POWER");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_11,DGW_TEXT,"KRIGRID","RS");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_12,DGW_TEXT,"KRIGRID","NUG");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_13,DGW_TEXT,"KRIGRID","SILL");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_14,DGW_TEXT,"KRIGRID","STRIKE");     
		  SetInfoSYS_DGW(Diag,_KRIGRID1_15,DGW_TEXT,"KRIGRID","STRIKEWT");     


		  // --- Run the Dialogue ---

		  i = iRunDialogue_DGW(Diag);
		  if (i == -1)
			  Cancel_SYS();    // Cancel
  
		  // --- Put values back in INI ---

		  GetInfoSYS_DGW(Diag,_KRIGRID1_0,DGW_FILEPATH,"KRIGRID","ERR");
		  GetInfoSYS_DGW(Diag,_KRIGRID1_1,DGW_FILEPATH,"KRIGRID","INVAR");
		  GetInfoSYS_DGW(Diag,_KRIGRID1_2,DGW_FILEPATH,"KRIGRID","OUTVAR");
		  GetInfoSYS_DGW(Diag,_KRIGRID1_3,DGW_TEXT,"KRIGRID","XY");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_4,DGW_LISTALIAS,"KRIGRID","LOGOPT");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_5,DGW_TEXT,"KRIGRID","LOGMIN");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_6,DGW_TEXT,"KRIGRID","DSF");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_7,DGW_TEXT,"KRIGRID","BKD");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_8,DGW_TEXT,"KRIGRID","RT");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_9,DGW_LISTALIAS,"KRIGRID","MODEL");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_10,DGW_TEXT,"KRIGRID","POWER");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_11,DGW_TEXT,"KRIGRID","RS");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_12,DGW_TEXT,"KRIGRID","NUG");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_13,DGW_TEXT,"KRIGRID","SILL");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_14,DGW_TEXT,"KRIGRID","STRIKE");     
		  GetInfoSYS_DGW(Diag,_KRIGRID1_15,DGW_TEXT,"KRIGRID","STRIKEWT");     

		  GetInfo_DGW(Diag,_KRIGRID1_8,DGW_LISTALIAS,sAliasFlag);

		  Destroy_DGW(Diag);
		  Exit_SYS();
	
	}

	i = 0;
	iInteractive = iInteractive_SYS();
	if(iInteractive_SYS()) 

	{

		iDone = 0;
		i = 0;
		while(iDone == 0) {
		
			if(i==0) {

				// --- Create the Dialogue ---

				Diag = Create_DGW("KRIGRID");

				// --- Set up lists ---
  
				List = GetList_DGW(Diag,_KRIGRID_0);
				SymbLST_DB(Data,List,DB_SYMB_CHAN);
				Sort_LST(List,0,0);
			
				// --- Set any Defaults from INI ---

				SetInfoSYS_DGW(Diag,_KRIGRID_0,DGW_TEXT,"KRIGRID","CHAN");     
				SetInfoSYS_DGW(Diag,_KRIGRID_1,DGW_FILEPATH,"KRIGRID","GRID");
				SetInfoSYS_DGW(Diag,_KRIGRID_2,DGW_TEXT,"KRIGRID","CS");     


				// --- Run the Dialogue ---

				i = iRunDialogue_DGW(Diag);
				if (i == -1)
					Cancel_SYS();    // Cancel
		
				// --- Put values back in INI ---

				GetInfoSYS_DGW(Diag,_KRIGRID_0,DGW_TEXT,"KRIGRID","CHAN");     
				GetInfoSYS_DGW(Diag,_KRIGRID_1,DGW_FILEPATH,"KRIGRID","GRID");
				GetInfoSYS_DGW(Diag,_KRIGRID_2,DGW_TEXT,"KRIGRID","CS");     
	
				// ---  Do file verification here ---

				if(i==0) {
						
					GetString_SYS("KRIGRID","GRID",sGrid);
					if(iFileExist_SYS(sGrid)) {

						Printf_STR(sMsg, sizeof(sMsg), _("Overwrite the \"%s\" file?"), sGrid);

						if(iDisplayQuestion_SYS(_("File Validation"), sMsg)==0) {
							i = 0;
							continue;
						}                     
					}

					iDone = 1;
				}            

				Destroy_DGW(Diag);

			}

			else if(i==1) {      // Advanced Options

				// --- Create the Dialogue ---

				Diag = Create_DGW("KRIGRID1");

				// --- Set any Defaults from INI ---

				GetString_SYS("KRIGRID","CHAN",sZCh);
				SetInfo_DGW(Diag,_KRIGRID1_0,DGW_TEXT,sZCh);

				GetString_SYS("KRIGRID","GRID",sGrid);
				if(!iStrlen_STR(sGrid))
					Strcpy_STR(sGrid,_("None Specified"));
				SetInfo_DGW(Diag,_KRIGRID1_1,DGW_TEXT,sGrid);

				SetInfoSYS_DGW(Diag,_KRIGRID1_2,DGW_FILEPATH,"KRIGRID","ERR");
				SetInfoSYS_DGW(Diag,_KRIGRID1_3,DGW_FILEPATH,"KRIGRID","INVAR");
				SetInfoSYS_DGW(Diag,_KRIGRID1_4,DGW_FILEPATH,"KRIGRID","OUTVAR");
				SetInfoSYS_DGW(Diag,_KRIGRID1_5,DGW_TEXT,"KRIGRID","XY");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_6,DGW_LISTALIAS,"KRIGRID","LOGOPT");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_7,DGW_TEXT,"KRIGRID","LOGMIN");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_8,DGW_TEXT,"KRIGRID","DSF");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_9,DGW_TEXT,"KRIGRID","BKD");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_10,DGW_TEXT,"KRIGRID","RT");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_11,DGW_LISTALIAS,"KRIGRID","MODEL");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_12,DGW_TEXT,"KRIGRID","POWER");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_13,DGW_TEXT,"KRIGRID","RS");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_14,DGW_TEXT,"KRIGRID","NUG");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_15,DGW_TEXT,"KRIGRID","SILL");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_16,DGW_TEXT,"KRIGRID","STRIKE");     
				SetInfoSYS_DGW(Diag,_KRIGRID1_17,DGW_TEXT,"KRIGRID","STRIKEWT");     


				// --- Run the Dialogue ---

				i = iRunDialogue_DGW(Diag);
				if (i == -1)
					Cancel_SYS();    // Cancel
		
				// --- Put values back in INI ---

				GetInfoSYS_DGW(Diag,_KRIGRID1_2,DGW_FILEPATH,"KRIGRID","ERR");
				GetInfoSYS_DGW(Diag,_KRIGRID1_3,DGW_FILEPATH,"KRIGRID","INVAR");
				GetInfoSYS_DGW(Diag,_KRIGRID1_4,DGW_FILEPATH,"KRIGRID","OUTVAR");
				GetInfoSYS_DGW(Diag,_KRIGRID1_5,DGW_TEXT,"KRIGRID","XY");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_6,DGW_LISTALIAS,"KRIGRID","LOGOPT");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_7,DGW_TEXT,"KRIGRID","LOGMIN");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_8,DGW_TEXT,"KRIGRID","DSF");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_9,DGW_TEXT,"KRIGRID","BKD");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_10,DGW_TEXT,"KRIGRID","RT");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_11,DGW_LISTALIAS,"KRIGRID","MODEL");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_12,DGW_TEXT,"KRIGRID","POWER");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_13,DGW_TEXT,"KRIGRID","RS");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_14,DGW_TEXT,"KRIGRID","NUG");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_15,DGW_TEXT,"KRIGRID","SILL");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_16,DGW_TEXT,"KRIGRID","STRIKE");     
				GetInfoSYS_DGW(Diag,_KRIGRID1_17,DGW_TEXT,"KRIGRID","STRIKEWT");     
	
				GetInfo_DGW(Diag,_KRIGRID1_10,DGW_LISTALIAS,sAliasFlag);

				Destroy_DGW(Diag);

				// --- Variogram only? ---

				if(i==2) {
					
					GetString_SYS("KRIGRID","OUTVAR",sOutVar); 
					if(!iStrlen_STR(sOutVar)) {
						 DisplayMessage_SYS(_("Variogram Only"),_("The \"Name of output variogram file\" field is required"));
						 i = 1;  // send back to this dialog
						 continue;
					}
					iDone = 1;
				}
			}
			else
				Abort_SYS(_("I'm lost"));
		}
	}


	// --- Variogram only ? ---
	
	iVAO = 0;
	if (iInteractive_SYS())
	{
		if (i == 2) iVAO = 1;
	}
	else if (iExistInt_SYS("KRIGRID","VARONLY"))
		iVAO = iGetInt_SYS("KRIGRID","VARONLY");
	else
		iVAO = 0;
		
	
	// --- Get Non-control file Parameters ---

	GetString_SYS("KRIGRID","CHAN",sZCh); 
	GetString_SYS("KRIGRID","GRID",sGrid);
	GetString_SYS("KRIGRID","ERR",sErrGrd); 
	GetString_SYS("KRIGRID","INVAR",sInVar); 
	GetString_SYS("KRIGRID","OUTVAR",sOutVar); 
	GetString_SYS("KRIGRID","LOGFILE",sLogFile); 


	// --- Get current X, Y channels ---

	GetXYZChan_DB(Data, DB_CHAN_X, sXCh);
	GetXYZChan_DB(Data, DB_CHAN_Y, sYCh);


	// --- Validate parameters ---
	
	if (iStrlen_STR(sZCh) <=0)
		Abort_SYS(_("Z channel name is invalid"));

	if (!iExistSymb_DB(Data,sXCh,DB_SYMB_CHAN))
		Abort_SYS(_("The current X channel does not exist in database"));

	if (!iExistSymb_DB(Data,sYCh,DB_SYMB_CHAN))
		Abort_SYS(_("The current Y channel does not exist in database"));

	if (!iExistSymb_DB(Data,sZCh,DB_SYMB_CHAN))
		Abort_SYS(_("Z Channel does not exist in database"));


	// --- Get Control file parameters ---

	GetString_SYS("KRIGRID","CS",sCS);     
	GetString_SYS("KRIGRID","XY",sXY);     
	GetString_SYS("KRIGRID","LOGOPT",sLogOpt);     
	if (iStrcmp_STR(sLogOpt,_n("log-linear"),STR_CASE_TOLERANT)==0 ||
		 iStrcmp_STR(sLogOpt,_n("log, save as linear"),STR_CASE_TOLERANT)==0)
		Strcpy_STR(sLogOpt,"-1");
	else if (iStrcmp_STR(sLogOpt,_n("log-log"),STR_CASE_TOLERANT)==0 ||
				iStrcmp_STR(sLogOpt,_n("log, save as log"),STR_CASE_TOLERANT)==0)
		Strcpy_STR(sLogOpt,"1");
	else if (iStrcmp_STR(sLogOpt,"-2",STR_CASE_TOLERANT)!=0 &&
			iStrcmp_STR(sLogOpt,"-1",STR_CASE_TOLERANT)!=0 &&
			iStrcmp_STR(sLogOpt,"0",STR_CASE_TOLERANT)!=0 &&
			iStrcmp_STR(sLogOpt,"1",STR_CASE_TOLERANT)!=0 &&
			iStrcmp_STR(sLogOpt,"2",STR_CASE_TOLERANT)!=0)
		Strcpy_STR(sLogOpt,"0");
	GetString_SYS("KRIGRID","LOGMIN",sLogMin);     
	GetString_SYS("KRIGRID","DSF",sDSF);     
	GetString_SYS("KRIGRID","BKD",sBKD);     
	GetString_SYS("KRIGRID","RT",sRT);     
	if (iStrcmp_STR(sRT,_n("Yes"),0)==0 || !iStrcmp_STR(sAliasFlag,"1",STR_CASE_TOLERANT))
		Strcpy_STR(sRT,"1");
	else 
		Strcpy_STR(sRT,"0");

	GetString_SYS("KRIGRID","MODEL",sModel);
	if (iStrcmp_STR(sModel,_n("power"),0)==0)
		Strcpy_STR(sModel,"1");
	else if (iStrcmp_STR(sModel,_n("Gaussian"),0)==0)
		Strcpy_STR(sModel,"3");
	else if (iStrcmp_STR(sModel,_n("exponential"),0)==0)
		Strcpy_STR(sModel,"4");
	else if (iStrcmp_STR(sModel,_n("user-defined"),0)==0)
		Strcpy_STR(sModel,"0");
	else 
		Strcpy_STR(sModel,"2");

	GetString_SYS("KRIGRID","POWER",sPower);     
	GetString_SYS("KRIGRID","RS",sRS);     
	GetString_SYS("KRIGRID","NUG",sNug);     
	GetString_SYS("KRIGRID","SILL",sSill);     
	GetString_SYS("KRIGRID","STRIKE",sStrike);     
	GetString_SYS("KRIGRID","STRIKEWT",sStrikeWt);     


	// --- Validate parameters ---   

	if (iStrcmp_STR(sModel,"0",0)==0 && !iStrlen_STR(sInVar))  {
		Abort_SYS(_("Input Variogram must be provided for user-defined model")); 
	}   
	
	if(iVAO==0) {
		if (!iStrlen_STR(sGrid))
			Abort_SYS(_("New grid file name must be specified."));
	}

	
	// --- Write control file ---

	Strcpy_STR(sCtl, "_krigrid.con");
	WA_con=Create_WA(sCtl,0);

	Puts_WA(WA_con,sCS);
	NewLine_WA(WA_con);

	Puts_WA(WA_con,sXY);
	NewLine_WA(WA_con);

	Strcpy_STR(sText,",,,");
	Strcat_STR(sText,sLogOpt);
	Strcat_STR(sText,",");
	Strcat_STR(sText,sLogMin);
	Puts_WA(WA_con,sText);
	NewLine_WA(WA_con);
	
	Strcpy_STR(sText,sDSF);
	Strcat_STR(sText,",");
	Strcat_STR(sText,sBKD);
	Puts_WA(WA_con,sText);
	NewLine_WA(WA_con);
	
	Strcpy_STR(sText,sModel);
	Strcat_STR(sText,",");
	Strcat_STR(sText,sNug);
	Strcat_STR(sText,",");
	Strcat_STR(sText,sRS);
	Strcat_STR(sText,",");
	Strcat_STR(sText,sSill);
	Strcat_STR(sText,",");
	Strcat_STR(sText,sPower);
	Strcat_STR(sText,",");
	Strcat_STR(sText,",");
	Strcat_STR(sText,",");
	Strcat_STR(sText,sRT);
	Puts_WA(WA_con,sText);
	NewLine_WA(WA_con);

	Strcpy_STR(sText,sStrike);
	Strcat_STR(sText,",");
	Strcat_STR(sText,sStrikeWt);
	Puts_WA(WA_con,sText);

	Destroy_WA(WA_con);
	
	
	// --- Turn on Progress bar ---

	Progress_SYS(1);


	// --- Delete existing file ---
	
	if(iFileExist_SYS(sGrid))
	{
		if (iInteractive_SYS())
			iRemoveDocument_PROJ(sGrid);
		iDeleteGridFile_SYS(sGrid);
	}

	
	// --- Execute Krigrid program ---

	iRun3_KGRD(Data, sXCh, sYCh, sZCh, sCtl, sGrid, sErrGrd, sInVar, sOutVar, sLogFile, iVAO);


	// --- If variogram only, display the variogram to a new map ---

	if(iVAO && iInteractive) {

		
		// --- Create variogram map from variogram file name ---
		
		FileNamePart_STR(sOutVar, sName, STR_FILE_PART_NAME);
		Strcpy_STR(sVarMap, sName);
		Strcat_STR(sVarMap, "_variogram.map");
		
		
		// --- Delete existing variogram map ---
		
		if(iFileExist_SYS(sVarMap)) {
			if(iLoaded_EMAP(sVarMap)) UnLoad_EMAP(sVarMap);
			iDeleteFile_SYS(sVarMap);
		}


		// --- Create new map ---

		Map = Create_MAP(sVarMap, MAP_WRITENEW);
		

		// --- Create a Data view ---      
		
		MView = Create_MVIEW(Map, "Data", MVIEW_WRITENEW);    // Variogram GX needs a Data view to run      
		Destroy_MVIEW(MView);
		Destroy_MAP(Map);


		// --- Load the map ---

		EMap = Load_EMAP(sVarMap);

		// --- Run the variogram GX ---

		SetString_SYS("VARIOGRM","FILE",sOutVar);

		SetInteractive_SYS(0);
		iRunGX_SYS("variogrm.gx");
		SetInteractive_SYS(iInteractive);
		
		
		// --- Delete the empty "Data" view ---
		
		Map = Lock_EMAP(EMap);
		DeleteView_MAP(Map, "Data");
		UnLock_EMAP(EMap);

		if (iArcGIS)
		{
			Map = Lock_EMAP(EMap);
			SimpleMapDialog_GUI(Map, _("Variogram"), _("The_Variogram"));
			UnLock_EMAP(EMap);
		}
		else
		{
			// --- Resize to full map ---

			SetInteractive_SYS(0);
			iRunGX_SYS("reszmap.gx");
			SetInteractive_SYS(iInteractive);
		}
	}

	Progress_SYS(0);
	
	  
	// --- Add this grid to the current project ---
	
	if(iVAO==0 && iInteractive_SYS())
		iAddDocument_PROJ(sGrid,_n("Grid"),1);
	
	
	// --- Release the Database ---

	if(!iLocked)            // see note at top...
		UnLock_EDB(EData);      

}


//-----------------------------------------------------------------------
