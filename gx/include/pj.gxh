//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// 
// The PJ object is created from two IPJ objects,
// and is used for converting data in an OASIS database
// or map object from one map coordinate (projection)
// system to another.
// 
//
//-----------------------------------------------------------------------------------------------------------



#ifndef PJ_GXH_DEFINED
#define PJ_GXH_DEFINED

//===========================================================================================================
//
// Define	PJ_ELEVATION
//
// elevation correction method
//
// PJ_ELEVATION_NONE         elevation transform not supported.
// PJ_ELEVATION_GEOCENTRIC   
//                           elevation transformation uses earth-centre shift
//                           and is not accurate.
//                           
// PJ_ELEVATION_GEOID        
//                           elevation transformation uses a geoid model
//                           and is as accurate as the geoid data.
//                           
//
//===========================================================================================================

#define PJ_ELEVATION_NONE          0
#define PJ_ELEVATION_GEOCENTRIC    1
#define PJ_ELEVATION_GEOID         2


//===========================================================================================================
//
// Define	PJ_RECT
//
// Conversion direction
//
// PJ_RECT_XY2LL
// PJ_RECT_LL2XY
//
//===========================================================================================================

#define PJ_RECT_XY2LL    0
#define PJ_RECT_LL2XY    1


//-----------------------------------------------------------------------------------------------------------
// ClipPLY_PJ   Create a clip polygon from a projected area.
//
// Returns      Nothing
//
// Notes        
//              A rectangular area from (MinX, MinY) to (MaxX, MaxY)
//              is projected throught the PJ. The resulting (non-rectangular)
//              area is then digitized along its edges, then thinned to
//              remove near-collinear points. The thinning is done to any
//              point whose neighbors subtend an angle greater than
//              (180 degrees - maximum deviation).  (i.e. if max. dev = 0,
//              only co-linear points would be removed).
//              
//
// Available    5.0.0
//

[_public] void
ClipPLY_PJ (
            PJ,    // PJ to use
            real,  // Min X (or Longitude...)
            real,  // Min Y (or Latitude...)
            real,  // Max X
            real,  // Max Y
            real,  // Max deviation in degrees
            PLY    // PLY to be filled
            );


//-----------------------------------------------------------------------------------------------------------
// ConvertVV_PJ   Convert VVx/VVy from input projection to output projection.
//
// Returns        Nothing
//
// Notes          This function is equivalent to Project_VV.
//
// Available      5.0.0
//

[_public] void
ConvertVV_PJ (
              PJ,  // Projection
              VV,  // VVx
              VV   // VVy
              );


//-----------------------------------------------------------------------------------------------------------
// ConvertVV3_PJ   Convert VVx/VVy/VVz projections
//
// Returns         Nothing
//
// Notes           This function is equivalent to Project3D_VV.
//
// Available       5.0.0
//

[_public] void
ConvertVV3_PJ (
               PJ,  // Projection
               VV,  // VVx
               VV,  // VVy
               VV   // VVz
               );


//-----------------------------------------------------------------------------------------------------------
// ConvertXY_PJ   Convert X, Y from input projection to output projection.
//
// Returns        Nothing
//
// Available      5.0.0
//

[_public] void
ConvertXY_PJ (
              PJ,        // Projection
              var real,  // X  (or Longitude)
              var real   // Y  (or Latitude)
              );


//-----------------------------------------------------------------------------------------------------------
// ConvertXYFromXYZ_PJ   Convert X, Y from input projection to output projection, taking Z into account
//
// Returns               Nothing
//
// Notes                 
//                       This function is used (for instance) when projecting voxel model locations
//                       where the user expects that the vertical position will not change. The
//                       regular ConvertXYZ_PJ may result in shifts of hundreds, even a thousand
//                       meters in case where you are going from the geoid to an ellipsoid.
//                       The value of Z can have an important effect on the accuracy of the results, as
//                       the normal ConvertXY_PJ assumes a value of Z=0 internally and calls
//                       ConvertXYZ_PJ.
//                       
//
// Available             7.3.0
//

[_public] void
ConvertXYFromXYZ_PJ (
                     PJ,        // Projection
                     var real,  // X  (or Longitude)
                     var real,  // Y  (or Latitude)
                     real       // Z  (or Depth - unchanged)
                     );


//-----------------------------------------------------------------------------------------------------------
// ConvertXYZ_PJ   Convert X,Y,Z from input projection to output projection.
//
// Returns         Nothing
//
// Available       6.3.0
//

[_public] void
ConvertXYZ_PJ (
               PJ,        // Projection
               var real,  // X  (or Longitude)
               var real,  // Y  (or Latitude)
               var real   // Z  (or Depth)
               );


//-----------------------------------------------------------------------------------------------------------
// Create_PJ   This method creates a projection object.
//
// Returns     PJ Object
//
// Available   5.0.0
//

[_public] PJ
Create_PJ (
           string,  // Input PRJ file name, "" for geodetic
           string   // Ouput PRJ file name, "" for geodetic
           );


//-----------------------------------------------------------------------------------------------------------
// CreateIPJ_PJ   This method creates a projection object from IPJs.
//
// Returns        PJ Object
//
// Notes          
//                If converting to/from long/lat in the natural coordinate
//                system of the source/target, only the long/lat system
//                can be passed as (IPJ)0.
//                
//
// Available      5.0.0
//

[_public] PJ
CreateIPJ_PJ (
              IPJ,  // Input Projection, (IPJ)0 for long/lat
              IPJ   // Output Projection, (IPJ)0 for long/lat
              );


//-----------------------------------------------------------------------------------------------------------
// CreateRectified_PJ   Create a rectified PJ from lon,lat,rotation
//
// Returns              PJ Object
//
// Notes                
//                      Given an X,Y coordinate system, the lat/lon origin and
//                      angle of the coordinate system, this will create a PJ
//                      to convert between X,Y coordinates and Lon,Lat.
//                      The Lon/Lat is determined using a Transverse Mercator
//                      projection with central meridian through the center
//                      of the coordinates on a WGS 84 datum.
//                      
//
// Available            5.0.0
//

[_public] PJ
CreateRectified_PJ (
                    real,  // longitude  at (X,Y) origin
                    real,  // latitude   at (X,Y) origin
                    real,  // (X,Y) origin
                    real,
                    real,  // coordinate Y relative to geographic N (deg azm)
                    real,  // scale to convert X,Y to m.
                    int    // <define>PJ_RECT</define>
                    );


//-----------------------------------------------------------------------------------------------------------
// Destroy_PJ   This method destroys a projection object.
//
// Returns      Nothing
//
// Available    5.0.0
//

[_public] void
Destroy_PJ (
            PJ   // Projection to Destroy
            );


//-----------------------------------------------------------------------------------------------------------
// iElevation_PJ   Get elevation correction method
//
// Returns         <define>PJ_ELEVATION</define>
//
// Notes           
//                 To determine the model in use, refer to the datum_trf column in the
//                 user\csv\datumtrf.csv file.  The datum and geoid model are named in
//                 the sqare brackets following the transform name as follows:
//                 
//                 name [datum_model:geoid]
//                 
//                 The datum_model is the name of the datum transformation model which will
//                 be in a file with extension .ll2 in the \etc directory.  The geoid is the
//                 name of the geoid model which will be in a grid file with extension .grd
//                 in the \etc directory.  If the geoid model is missing, this method will
//                 return PJ_ELEVATION_NONE and elevation coordinates will not be changed.
//                 
//
// Available       5.1.0
//

[_public] int
iElevation_PJ (
               PJ   // Projection
               );


//-----------------------------------------------------------------------------------------------------------
// iIsInputLL_PJ   Is the input projection a lat/long.
//
// Returns         
//                 1 - Yes
//                 0 - No
//                 
//
// Available       5.0.0
//

[_public] int
iIsInputLL_PJ (
               PJ   // Projection
               );


//-----------------------------------------------------------------------------------------------------------
// iIsOutputLL_PJ   Is the output projection a lat/long.
//
// Returns          
//                  1 - Yes
//                  0 - No
//                  
//
// Available        5.0.0
//

[_public] int
iIsOutputLL_PJ (
                PJ   // Projection
                );


//-----------------------------------------------------------------------------------------------------------
// ProjectBoundingRectangle_PJ   Project a bounding rectangle.
//
// Returns                       Nothing
//
// Notes                         
//                               A rectangular area from (dMinX, dMinY) to (dMaxX, dMaxY)
//                               is projected throught the PJ. The resulting region area is
//                               then digitized along its edges and a new bounding rectangle
//                               is computed.  If there is a lot of curve through the
//                               projection the resulting bounding region may be slightly
//                               smaller than the true region.
//                               
//
// Available                     5.1.4
//

[_public] void
ProjectBoundingRectangle_PJ (
                             PJ,        // PJ to use
                             var real,  // Bounding Region Min X
                             var real,  // Bounding Region Min Y
                             var real,  // Bounding Region Max X
                             var real   // Bounding Region Max Y
                             );


//-----------------------------------------------------------------------------------------------------------
// ProjectBoundingRectangle2_PJ   Project a bounding rectangle with error tolerance.
//
// Returns                        Nothing
//
// Notes                          
//                                This is the same as ProjectBoundingRectangle_PJ except that the bounding
//                                rectangle will be limited to an area within which the projection can be
//                                performed to an accuracy better than the specified error tolerance.
//                                
//
// Available                      6.0.1
//

[_public] void
ProjectBoundingRectangle2_PJ (
                              PJ,        // PJ to use
                              var real,  // Bounding Region Min X
                              var real,  // Bounding Region Min Y
                              var real,  // Bounding Region Max X
                              var real,  // Bounding Region Max Y
                              real       // maximum allowable projection error if <= 0.0, will use 0.005% of smallest dimension
                              );


//-----------------------------------------------------------------------------------------------------------
// ProjectBoundingRectangleRes_PJ   Project a bounding rectangle with resolution.
//
// Returns                          Nothing
//
// Notes                            
//                                  This function behaves just like ProjBoundingRectangle_PJ
//                                  except that it also computes an approximate resolution
//                                  at the reprojected coordinate system from a given original
//                                  resolution.
//                                  
//
// Available                        5.1.8
//

[_public] void
ProjectBoundingRectangleRes_PJ (
                                PJ,        // PJ to use
                                var real,  // Bounding Region Min X
                                var real,  // Bounding Region Min Y
                                var real,  // Bounding Region Max X
                                var real,  // Bounding Region Max Y
                                var real   // Resolution
                                );


//-----------------------------------------------------------------------------------------------------------
// ProjectBoundingRectangleRes2_PJ   Project a bounding rectangle with resolution and error tolerance.
//
// Returns                           Nothing
//
// Notes                             
//                                   This is the same as ProjectBoundingRectangleRes_PJ except that the bounding
//                                   rectangle will be limited to an area within which the projection can be
//                                   performed to an accuracy better than the specified error tolerance.
//                                   
//
// Available                         6.0.1
//

[_public] void
ProjectBoundingRectangleRes2_PJ (
                                 PJ,        // PJ to use
                                 var real,  // Bounding Region Min X
                                 var real,  // Bounding Region Min Y
                                 var real,  // Bounding Region Max X
                                 var real,  // Bounding Region Max Y
                                 var real,  // Resolution
                                 real       // maximum allowable projection error if <= 0.0, will use 0.005% of smallest dimension
                                 );


//-----------------------------------------------------------------------------------------------------------
// ProjectLimitedBoundingRectangle_PJ   Project a bounding rectangle with limits.
//
// Returns                              Nothing
//
// Notes                                
//                                      The bounding rectangle will be limited to no larger
//                                      than the area specified in the output projection.  This
//                                      is useful when projecting from limits that are unreasonable
//                                      in the target projection.
//                                      
//
// See also                             ProjectBoundingRectangle_PJ.
//
// Available                            6.0.0
//

[_public] void
ProjectLimitedBoundingRectangle_PJ (
                                    PJ,        // PJ to use
                                    real,      // Output limited bounding region Min X
                                    real,      // Min Y
                                    real,      // Max X
                                    real,      // Max Y
                                    var real,  // Bounding Region Min X
                                    var real,  // Min Y
                                    var real,  // Max X
                                    var real   // Max Y
                                    );


//-----------------------------------------------------------------------------------------------------------
// SetupLDT_PJ   Setup the PJ with LDT check.
//
// Returns       Nothing
//
// Notes         
//               By default, a PJ on the same datum will not apply a LDT,
//               is intended for transformations between datums.  However,
//               in some instances you might want to convert between LDTs on
//               the same datum, such as when you have two sets of coordinates
//               that you KNOW came from WGS84 and were placed on this datum
//               using differnt LDT's.  If you want to combine such coordinate
//               systems, one or the other should be converted to the other's
//               LDT.  Note that a more logical way to do this would be to
//               convert both sets back to their original WGS84 coordinates
//               and combine in WGS84.
//               
//
// Available     6.2.0
//

[_public] void
SetupLDT_PJ (
             PJ   // Projection
             );





#endif

