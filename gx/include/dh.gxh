//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// This class is used for importing and interacting with Drill Hole
// data files. For detailed information on Drill Hole data,
// see the documentation for Wholeplot.
//
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
// Notes
//
// The DH class has some defines not used by any functions.
// <define>DH_DEFINE_PLAN</define>
// <define>DH_DEFINE_SECT</define>
//
//-----------------------------------------------------------------------------------------------------------



#ifndef DH_GXH_DEFINED
#define DH_GXH_DEFINED

//===========================================================================================================
//
// Define	DH_DEFAULT_FILENAMES
//
// Default filenames
//
// DH_DEFAULT_ROCKCODE_FILE
// DH_DEFAULT_STRUCTURECODE_FILE
//
//===========================================================================================================

#define DH_DEFAULT_ROCKCODE_FILE         "agso.csv"
#define DH_DEFAULT_STRUCTURECODE_FILE    "structcodes.csv"


//===========================================================================================================
//
// Define	STR_DH_HOLES
//
// This declares the size of the string used in various
// DH GXs to store all the currently selected holes, as input to the two-panel
// selection tool. This should be big enough for 65,000 16-character hole names!
//
// STR_DH_HOLES
//
//===========================================================================================================

#define STR_DH_HOLES    1048576


//===========================================================================================================
//
// Define	DH_COMP_CHOICE
//
// Composition
//
// DH_COMP_DONE      User is done
// DH_COMP_CANCEL    User canceled
// DH_COMP_SELECT    User chose to select an interval interactively
// DH_COMP_REFRESH   User chose to refresh
//
//===========================================================================================================

#define DH_COMP_DONE       0
#define DH_COMP_CANCEL     -1
#define DH_COMP_SELECT     1
#define DH_COMP_REFRESH    2


//===========================================================================================================
//
// Define	DH_COMPSTDB_HOLSEL
//
// Composite Hole Selection
//
// DH_COMPSTDB_HOLSEL_ALL
// DH_COMPSTDB_HOLSEL_SELECTED
//
//===========================================================================================================

#define DH_COMPSTDB_HOLSEL_ALL         0
#define DH_COMPSTDB_HOLSEL_SELECTED    1


//===========================================================================================================
//
// Define	DH_COMPSTDB_INTSEL
//
// Composite Interval
//
// DH_COMPSTDB_INTSEL_FIXED
// DH_COMPSTDB_INTSEL_LITHOLOGY
// DH_COMPSTDB_INTSEL_BESTFITLITH
// DH_COMPSTDB_INTSEL_INTFILE
//
//===========================================================================================================

#define DH_COMPSTDB_INTSEL_FIXED          0
#define DH_COMPSTDB_INTSEL_LITHOLOGY      1
#define DH_COMPSTDB_INTSEL_BESTFITLITH    2
#define DH_COMPSTDB_INTSEL_INTFILE        3


//===========================================================================================================
//
// Define	DH_DATA
//
// What to import
//
// DH_DATA_DIPAZIMUTH
// DH_DATA_EASTNORTH
// DH_DATA_FROMTO
// DH_DATA_POINT
// DH_DATA_COLLAR
// DH_DATA_UNKNOWN      The type is not known
//
//===========================================================================================================

#define DH_DATA_DIPAZIMUTH    0
#define DH_DATA_EASTNORTH     1
#define DH_DATA_FROMTO        2
#define DH_DATA_POINT         3
#define DH_DATA_COLLAR        4
#define DH_DATA_UNKNOWN       100


//===========================================================================================================
//
// Define	DH_DEFINE_PLAN
//
// Plans
//
// DH_DEFINE_PLAN
//
//===========================================================================================================

#define DH_DEFINE_PLAN    1


//===========================================================================================================
//
// Define	DH_DEFINE_SECT
//
// Types of Sections
//
// DH_DEFINE_SECT_NS
// DH_DEFINE_SECT_EW
// DH_DEFINE_SECT_ANGLED
//
//===========================================================================================================

#define DH_DEFINE_SECT_NS        1
#define DH_DEFINE_SECT_EW        2
#define DH_DEFINE_SECT_ANGLED    3


//===========================================================================================================
//
// Define	DH_EXP
//
// Type of Export
//
// DH_EXP_CSV
// DH_EXP_ASCII
// DH_EXP_ACCESS
// DH_EXP_SHP          Collars as points
// DH_EXP_SURPAC       To Surpace Geological database (special format ACCESS)
// DH_EXP_SHP_TRACES   Hole traces as polylines
//
//===========================================================================================================

#define DH_EXP_CSV           0
#define DH_EXP_ASCII         1
#define DH_EXP_ACCESS        2
#define DH_EXP_SHP           3
#define DH_EXP_SURPAC        4
#define DH_EXP_SHP_TRACES    5


//===========================================================================================================
//
// Define	DH_HOLES
//
// Holes to select
//
// DH_HOLES_ALL
// DH_HOLES_SELECTED
//
//===========================================================================================================

#define DH_HOLES_ALL         0
#define DH_HOLES_SELECTED    1


//===========================================================================================================
//
// Define	DH_MASK
//
// Masks
//
// DH_MASK_APPEND
// DH_MASK_NEW
//
//===========================================================================================================

#define DH_MASK_APPEND    0
#define DH_MASK_NEW       1


//===========================================================================================================
//
// Define	DH_PLOT
//
// Type of Plot
//
// DH_PLOT_PLAN
// DH_PLOT_SECTION
// DH_PLOT_STRIPLOG
// DH_PLOT_HOLE_TRACES
// DH_PLOT_3D
// DH_PLOT_SECTION_STACK
// DH_PLOT_SECTION_FENCE
// DH_PLOT_SECTION_CROOKED
//
//===========================================================================================================

#define DH_PLOT_PLAN               0
#define DH_PLOT_SECTION            1
#define DH_PLOT_STRIPLOG           2
#define DH_PLOT_HOLE_TRACES        3
#define DH_PLOT_3D                 4
#define DH_PLOT_SECTION_STACK      5
#define DH_PLOT_SECTION_FENCE      6
#define DH_PLOT_SECTION_CROOKED    7


//===========================================================================================================
//
// Define	DH_SECT_PAGE
//
// Sections
//
// DH_SECT_PAGE_SECTION
//
//===========================================================================================================

#define DH_SECT_PAGE_SECTION    1


//===========================================================================================================
//
// Define	DH_SURFACE
//
// Surface selection for creation of geological
// top or bottom surfaces.
//
// DH_SURFACE_FIRST_LAYER_FROM
// DH_SURFACE_FIRST_LAYER_TO
// DH_SURFACE_SECOND_LAYER_FROM
// DH_SURFACE_SECOND_LAYER_TO
// DH_SURFACE_LAST_LAYER_FROM
// DH_SURFACE_LAST_LAYER_TO
//
//===========================================================================================================

#define DH_SURFACE_FIRST_LAYER_FROM     0
#define DH_SURFACE_FIRST_LAYER_TO       1
#define DH_SURFACE_SECOND_LAYER_FROM    2
#define DH_SURFACE_SECOND_LAYER_TO      3
#define DH_SURFACE_LAST_LAYER_FROM      4
#define DH_SURFACE_LAST_LAYER_TO        5


//===========================================================================================================
//
// Define	DIP_CONVENTION
//
// Dip convention
//
// DIP_CONVENTION_NEGATIVE
// DIP_CONVENTION_POSITIVE
//
//===========================================================================================================

#define DIP_CONVENTION_NEGATIVE    -1
#define DIP_CONVENTION_POSITIVE    1


//-----------------------------------------------------------------------------------------------------------
// _hAssayDB_DH   Database for an assay data set.
//
// Returns        x - DB
//                <define>DB_NULL</define> if no assay data (no error registered)
//
// Notes          Works for both single and multiple DB Wholeplots.
//
// Available      5.1.3
//

[_extended] DB
_hAssayDB_DH (
              DH,   // hDH object
              int   // Assay dataset number
              );
#define hAssayDB_DH _hAssayDB_DH

//-----------------------------------------------------------------------------------------------------------
// _hAssaySymb_DH   Line/Group symbol for a specific assay data set hole.
//
// Returns          x - DB_SYMB
//                  NULLSYMB if no survey data for this hole (no error registered)
//
// Notes            Works for both single and multiple DB Wholeplots.
//
// Available        5.1.3
//

[_extended] DB_SYMB
_hAssaySymb_DH (
                DH,   // hDH object
                int,  // Assay dataset number
                int   // Hole index number
                );
#define hAssaySymb_DH _hAssaySymb_DH

//-----------------------------------------------------------------------------------------------------------
// _hCollarDB_DH   Database for the collar table.
//
// Returns         x - DB
//                 <define>DB_NULL</define> if no collar table (no error registered)
//
// Notes           Works for both single and multiple DB Wholeplots.
//
// Available       5.1.3
//

[_extended] DB
_hCollarDB_DH (
               DH   // hDH object
               );
#define hCollarDB_DH _hCollarDB_DH

//-----------------------------------------------------------------------------------------------------------
// _hCollarSymb_DH   Line/Group symbol for the collar table.
//
// Returns           x - DB_SYMB
//                   NULLSYMB if no collar table (no error registered)
//
// Notes             Works for both single and multiple DB Wholeplots.
//
// Available         5.1.3
//

[_extended] DB_SYMB
_hCollarSymb_DH (
                 DH   // hDH object
                 );
#define hCollarSymb_DH _hCollarSymb_DH

//-----------------------------------------------------------------------------------------------------------
// _hDipAzSurveyDB_DH   Database for the Dip-Azimuth survey data
//
// Returns              x - DB
//                      <define>DB_NULL</define> if no dip-azimuth survey data (no error registered)
//
// Notes                Works for both single and multiple DB Wholeplots.
//
// Available            5.1.3
//

[_extended] DB
_hDipAzSurveyDB_DH (
                    DH   // DH object
                    );
#define hDipAzSurveyDB_DH _hDipAzSurveyDB_DH

//-----------------------------------------------------------------------------------------------------------
// _hDipAzSurveySymb_DH   Line/Group symbol for a specific hole Dip-Azimuth survey.
//
// Returns                x - DB_SYMB
//                        NULLSYMB if no Dip-Azimuth survey data for this hole (no error registered)
//
// Notes                  Works for both single and multiple DB Wholeplots.
//
// Available              5.1.3
//

[_extended] DB_SYMB
_hDipAzSurveySymb_DH (
                      DH,   // hDH object
                      int   // Hole index number
                      );
#define hDipAzSurveySymb_DH _hDipAzSurveySymb_DH

//-----------------------------------------------------------------------------------------------------------
// _hENSurveyDB_DH   Database for the East-North survey data
//
// Returns           x - DB
//                   <define>DB_NULL</define> if no East-North survey data (no error registered)
//
// Notes             Works for both single and multiple DB Wholeplots.
//
// Available         5.1.3
//

[_extended] DB
_hENSurveyDB_DH (
                 DH   // DH object
                 );
#define hENSurveyDB_DH _hENSurveyDB_DH

//-----------------------------------------------------------------------------------------------------------
// _hENSurveySymb_DH   Line/Group symbol for a specific hole East-North survey.
//
// Returns             x - DB_SYMB
//                     NULLSYMB if no EN survey data for this hole (no error registered)
//
// Notes               Works for both single and multiple DB Wholeplots.
//
// Available           5.1.3
//

[_extended] DB_SYMB
_hENSurveySymb_DH (
                   DH,   // hDH object
                   int   // Hole index number
                   );
#define hENSurveySymb_DH _hENSurveySymb_DH

//-----------------------------------------------------------------------------------------------------------
// AddSurveyTable_DH   Add a survey table for a new hole.
//
// Returns             Nothing
//
// Notes               The information is created from the collar table info.
//                     If the survey info already exists, does nothing.
//
// Available           5.1.8
//

[_extended] void
AddSurveyTable_DH (
                   DH,   // DH handle
                   int   // Hole index
                   );


//-----------------------------------------------------------------------------------------------------------
// AssayHoleLST_DH   Populate an LST with holes in an assay database
//
// Returns           Nothing
//
// Available         6.3.0
//

[_extended] void
AssayHoleLST_DH (
                 DH,   // DH Handle
                 int,  // Index of the assay database
                 LST   // LST handle
                 );


//-----------------------------------------------------------------------------------------------------------
// AssayLST_DH   Return the LST of from-to and point assay datasets
//
// Returns       Nothing
//
// Notes         Assay dataset name is given as LST_ITEM_NAME
//               Assay dataset number is given as LST_ITEM_VALUE
//               Returns an empty LST if no datasets.
//
// Available     5.1.8
//

[_extended] void
AssayLST_DH (
             DH,   // DH object
             LST   // LST to be populated
             );


//-----------------------------------------------------------------------------------------------------------
// AutoSelectHoles_DH   Use automatic hole selection based on slice.
//
// Returns              Nothing
//
// Available            5.0.0
//

[_extended] void
AutoSelectHoles_DH (
                    int   // Turn on (TRUE) or off (FALSE)
                    );


//-----------------------------------------------------------------------------------------------------------
// Clean_DH   Delete extraneous holes from project databases.
//
// Returns    Nothing
//
// Notes      Removes from Project databases any lines not connected to
//            a line found in the collar table list.
//            If all the database lines would be removed, the database is
//            simply deleted.
//
// Available  5.1.2
//

[_extended] void
Clean_DH (
          DH   // DH handle
          );


//-----------------------------------------------------------------------------------------------------------
// CompositeDB_DH   Make a composite database
//
// Returns          Nothing
//
// Available        5.1.8
//

[_extended] void
CompositeDB_DH (
                DH,      // DH Object
                DB,      // Input assay DB object
                DB,      // Output composite DB object
                int,     // <define>DH_COMPSTDB_HOLSEL</define>
                int,     // <define>DH_COMPSTDB_INTSEL</define>
                real,    // Fixed interval length
                string,  // Name of lithology cannel
                string,  // Name of interval file
                string,  // Name of Weight channel
                real,    // dRej1Val for intervals short than, (GS_R8DM for no action)
                real,    // dRej2Val for intervals gap greater than, (GS_R8DM for no action)
                real,    // dRej3Val for Rej3Ch with Rej3Op, (GS_R8DM for no action)
                int,     // dRej3Op: 0: >, 1: >=, 2: <, 3: <=
                string   // Name of Rej3Ch channel
                );


//-----------------------------------------------------------------------------------------------------------
// ComputeHoleXYZ_DH   Computes XYZ for survey and assay data for a single hole.
//
// Returns             Nothing
//
// Available           7.3.0
//

[_extended] void
ComputeHoleXYZ_DH (
                   DH,   // DH handle
                   int   // Hole index
                   );


//-----------------------------------------------------------------------------------------------------------
// ComputeSelExtent_DH   Computes the extents for selected holes.
//
// Returns               Nothing
//
// Available             5.0.0
//

[_extended] void
ComputeSelExtent_DH (
                     DH,        // DH handle
                     var real,  // East Min
                     var real,  // East Max
                     var real,  // North Min
                     var real,  // North Max
                     var real,  // Elev Min
                     var real   // Elev Max
                     );


//-----------------------------------------------------------------------------------------------------------
// ComputeXYZ_DH   Computes XYZ for survey and assay data.
//
// Returns         Nothing
//
// Available       5.1.2
//

[_extended] void
ComputeXYZ_DH (
               DH   // DH handle
               );


//-----------------------------------------------------------------------------------------------------------
// ConvertOldLineNames_DH   Convert old "DD001.Assay" type lines to "DD001"
//
// Returns                  Nothing
//
// Notes                    The input LST must be filled using a function like SymbLST_DB, which
//                          puts the name and symbol into the LST items.
//                          Any names with a period are truncated at the period, and
//                          the line name in the database is changed to the new name
//                          (just the hole name).
//                          The LST is modified to have the new names.
//                          A value is put into the DB REG "DH_CONVERTED_NAMES" parameter so
//                          this process is done only once on a database.
//                          
//                          DO NOT use on old-style single-database Wholeplot projects.
//
// Available                6.3.0
//

[_extended] void
ConvertOldLineNames_DH (
                        DB,   // DH object
                        LST   // Names to convert (call SymbLST_DB).
                        );


//-----------------------------------------------------------------------------------------------------------
// Create_DH   Create DH.
//
// Returns     DH Object
//
// Available   5.0.0
//

[_extended] DH
Create_DH (
           string   // Name of current database
           );


//-----------------------------------------------------------------------------------------------------------
// CreateDefaultJob_DH   Create a default job from scratch.
//
// Returns               Nothing
//
// Available             5.1.2
//

[_extended] void
CreateDefaultJob_DH (
                     DH,      // DH object.
                     string,  // File name of the INI file to create (forces correct suffix)
                     int      // <define>DH_PLOT</define>
                     );


//-----------------------------------------------------------------------------------------------------------
// CreateExternal_DH   Create a DH from an external process (no montaj running).
//
// Returns             DH Object
//
// Notes               The regular Create_DH assumes a workspace is open and creates
//                     the project from the databases which are currently loaded.
//                     This function instead creates the project from all projects
//                     in the input databases's directory.
//
// Available           5.1.6
//

[_extended] DH
CreateExternal_DH (
                   string   // Name of example project database
                   );


//-----------------------------------------------------------------------------------------------------------
// Current_DH   Creates a drill project from current environment.
//
// Returns      DH Object
//
// Notes        If no DH database is open the Open DH Project GUI will be displayed which may be
//              cancelled by the user in which case the GX will terminate with cancel.
//
// Available    6.1.0
//

[_extended] DH
Current_DH (
            );


//-----------------------------------------------------------------------------------------------------------
// DatamineToCSV_DH   Convert a Datamine drillhole file to CSV files ready for import.
//
// Returns            Nothing
//
// Notes              Creates three CSV files and the accompanying template files
//                    ready for batch ASCII import into a drill project.
//                    Project_Collar.csv, .i3
//                    Project_Survey.csv, .i3
//                    Project_Assay.csv,  .i3
//
// Available          6.3.0
//

[_extended] void
DatamineToCSV_DH (
                  string,  // Datamine database file to import (*.dm)
                  string   // Drillhole project name
                  );


//-----------------------------------------------------------------------------------------------------------
// DeleteHoles_DH   Delete a list of holes from the project.
//
// Returns          Nothing
//
// Notes            Removes all lines in the input LST from DH project databases.
//                  If all the database lines would be removed, the database is
//                  simply deleted.
//
// Available        5.1.2
//

[_extended] void
DeleteHoles_DH (
                DH,   // DH handle
                LST   // LST of holes to delete
                );


//-----------------------------------------------------------------------------------------------------------
// Destroy_DH   Destroy a DH handle.
//
// Returns      Nothing
//
// Available    5.0.0
//

[_public] void
Destroy_DH (
            DH   // DH Handle
            );


//-----------------------------------------------------------------------------------------------------------
// Export_DH   Exports a Drill Hole database to an external file.
//
// Returns     Nothing
//
// Available   5.0.0
//

[_extended] void
Export_DH (
           DH,      // DH Handle
           string,  // File name
           int      // <define>DH_EXP</define>
           );


//-----------------------------------------------------------------------------------------------------------
// ExportGeodatabaseLST_DH   Exports whole or part of a Drill Hole database to an ArcGIS Geodatabase as feature class(es).
//
// Returns                   Nothing
//
// Notes                     A table with metadata about the created feature classes will be written to the Geodatabase. This table will have the same
//                           name with the postfix "_Metadata" attached
//
// Available                 7.1.0
//

[_extended] void
ExportGeodatabaseLST_DH (
                         DH,          // DH Handle
                         LST,         // Hole Names in the Name and Value parts of the LST
                         string,      // File name (.pdb folder for File Geodatabase or .sde connector for SDE)
                         string,      // String to prefix dataset names with
                         var string,  // Feature class name to export (pass empty for all or name of table, will contain the name of the output dataset for if a rename occurs)
                         int,         // Feature class name string size
                         int          // <define>GEO_BOOL</define> Overwrite existing feature classes? Pass GS_FALSE to create copies.
                         );

#define _ExportGeodatabaseLST_DH(A, B, C, D, E, F) ExportGeodatabaseLST_DH(A, B, C, D, E, sizeof(E), F)


//-----------------------------------------------------------------------------------------------------------
// ExportLAS_DH   Exports a Drill Hole database to a LAS v2 file.
//
// Returns        Nothing
//
// Available      5.1.8
//

[_extended] void
ExportLAS_DH (
              DH,      // DH Handle
              int,     // Assay database index
              int,     // Hole index
              real,    // Interval for output
              string   // File name
              );


//-----------------------------------------------------------------------------------------------------------
// ExportLST_DH   Exports a LST of holes in a Drill Hole database to an external file.
//
// Returns        Nothing
//
// Notes          Use functions like SelectedLineLST_DB to construct the LST
//
// Available      5.1.8
//

[_extended] void
ExportLST_DH (
              DH,      // DH Handle
              LST,     // Hole Names in the Name and Value parts of the LST
              string,  // File name
              int      // <define>DH_EXP</define>
              );


//-----------------------------------------------------------------------------------------------------------
// FlushSelect_DH   Flush all selections to database selection engine.
//
// Returns          Nothing
//
// Available        5.0.0
//

[_extended] void
FlushSelect_DH (
                DH   // Database
                );


//-----------------------------------------------------------------------------------------------------------
// GetDatabasesVV_DH   Get the names of the project databases in a VV.
//
// Returns             Nothing
//
// Available           5.1.2
//

[_extended] void
GetDatabasesVV_DH (
                   DH,  // DH object
                   VV   // VV of type -STR_FILE
                   );


//-----------------------------------------------------------------------------------------------------------
// GetDatabasesSortedVV_DH   Get the names of the project databases in a VV, same as GetDatabasesVV_DH but the list is sorted alphabetically.
//
// Returns                   Nothing
//
// Available                 8.2.0
//

[_extended] void
GetDatabasesSortedVV_DH (
                         DH,  // DH object
                         VV   // VV of type -STR_FILE
                         );


//-----------------------------------------------------------------------------------------------------------
// GetDataType_DH   Get the type of data in a Wholeplot database.
//
// Returns          Nothing
//
// Notes            Returns DH_DATA_UNKNOWN if it can't determine the type.
//
// Available        5.1.3
//

[_extended] void
GetDataType_DH (
                DH,       // DH Handle
                DB,       // DB Handle
                var int   // <define>DH_DATA</define>
                );


//-----------------------------------------------------------------------------------------------------------
// GetDefaultSection_DH   Computes default section azimuths, extents for selected holes.
//
// Returns                Nothing
//
// Available              5.0.0
//

[_extended] void
GetDefaultSection_DH (
                      DH,        // DH Object
                      var real,  // Azimuth of section (returned)
                      var real,  // Corner X (Easting) of section (returned)
                      var real,  // Corner Y (Northing) of section (returned)
                      var real,  // Section length (returned)
                      var real   // Section width (returned)
                      );


//-----------------------------------------------------------------------------------------------------------
// GetHoleGroup_DH   Get the Group symbol for this hole/table combination.
//
// Returns           Hole Symbol
//
// Available         5.0.0
//

[_extended] DB_SYMB
GetHoleGroup_DH (
                 DH,      // DH object
                 int,     // Hole index
                 string   // Table Name
                 );


//-----------------------------------------------------------------------------------------------------------
// GetHoleSurvey_DH   Get the Survey information of a Hole.
//
// Returns            Nothing
//
// Available          5.0.0
//

[_extended] void
GetHoleSurvey_DH (
                  DH,   // DH object
                  int,  // Hole index
                  VV,   // X
                  VV,   // Y
                  VV,   // Z
                  VV    // Depth
                  );


//-----------------------------------------------------------------------------------------------------------
// GetIPJ_DH   Get the project IPJ.
//
// Returns     Nothing
//
// Notes       The projection for the project is the projection stored
//             in the DH_EAST channel in the collar table.
//
// Available   5.1.8
//

[_extended] void
GetIPJ_DH (
           DH,   // DH Handle
           IPJ   // IPJ Handle
           );


//-----------------------------------------------------------------------------------------------------------
// GetMapNamesVV_DH   Get plotted map names.
//
// Returns            Nothing
//
// Notes              This will return the currently plotted map name(s)
//                    in a VV. This should only be called after a call
//                    to Wholeplot_DH. The VV size is set to the number
//                    of maps created.
//
// Available          5.1.8
//

[_extended] void
GetMapNamesVV_DH (
                  DH,  // DH object
                  VV   // Returned map names (string type VV)
                  );


//-----------------------------------------------------------------------------------------------------------
// GetMap_DH   Get a plotting map
//
// Returns     MAP Object
//
// Available   8.0.1
//

[_extended] MAP
GetMap_DH (
           DH,   // DH Handle
           int   // Map Index
           );


//-----------------------------------------------------------------------------------------------------------
// GetNumMaps_DH   Get the number plotting maps
//
// Returns         Number of plotting maps
//
// Available       8.0.1
//

[_extended] int
GetNumMaps_DH (
               DH   // DH Handle
               );


//-----------------------------------------------------------------------------------------------------------
// GetREG_DH   Get the REG Object used in this project.
//
// Returns     REG Object
//
// Available   5.0.0
//

[_extended] REG
GetREG_DH (
           DH   // DH Handle
           );


//-----------------------------------------------------------------------------------------------------------
// GetSelectedHolesVV_DH   Populate a VV with the indices of all selected holes
//
// Returns                 Nothing
//
// Available               8.0.0
//

[_extended] void
GetSelectedHolesVV_DH (
                       DH,  // DH Handle
                       VV   // Returned hole indices (must be type INT)
                       );


//-----------------------------------------------------------------------------------------------------------
// GetTableDefaultChanLST_DH   Return list of default channels by collar/assay/survey table type.
//
// Returns                     Nothing
//
// Notes                       Fills a LST with the default channel names created according to
//                             type (Collar, Survey, Assay). Value is in the LST_ITEM_NAME part.
//
// Available                   7.3.0
//

[_extended] void
GetTableDefaultChanLST_DH (
                           LST,  // LST handle
                           int   // <define>DH_DATA</define>
                           );


//-----------------------------------------------------------------------------------------------------------
// HoleLST_DH   Populate an LST with the list of the selected holes
//
// Returns      Nothing
//
// Available    5.0.0
//

[_extended] void
HoleLST_DH (
            DH,   // DH Handle
            LST   // LST handle
            );


//-----------------------------------------------------------------------------------------------------------
// HoleLST2_DH   Populate an LST with the list of all the holes
//
// Returns       Nothing
//
// Available     5.1.2
//

[_extended] void
HoleLST2_DH (
             DH,   // DH Handle
             LST   // LST handle
             );


//-----------------------------------------------------------------------------------------------------------
// iAddHole_DH   Add a hole and return it's index.
//
// Returns       x  - Hole index
//
// Available     5.0.0
//

[_extended] int
iAddHole_DH (
             DH,      // DH Handle
             string   // Name of hole
             );


//-----------------------------------------------------------------------------------------------------------
// iCleanWillDeleteDB_DH   See if "cleaning" will delete project databases.
//
// Returns                 1 if calling Clean_DH will remove all "lines" from
//                         one of the DH project databases.
//
// Available               5.1.2
//

[_extended] int
iCleanWillDeleteDB_DH (
                       DH   // DH handle
                       );


//-----------------------------------------------------------------------------------------------------------
// iCompositingToolGUI_DH   Annotate a strip log map using the compositing tool.
//
// Returns                  <define>DH_COMP_CHOICE</define>
//
// Notes                    If any of the input X or Y values are dummies the tool uses default values.
//
// Available                5.1.3
//

[_extended] int
iCompositingToolGUI_DH (
                        DH,    // DH Handle
                        MAP,   // Current strip log map
                        real,  // X location on map of selected strip
                        real,  // Y End of hole interval in view coords
                        real   // Y Other end of hole interval in view coords
                        );


//-----------------------------------------------------------------------------------------------------------
// ICreateCollarTable_DH   Create a collar table DB with channels set up.
//
// Returns                 Nothing
//
// Notes                   The database name will be of the form
//                         
//                         "d:\directory\Project_Collar.gdb"
//
// Available               5.1.6
//

[_extended] void
ICreateCollarTable_DH (
                       string,      // Project name
                       int,         // Number of channels
                       var string,  // Collar table name (returned)
                       int          // Buffer size for collar table name
                       );

#define CreateCollarTable_DH(A, B, C) ICreateCollarTable_DH(A, B, C, sizeof(C))


//-----------------------------------------------------------------------------------------------------------
// ICreateCollarTableDir_DH   Create a collar table in the specified directory.
//
// Returns                    Nothing
//
// Notes                      The database name will be of the form
//                            
//                            "d:\directory\Project_Collar.gdb"
//
// Available                  5.1.8
//

[_extended] void
ICreateCollarTableDir_DH (
                          string,      // Project name
                          string,      // Directory to create project in
                          int,         // Number of channels
                          var string,  // Collar table name (returned)
                          int          // Buffer size for collar table name
                          );

#define CreateCollarTableDir_DH(A, B, C, D) ICreateCollarTableDir_DH(A, B, C, D, sizeof(D))


//-----------------------------------------------------------------------------------------------------------
// iDeleteWillDeleteDB_DH   See if deleting holes will delete project databases.
//
// Returns                  1 if deleting the LST of holes will remove all "lines" from
//                          one of the DH project databases.
//
// Available                5.1.2
//

[_extended] int
iDeleteWillDeleteDB_DH (
                        DH,   // DH handle
                        LST   // LST of holes to delete
                        );


//-----------------------------------------------------------------------------------------------------------
// iFindHole_DH   Find a hole and return it's index.
//
// Returns        x  - Hole index
//                -1 - Not found
//
// Available      5.0.0
//

[_extended] int
iFindHole_DH (
              DH,      // DH Handle
              string   // Name of hole
              );


//-----------------------------------------------------------------------------------------------------------
// IGetCollarTableDB_DH   Get the name of the database containing the collar table.
//
// Returns                Nothing
//
// Available              5.1.2
//

[_extended] void
IGetCollarTableDB_DH (
                      DH,          // DH object
                      var string,  // Returned file name
                      int          // Buffer size for the file name
                      );

#define GetCollarTableDB_DH(A, B) IGetCollarTableDB_DH(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// IGetInfo_DH   Get Collar Information.
//
// Returns       Nothing
//
// Notes         If the DH_ELEV channel is requested it will also
//               search for the DH_RL channel, which is the new
//               name for the collar elevation.
//
// Available     5.0.0
//

[_extended] void
IGetInfo_DH (
             DH,          // DH Handle
             int,         // Hole index
             string,      // Name of information
             var string,  // Buffer to place information
             int          // Size of buffer
             );

#define GetInfo_DH(A, B, C, D) IGetInfo_DH(A, B, C, D, sizeof(D))


//-----------------------------------------------------------------------------------------------------------
// IGetProjectName_DH   Get the Wholeplot project name.
//
// Returns              Nothing
//
// Available            5.1.2
//

[_extended] void
IGetProjectName_DH (
                    DH,          // DH object
                    var string,  // Returned string
                    int          // Buffer size for the project name
                    );

#define GetProjectName_DH(A, B) IGetProjectName_DH(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// IGetSectionID_DH   Create a section ID based on its location
//
// Returns            Nothing
//
// Available          6.1.0
//

[_extended] void
IGetSectionID_DH (
                  real,        // Section Azimuth
                  real,        // Section Easting
                  real,        // Section Northing
                  var string,  // Section ID
                  int          // Section ID size
                  );

#define GetSectionID_DH(A, B, C, D) IGetSectionID_DH(A, B, C, D, sizeof(D))


//-----------------------------------------------------------------------------------------------------------
// iGetTemplateBlob_DH   Retrieve the import template from the database.
//
// Returns               0: No template stored in the database
//                       1: Template retrieved and written to a file.
//
// Notes                 The template can be retrieved in order to refresh the
//                       database with a call to the DHIMPORT.GX.
//                       
//                       The import types correspond to the DHIMPORT.IMPTYPE variable:
//                       0: ASCII, 1: Database/XLS, 2: ODBC
//                       
//                       If no template blob exists, templ
//
// Available             6.0.0
//

[_extended] int
iGetTemplateBlob_DH (
                     DB,       // DB Handle
                     string,   // Name of template file to extract to.
                     var int   // The stored import template type <define>DH_DATA</define>
                     );


//-----------------------------------------------------------------------------------------------------------
// IGetTemplateInfo_DH   Retrieve the file, DH Table name and type from an import template.
//
// Returns               Nothing
//
// Notes                 As of version 6.0, the import templates (*.i3, *.i4) produced
//                       by the Wholeplot import wizards contain the following lines:
//                       
//                       FILE assay.txt  (except for ODBC)
//                       DRILLTYPE 3
//                       DRILLTABLE Assay
//                       
//                       The FILE is normally the input file name, except for ODBC, where it
//                       is not defined.
//                       The DRILLTYPE is one of DH_DATA_XXX, and the DRILLTABLE
//                       is the name of the Wholeplot database table; e.g. Project_Assay.gdb
//                       in the above case. The DRILLTABLE is only included in the template
//                       for DH_DATA_FROMTO and DH_DATA_POINT, but this function will
//                       return the appropriate table names (e.g. Collar, Survey, ENSurvey)
//                       for the other types.
//                       If the DRILLTYPE is NOT found in the template, a value of
//                       DH_DATA_UNKNOWN is returned for the data type; likely an indication that this
//                       is not a new-style template produced by Wholeplot.
//
// Available             6.0.0
//

[_extended] void
IGetTemplateInfo_DH (
                     string,      // Template name
                     var int,     // <define>DH_DATA</define>
                     var string,  // File name (blank for ODBC, or undefined).
                     int,         // File name buffer size
                     var string,  // Table name (blank for DH_DATA_UNKNOWN, or undefined).
                     int          // Table name buffer size
                     );

#define GetTemplateInfo_DH(A, B, C, D) IGetTemplateInfo_DH(A, B, C, sizeof(C), D, sizeof(D))


//-----------------------------------------------------------------------------------------------------------
// IGetTemplateInfoEx_DH   Retrieve the file, DH Table name, type and channel list from an import template.
//
// Returns                 Nothing
//
// Notes                   As of version 6.0, the import templates (*.i3, *.i4) produced
//                         by the Wholeplot import wizards contain the following lines:
//                         
//                         FILE assay.txt  (except for ODBC)
//                         DRILLTYPE 3
//                         DRILLTABLE Assay
//                         
//                         The FILE is normally the input file name, except for ODBC, where it
//                         is not defined.
//                         The DRILLTYPE is one of DH_DATA_XXX, and the DRILLTABLE
//                         is the name of the Wholeplot database table; e.g. Project_Assay.gdb
//                         in the above case. The DRILLTABLE is only included in the template
//                         for DH_DATA_FROMTO and DH_DATA_POINT, but this function will
//                         return the appropriate table names (e.g. Collar, Survey, ENSurvey)
//                         for the other types.
//                         If the DRILLTYPE is NOT found in the template, a value of
//                         DH_DATA_UNKNOWN is returned for the data type; likely an indication that this
//                         is not a new-style template produced by Wholeplot.
//                         This version also returns a list of the channels in the template checks can be made to
//                         see if the import will exceed the database channel limit.
//
// Available               7.3.0
//

[_extended] void
IGetTemplateInfoEx_DH (
                       string,      // Template name
                       var int,     // <define>DH_DATA</define>
                       var string,  // File name (blank for ODBC, or undefined).
                       int,         // File name buffer size
                       var string,  // Table name (blank for DH_DATA_UNKNOWN, or undefined).
                       int,         // Table name buffer size
                       LST          // Channel list (returned)
                       );

#define GetTemplateInfoEx_DH(A, B, C, D, E) IGetTemplateInfoEx_DH(A, B, C, sizeof(C), D, sizeof(D), E)


//-----------------------------------------------------------------------------------------------------------
// IGetUnits_DH   Get the positional units and conversion factor to m.
//
// Returns        Nothing
//
// Available      5.0.0
//

[_extended] void
IGetUnits_DH (
              DH,          // DH Handle
              var string,  // Units (i.e. "m")
              int,         // Length of Units string
              var real     // Conversion (units/m)
              );

#define GetUnits_DH(A, B, C) IGetUnits_DH(A, B, sizeof(B), C)


//-----------------------------------------------------------------------------------------------------------
// iHaveCurrent_DH   Returns true if a drill project is loaded
//
// Returns           <define>GEO_BOOL</define>
//
// Available         6.1.0
//

[_extended] int
iHaveCurrent_DH (
                 );


//-----------------------------------------------------------------------------------------------------------
// IiHaveCurrent2_DH   Returns true if a drill project is loaded, and the collar database if it is loaded.
//
// Returns             <define>GEO_BOOL</define>
//
// Available           6.1.0
//

[_extended] int
IiHaveCurrent2_DH (
                   var string,  // Collar table name (returned)
                   int          // Buffer size for collar table name
                   );

#define iHaveCurrent2_DH(A) IiHaveCurrent2_DH(A, sizeof(A))


//-----------------------------------------------------------------------------------------------------------
// iHoles_DH   Return number of holes.
//
// Returns     x  - Number of holes
//
// Available   5.0.0
//

[_extended] int
iHoles_DH (
           DH   // DH Handle
           );


//-----------------------------------------------------------------------------------------------------------
// iHoleSelectFromListGUI_DH   Select/Deselect holes using the two-panel selection tool.
//
// Returns                     0  - Ok
//                             -1 - User Cancelled
//
// Available                   7.0.0
//

[_extended] int
iHoleSelectFromListGUI_DH (
                           LST,  // All holes
                           LST   // Selected holes
                           );


//-----------------------------------------------------------------------------------------------------------
// iHoleSelectionToolGUI_DH   Select/Deselect holes using plan map tool.
//
// Returns                    0  - Ok
//                            -1 - User Cancelled
//
// Available                  5.1.8
//

[_extended] int
iHoleSelectionToolGUI_DH (
                          DH   // DH Handle
                          );


//-----------------------------------------------------------------------------------------------------------
// iModify3dGUI_DH   Modify parameters for a 3D plot.
//
// Returns           0 - Ok
//                   -1 - User Cancelled
//
// Available         5.1.6
//

[_extended] int
iModify3dGUI_DH (
                 DH,       // DH Handle
                 string,   // Job Name   (*.in3)
                 var int   // Page to open GUI on
                 );


//-----------------------------------------------------------------------------------------------------------
// iEditClassificationTableFileGUI_DH   Edit a symbol color/pattern CSV file
//
// Returns                              0 - Ok
//                                      -1 - User Cancelled
//
// Available                            9.3.0
//

[_extended] int
iEditClassificationTableFileGUI_DH (
                                    DH,          // DH Handle
                                    string,      // Channel
                                    var string,  // CSV filename (in/out can be blank)
                                    int,         // CSV filename string size
                                    int,         // 0 - Collar Symbols
//                                               -1 - Rock Patterns
                                    int          // 0 - Symbols/patterns (2D)
//                                               -1 - Colors only (3D)
                                    );

#define _iEditClassificationTableFileGUI_DH(A, B, C, D, E) iEditClassificationTableFileGUI_DH(A, B, C, sizeof(C), D, E)


//-----------------------------------------------------------------------------------------------------------
// iModifyCrookedSectionHolesGUI_DH   Modify parameters to replot holes and hole data to an existing crooked section map.
//
// Returns                            0 - Ok
//                                    -1 - User Cancelled
//
// Notes                              Will plot to an empty crooked section.
//
// Available                          7.2.0
//

[_extended] int
iModifyCrookedSectionHolesGUI_DH (
                                  DH,       // DH Handle
                                  string,   // Job Name (*.ins)
                                  var int   // Tab page ID.
                                  );


//-----------------------------------------------------------------------------------------------------------
// iModifyFenceGUI_DH   Modify parameters for a section plot.
//
// Returns              0 - Ok
//                      1 - Interactively define a fence.
//                      -1 - User Cancelled
//
// Notes                The fence section function.
//
// Available            7.0.0
//

[_extended] int
iModifyFenceGUI_DH (
                    DH,       // DH Handle
                    string,   // Job Name (*.ins)
                    var int   // <define>DH_SECT_PAGE</define>
                    );


//-----------------------------------------------------------------------------------------------------------
// iModifyHoleTraces3DGUI_DH   Modify parameters for a hole traces plot to an existing 3D view.
//
// Returns                     0 - Ok
//                             -1 - User Cancelled
//
// Available                   6.1.0
//

[_extended] int
iModifyHoleTraces3DGUI_DH (
                           DH,       // DH Handle
                           string,   // Job Name
                           var int   // Page to open GUI on
                           );


//-----------------------------------------------------------------------------------------------------------
// iModifyHoleTracesGUI_DH   Modify parameters for a hole traces plot to a current map.
//
// Returns                   0 - Ok
//                           -1 - User Cancelled
//
// Available                 5.1.2
//

[_extended] int
iModifyHoleTracesGUI_DH (
                         DH,       // DH Handle
                         string,   // Job Name
                         var int   // Page to open GUI on
                         );


//-----------------------------------------------------------------------------------------------------------
// iModifyHoleTracesGUI2_DH   Modify parameters for a hole traces plot to a current plan or section view.
//
// Returns                    
//                            0 - Ok
//                            -1 - User Cancelled
//                            
//
// Notes                      Currently supports DH_PLOT_PLAN and DH_PLOT_SECTION
//
// Available                  8.3.0
//

[_extended] int
iModifyHoleTracesGUI2_DH (
                          DH,       // DH Handle
                          string,   // Job Name
                          int,      // <define>DH_PLOT</define> One of DH_PLOT_PLAN or DH_PLOT_SECTION
                          var int   // Page to open GUI on
                          );


//-----------------------------------------------------------------------------------------------------------
// iModifyPlanGUI_DH   Modify parameters for a plan plot.
//
// Returns             0 - Ok
//                     -1 - User Cancelled
//
// Available           5.1.2
//

[_extended] int
iModifyPlanGUI_DH (
                   DH,       // DH Handle
                   string,   // Job Name (*.inp)
                   var int   // <define>DH_SECT_PAGE</define>
                   );


//-----------------------------------------------------------------------------------------------------------
// iModifyPlanHolesGUI_DH   Modify parameters to replot holes and hole data to an existing plan map.
//
// Returns                  0 - Ok
//                          -1 - User Cancelled
//
// Notes                    Modifies only hole trace, hole data, topo, voxel slice data.
//
// Available                7.1.0
//

[_extended] int
iModifyPlanHolesGUI_DH (
                        DH,       // DH Handle
                        string,   // Job Name (*.ins)
                        var int   // Tab Page ID
                        );


//-----------------------------------------------------------------------------------------------------------
// iModifyRockCodesGUI_DH   Modify/create a rock codes file.
//
// Returns                  0 - Ok
//                          -1 - User Cancelled
//
// Available                5.1.2
//

[_extended] int
iModifyRockCodesGUI_DH (
                        string   // File name
                        );


//-----------------------------------------------------------------------------------------------------------
// iModifyRockCodesGUI2_DH   Modify/create a rock codes file, channel population option.
//
// Returns                   0 - Ok
//                           -1 - User Cancelled
//
// Notes                     Same as above, but passes the current database so that
//                           the "Populate from channel" button can be used to
//                           automatically populate the rock code list. The database
//                           should be a Wholeplot database.
//
// Available                 6.1.0
//

[_extended] int
iModifyRockCodesGUI2_DH (
                         DB,      // Database
                         string   // File name
                         );


//-----------------------------------------------------------------------------------------------------------
// iModifySectionGUI_DH   Modify parameters for a section plot.
//
// Returns                0 - Ok
//                        1 - Interactively define a NS section
//                        2 - Interactively define an EW section
//                        3 - Interactively define an angled section
//                        -1 - User Cancelled
//
// Notes                  The stacked section function uses the same control file
//                        format, but the plotting of profiles and plan views is
//                        disabled, and if multiple sections are requested, they
//                        are plotted in a stack on the left side of the same map,
//                        not to individual maps.
//
// Available              5.1.2
//

[_extended] int
iModifySectionGUI_DH (
                      DH,       // DH Handle
                      string,   // Job Name (*.ins)
                      var int   // <define>DH_SECT_PAGE</define>
                      );


//-----------------------------------------------------------------------------------------------------------
// iModifySectionHolesGUI_DH   Modify parameters to replot holes and hole data to an existing section map.
//
// Returns                     0 - Ok
//                             -1 - User Cancelled
//
// Notes                       Works for both regular and stacked sections.
//                             Modifies only hole trace, hole data, topo, voxel slice data.
//
// Available                   7.1.0
//

[_extended] int
iModifySectionHolesGUI_DH (
                           DH,       // DH Handle
                           string,   // Job Name (*.ins)
                           var int   // Tab page ID.
                           );


//-----------------------------------------------------------------------------------------------------------
// iModifyStackedSectionGUI_DH   Modify parameters for a section plot.
//
// Returns                       0 - Ok
//                               1 - Interactively define a NS section
//                               2 - Interactively define an EW section
//                               3 - Interactively define an angled section
//                               -1 - User Cancelled
//
// Notes                         The stacked section function uses the same control file
//                               format, but the plotting of profiles and plan views is
//                               disabled, and if multiple sections are requested, they
//                               are plotted in a stack on the left side of the same map,
//                               not to individual maps.
//
// Available                     5.1.8
//

[_extended] int
iModifyStackedSectionGUI_DH (
                             DH,       // DH Handle
                             string,   // Job Name (*.ins)
                             var int   // <define>DH_SECT_PAGE</define>
                             );


//-----------------------------------------------------------------------------------------------------------
// iModifyStripLogGUI_DH   Modify parameters for a strip log plot.
//
// Returns                 0 - Ok
//                         -1 - User Cancelled
//
// Available               5.1.3
//

[_extended] int
iModifyStripLogGUI_DH (
                       DH,       // DH Handle
                       string,   // Job Name   (*.inl)
                       var int   // <define>DH_SECT_PAGE</define>
                       );


//-----------------------------------------------------------------------------------------------------------
// iModifyStructureCodesGUI_DH   Modify/create a structure codes file.
//
// Returns                       0 - Ok
//                               -1 - User Cancelled
//
// Available                     6.1.0
//

[_extended] int
iModifyStructureCodesGUI_DH (
                             string   // File name
                             );


//-----------------------------------------------------------------------------------------------------------
// iModifyStructureCodesGUI2_DH   Modify/create a structure codes file, channel population option.
//
// Returns                        0 - Ok
//                                -1 - User Cancelled
//
// Notes                          Same as above, but passes the current database so that
//                                the "Populate from channel" button can be used to
//                                automatically populate the structure code list. The database
//                                should be a Wholeplot database.
//
// Available                      6.1.0
//

[_extended] int
iModifyStructureCodesGUI2_DH (
                              DB,      // Database
                              string   // File name
                              );


//-----------------------------------------------------------------------------------------------------------
// Import2_DH   Imports data into a Drill Hole Database (obsolete).
//
// Returns      Nothing
//
// Available    7.0.0
//

[_extended] void
Import2_DH (
            string,   // Drill project name
            DB,       // DB Handle
            DB_SYMB,  // Line
            DB_SYMB,  // Hole channel
            string,   // Table
            int,      // <define>DH_DATA</define>
            string    // Log file name
            );


//-----------------------------------------------------------------------------------------------------------
// ImportLAS_DH   Imports LAS Data into a DH database
//
// Returns        Nothing
//
// Notes          The argument for the assay database is the file name
//                without the project name and underscore, e.g. for
//                "Project_Assay.gdb" use "Assay"
//
// Available      6.0.1
//

[_extended] void
ImportLAS_DH (
              DH,      // DH Handle
              string,  // Assay database to use
              string,  // LAS file name
              real,    // Averaging/desampling interval (cm)
              int,     // Interpolation method
              WA       // Log file handle
              );


//-----------------------------------------------------------------------------------------------------------
// iNumAssays_DH   Number of assay datasets.
//
// Returns         The number of assay datasets.
//
// Notes           Works for both single and multiple DB Wholeplots.
//
// Available       5.1.3
//

[_extended] int
iNumAssays_DH (
               DH   // hDH object
               );


//-----------------------------------------------------------------------------------------------------------
// iNumSelectedHoles_DH   Returns number of selected holes.
//
// Returns                The number of selected holes
//
// Available              5.0.0
//

[_extended] int
iNumSelectedHoles_DH (
                      DH   // Database
                      );


//-----------------------------------------------------------------------------------------------------------
// iQADipAzCurvatureLST_DH   Do QA/QC Curvature checking on Dip Azimuth data for holes in a LST.
//
// Returns                   The number of holes found and checked.
//
// Notes                     Checks all holes with Dip-Azimuth survey data
//
// Available                 7.0.0
//

[_extended] int
iQADipAzCurvatureLST_DH (
                         DH,    // DH Handle
                         LST,   // LST of holes (name, index)
                         real,  // Dip/Azimuth curvature tolerance (degree per meter)
                         WA     // WA Handle to write to
                         );


//-----------------------------------------------------------------------------------------------------------
// iQADipAzSurveyLST_DH   Do QA/QC on Dip/Az Survey data for holes in a LST.
//
// Returns                The number of holes found and checked.
//
// Notes                  Error if no Dip-Azimuth survey database, or if
//                        a requested hole does not exist in the drill project.
//
// Available              7.0.0
//

[_extended] int
iQADipAzSurveyLST_DH (
                      DH,   // DH Handle
                      LST,  // LST of holes (Name, Index)
                      WA    // WA Handle to write to
                      );


//-----------------------------------------------------------------------------------------------------------
// iQAEastNorthCurvatureLST_DH   Do QA/QC Curvature checking on Dip Azimuth data for holes in a LST.
//
// Returns                       The number of holes found and checked.
//
// Notes                         Checks all holes with East-North survey data
//
// Available                     7.0.0
//

[_extended] int
iQAEastNorthCurvatureLST_DH (
                             DH,    // DH Handle
                             LST,   // LST of holes (name, index)
                             real,  // Dip/Azimuth curvature tolerance (degree per meter)
                             WA     // WA Handle
                             );


//-----------------------------------------------------------------------------------------------------------
// iQAEastNorthSurveyLST_DH   Do QA/QC on East/North Survey data for holes in a LST.
//
// Returns                    The number of holes found and checked.
//
// Notes                      Error if no East-North survey database, or if
//                            a requested hole does not exist in the drill project.
//
// Available                  7.0.0
//

[_extended] int
iQAEastNorthSurveyLST_DH (
                          DH,   // DH Handle
                          LST,  // LST of holes (Name, Index)
                          WA    // WA Handle to write to
                          );


//-----------------------------------------------------------------------------------------------------------
// iSliceSelectionToolGUI_DH   Select a slice with the holes in context. An optional 4 point area of interest (AOI) can be added to be represented in the UI too.
//
// Returns                     0  - Ok
//                             -1 - User Cancelled
//
// Available                   7.2.0
//

[_extended] int
iSliceSelectionToolGUI_DH (
                           DH,        // DH Handle
                           real,      // 1st Corner of AOI - X
                           real,      // 1st Corner of AOI - Y
                           real,      // 2nd Corner of AOI - X
                           real,      // 2nd Corner of AOI - Y
                           real,      // 3rd Corner of AOI - X
                           real,      // 3rd Corner of AOI - Y
                           real,      // 4th Corner of AOI - X
                           real,      // 4th Corner of AOI - Y
                           var real,  // Returned slice 1st point - X
                           var real,  // Returned slice 1st point - Y
                           var real,  // Returned slice 2nd point - X
                           var real   // Returned slice 2nd point - Y
                           );


//-----------------------------------------------------------------------------------------------------------
// iUpdateSurveyFromCollar_DH   Update the Survey table from the collar info.
//
// Returns                      0 - No change; there is no survey table, the table was empty, or values were same as collar
//                              1 - Survey table updated; values changed and there is just one row.
//                              2 - Survey table unchanged; there was more than one row in the table, and values were different
//
// Notes                        Call when the collar values are edited to update the survey table
//                              values. If the survey contains more than one row, then no changes
//                              are applied, and no warning or error is registered.
//
// Available                    7.1.0
//

[_extended] int
iUpdateSurveyFromCollar_DH (
                            DH,   // DH handle
                            int   // Hole index
                            );


//-----------------------------------------------------------------------------------------------------------
// LoadDataParametersINI_DH   Load data parameters from INI files..
//
// Returns                    Nothing
//
// Notes                      Wholeplot data graphing parameters for each channel are stored
//                            in the channel REG. This function lets a user transfer pre-defined
//                            settings to individual INI files (eg. cu.ini).
//
// Available                  6.0.0
//

[_extended] void
LoadDataParametersINI_DH (
                          DH,      // DH Object
                          DB,      // Source database
                          string   // Directory to store INI files
                          );


//-----------------------------------------------------------------------------------------------------------
// LoadPlotParameters_DH   Load parameters from a Job into the Drill object.
//
// Returns                 Nothing
//
// Available               6.0.0
//

[_extended] void
LoadPlotParameters_DH (
                       DH,      // DH object.
                       string,  // The job file file to read
                       int      // <define>DH_PLOT</define>
                       );


//-----------------------------------------------------------------------------------------------------------
// LoadSelect_DH   Load selections to from a file.
//
// Returns         Nothing
//
// Available       5.0.0
//

[_extended] void
LoadSelect_DH (
               DH,      // Database
               string   // File Name
               );


//-----------------------------------------------------------------------------------------------------------
// MaskPLY_DH   Set mask channel based on view selection polygon.
//
// Returns      Nothing
//
// Notes        Data values inside the polygon area, and within the slice thickness
//              have their mask channel values set to 1.
//              If the specified mask channel does not exist, it is created.
//              DH_MASK_NEW --- Mask is created new for each selected hole
//              DH_MASK_APPEND --- Current selection is added to previous.
//
// Available    5.1.3
//

[_extended] void
MaskPLY_DH (
            DH,      // DH Object
            PLY,     // Masking polygon
            IPJ,     // Projection from data to polygon coordinates
            real,    // Slice thickness - rDUMMY for no limiting thickness
            string,  // Name of mask channel
            int,     // <define>DH_HOLES</define>
            int      // <define>DH_MASK</define>
            );


//-----------------------------------------------------------------------------------------------------------
// Open_DH   Open DH from collar database and load all associated databases.
//
// Returns   DH Object
//
// Available 7.1.0
//

[_extended] DH
Open_DH (
         string   // Name of collar database
         );


//-----------------------------------------------------------------------------------------------------------
// OpenJob_DH   Open a DH plotting job
//
// Returns      Nothing
//
// Available    5.0.0
//

[_extended] void
OpenJob_DH (
            DH,      // DH object
            string,  // Job file name
            int      // <define>DH_PLOT</define>
            );


//-----------------------------------------------------------------------------------------------------------
// PlotHoleTraces_DH   Plot hole traces to a regular (plan) map.
//
// Returns             Nothing
//
// Notes               Both the hole traces and data can be plotted.
//                     The DHPLANHOLES GX uses the default plan map parameter file
//                     "_plan.inp".
//
// Available           5.1.2
//

[_extended] void
PlotHoleTraces_DH (
                   DH,      // DH handle
                   MAP,     // Map handle
                   string   // Parameter file (INI) name
                   );


//-----------------------------------------------------------------------------------------------------------
// PlotHoleTraces3D_DH   Plot hole traces to an existing 3D map view.
//
// Returns               Nothing
//
// Notes                 Both the hole traces and data can be plotted.
//                       The DH3DHOLES GX uses the default 3D map parameter file
//                       "_3D.in3".
//
// Available             6.1.0
//

[_extended] void
PlotHoleTraces3D_DH (
                     DH,      // DH handle
                     MVIEW,   // Existing 3D map view
                     string   // Parameter file (INI) name (normally *.in3)
                     );


//-----------------------------------------------------------------------------------------------------------
// PlotSymbols3D_DH   Plot 3D symbols to an existing 3D map view.
//
// Returns            Nothing
//
// Available          9.1.0
//

[_extended] void
PlotSymbols3D_DH (
                  DH,      // DH handle
                  MVIEW,   // Existing 3D map view
                  string   // Parameter file (INI) name (normally *.in3)
                  );


//-----------------------------------------------------------------------------------------------------------
// QACollar_DH   Do QA/QC on Hole Collar data.
//
// Returns       Nothing
//
// Available     5.1.3
//

[_extended] void
QACollar_DH (
             DH,  // DH Handle
             WA   // WA Handle
             );


//-----------------------------------------------------------------------------------------------------------
// QACollarLST_DH   Do QA/QC on Hole Collar data - LST of holes.
//
// Returns          Nothing
//
// Available        7.0.1
//

[_extended] void
QACollarLST_DH (
                DH,   // DH Handle
                LST,  // LST of holes (Name, Index)
                WA    // WA Handle
                );


//-----------------------------------------------------------------------------------------------------------
// QADipAzCurvature_DH   Do QA/QC Curvature checking on Dip Azimuth data.
//
// Returns               Nothing
//
// Notes                 Checks all holes with Dip-Azimuth survey data
//
// Available             5.1.3
//

[_extended] void
QADipAzCurvature_DH (
                     DH,    // DH Handle
                     WA,    // WA Handle
                     real   // Dip/Azimuth curvature tolerance (degree per meter)
                     );


//-----------------------------------------------------------------------------------------------------------
// QADipAzCurvature2_DH   Do QA/QC Curvature checking on Dip Azimuth data for a single hole.
//
// Returns                Nothing
//
// Notes                  Checks single hole with Dip-Azimuth survey data
//
// Available              6.4.2
//

[_extended] void
QADipAzCurvature2_DH (
                      DH,      // DH Handle
                      WA,      // WA Handle
                      real,    // Dip/Azimuth curvature tolerance (degree per meter)
                      string   // Hole name
                      );


//-----------------------------------------------------------------------------------------------------------
// QADipAzSurvey_DH   Do QA/QC on Dip/Az Survey data.
//
// Returns            Nothing
//
// Notes              Error if no Dip-Azimuth survey database, or if
//                    the requested line does not exist in the database.
//
// Available          5.1.3
//

[_extended] void
QADipAzSurvey_DH (
                  DH,       // DH Handle
                  DB,       // DB Handle
                  WA,       // WA Handle
                  DB_SYMB,  // Line
                  string    // Current hole Name
                  );


//-----------------------------------------------------------------------------------------------------------
// QAEastNorthCurvature_DH   Do QA/QC Curvature checking on Dip Azimuth data.
//
// Returns                   Nothing
//
// Notes                     Checks all holes with East-North survey data
//
// Available                 5.1.3
//

[_extended] void
QAEastNorthCurvature_DH (
                         DH,    // DH Handle
                         WA,    // WA Handle
                         real   // Dip/Azimuth curvature tolerance (degree per meter)
                         );


//-----------------------------------------------------------------------------------------------------------
// QAEastNorthCurvature2_DH   Do QA/QC Curvature checking on Dip Azimuth data for a single hole.
//
// Returns                    Nothing
//
// Notes                      Checks single holes with East-North survey data
//
// Available                  6.4.2
//

[_extended] void
QAEastNorthCurvature2_DH (
                          DH,      // DH Handle
                          WA,      // WA Handle
                          real,    // Dip/Azimuth curvature tolerance (degree per meter)
                          string   // Hole name
                          );


//-----------------------------------------------------------------------------------------------------------
// QAEastNorthSurvey_DH   Do QA/QC on East/North Survey data.
//
// Returns                Nothing
//
// Notes                  Error if no East-North survey database, or if
//                        the requested line does not exist in the database.
//
// Available              5.1.3
//

[_extended] void
QAEastNorthSurvey_DH (
                      DH,       // DH Handle
                      DB,       // DB Handle
                      WA,       // WA Handle
                      DB_SYMB,  // Line
                      string    // Current hole Name
                      );


//-----------------------------------------------------------------------------------------------------------
// QAFromToData_DH   Do QA/QC on From/To data.
//
// Returns           Nothing
//
// Available         5.1.3
//

[_extended] void
QAFromToData_DH (
                 DH,       // DH Handle
                 DB,       // DB Handle
                 WA,       // WA Handle
                 DB_SYMB,  // Line
                 string    // Current hole Name
                 );


//-----------------------------------------------------------------------------------------------------------
// QAPointData_DH   Do QA/QC on Point data.
//
// Returns          Nothing
//
// Available        5.1.3
//

[_extended] void
QAPointData_DH (
                DH,       // DH Handle
                DB,       // DB Handle
                WA,       // WA Handle
                DB_SYMB,  // Line
                string    // Current hole Name
                );


//-----------------------------------------------------------------------------------------------------------
// QAWriteUnregisteredHoles_DH   Write out unregistered holes in a database.
//
// Returns                       Nothing
//
// Notes                         Looks at each line in a database and sees if it is listed in
//                               the collar tables' hole list.
//
// Available                     6.1.0
//

[_extended] void
QAWriteUnregisteredHoles_DH (
                             DH,  // DH Handle
                             DB,  // DB Handle (not the collar table)
                             WA   // WA Handle
                             );


//-----------------------------------------------------------------------------------------------------------
// ReplotHoles_DH   Replot holes on an existing drill map.
//
// Returns          Nothing
//
// Notes            The parameter file must correspond to the plot Type.
//                  The hDH->hMAP value must be set first, using SetMAP_DH().
//                  Overwrites existing hole and hole data groups.
//                  Replots the legend if the legend is enabled.
//                  This should only be used on a slightly modified version of the
//                  INI file used to create the existing map, or things may not
//                  work out (e.g. bad locations etc).
//
// Available        7.1.0
//

[_extended] void
ReplotHoles_DH (
                DH,      // DH handle
                string,  // Parameter (INI) name
                int      // <define>DH_PLOT</define>
                );


//-----------------------------------------------------------------------------------------------------------
// PlotHolesOnSection_DH   Plot the currently selected holes on an existing section view.
//
// Returns                 Nothing
//
// Notes                   
//                         Plot the currently selected holes to a section view.
//                         
//
// Available               8.3.0
//

[_extended] void
PlotHolesOnSection_DH (
                       DH,      // DH handle
                       string,  // Parameter (INI) name
                       int,     // <define>DH_PLOT</define> Section plot type (DH_PLOT_SECTION or DH_PLOT_SECTION_CROOKED
                       string   // View name
                       );


//-----------------------------------------------------------------------------------------------------------
// ReSurveyEastNorth_DH   Resurvey an East-North-RL survey.
//
// Returns                Nothing
//
// Notes                  Re-interpolates in X, Y and Z to proper depth interval
//                        and returns depths for each point
//
// Available              5.1.3
//

[_extended] void
ReSurveyEastNorth_DH (
                      DH,        // DH object
                      string,    // Hole ID (for error messages)
                      VV,        // Input East
                      VV,        // Input North
                      VV,        // Input RL
                      VV,        // Returned depths down the hole
                      real,      // Input collar East
                      real,      // Input collar North
                      real,      // Input collar RL
                      real,      // Input top of hole depth
                      var real   // Returned bottom depth
                      );


//-----------------------------------------------------------------------------------------------------------
// ReSurveyPolFit_DH   Use the polynomial fit resurveying method.
//
// Returns             Nothing
//
// Notes               Uses the polynomial fit method to calculate (X, Y, Z)
//                     locations down the hole from azimuth, dip, depth values.
//                     The collar is assumed to be at zero depth, and depth is the
//                     measure distance down the hole (even if it's horizontal).
//                     A negative dip convention means vertical down is -90 degrees.
//                     The polynomial order must be in the range 1-20, with 5 being adequate
//                     for most smoothly curving holes. The order is reduced to no more than
//                     the number of input points.
//
// Available           5.1.2
//

[_extended] void
ReSurveyPolFit_DH (
                   DH,      // DH handle
                   string,  // Hole ID (used for error messages)
                   VV,      // Dip
                   VV,      // Azimuth
                   VV,      // Depth
                   real,    // Collar X (easting) (depth = 0)
                   real,    // Collar Y (northing)(depth = 0)
                   real,    // Collar Z (elevation) (depth = 0)
                   real,    // Minimum hole depth to start output values
                   real,    // Maximum hole depth for output values
                   real,    // Increment for output values
                   int,     // <define>DIP_CONVENTION</define>
                   int,     // Polynomial order
                   VV,      // X (Easting) - Output
                   VV,      // Y (Northin) - Output
                   VV,      // Z (Elevation) - Output
                   VV       // Depths - Output
                   );


//-----------------------------------------------------------------------------------------------------------
// ReSurveyRadCurve_DH   Use radius of curvature resurveying method.
//
// Returns               Nothing
//
// Notes                 Uses the Radius of curvature method to calculate (X, Y, Z)
//                       locations down the hole from azimuth, dip, depth values.
//                       The collar is assumed to be at zero depth, and depth is the
//                       measure distance down the hole (even if it's horizontal).
//                       A negative dip convention means vertical down is -90 degrees.
//
// Available             5.1.2
//

[_extended] void
ReSurveyRadCurve_DH (
                     DH,      // DH handle
                     string,  // Hole ID (used for error messages)
                     VV,      // Dip
                     VV,      // Azimuth
                     VV,      // Depth
                     real,    // Collar X (easting) (depth = 0)
                     real,    // Collar Y (northing)(depth = 0)
                     real,    // Collar Z (elevation) (depth = 0)
                     real,    // Minimum hole depth to start output values
                     real,    // Maximum hole depth for output values
                     real,    // Increment for output values
                     int,     // <define>DIP_CONVENTION</define>
                     VV,      // X (Easting) - Output
                     VV,      // Y (Northin) - Output
                     VV,      // Z (Elevation) - Output
                     VV       // Depths - Output
                     );


//-----------------------------------------------------------------------------------------------------------
// ReSurveyStraight_DH   Resurvey a straight hole.
//
// Returns               Nothing
//
// Notes                 Assumes a straight hole to calculate (X, Y, Z)
//                       locations down the hole from azimuth, dip, depth values.
//                       The collar is assumed to be at zero depth, and depth is the
//                       measure distance down the hole (even if it's horizontal).
//                       A negative dip convention means vertical down is -90 degrees.
//
// Available             5.1.2
//

[_extended] void
ReSurveyStraight_DH (
                     DH,      // DH handle
                     string,  // Hole ID (used for error messages)
                     real,    // Collar Dip
                     real,    // Collar Azimuth
                     real,    // Collar X (easting) (depth = 0)
                     real,    // Collar Y (northing)(depth = 0)
                     real,    // Collar Z (elevation) (depth = 0)
                     real,    // Minimum hole depth to start output values
                     real,    // Maximum hole depth for output values
                     real,    // Increment for output values
                     int,     // <define>DIP_CONVENTION</define>
                     VV,      // X (Easting) - Output
                     VV,      // Y (Northin) - Output
                     VV,      // Z (Elevation) - Output
                     VV       // Depths - Output
                     );


//-----------------------------------------------------------------------------------------------------------
// ReSurveyStraightSeg_DH   Resurvey a hole with straight segments between locations.
//
// Returns                  Nothing
//
// Notes                    Calculate (X, Y, Z) locations down the hole from azimuth, dip,
//                          depth values, assuming each segment is straight, and the hole
//                          bends at each successive azimuth, dip, depth value.
//                          The collar is assumed to be at zero depth, and depth is the
//                          measure distance down the hole (even if it's horizontal).
//                          A negative dip convention means vertical down is -90 degrees.
//
// Available                6.2.0
//

[_extended] void
ReSurveyStraightSeg_DH (
                        DH,      // DH handle
                        string,  // Hole ID (used for error messages)
                        VV,      // Dip
                        VV,      // Azimuth
                        VV,      // Depth
                        real,    // Collar X (easting) (depth = 0)
                        real,    // Collar Y (northing)(depth = 0)
                        real,    // Collar Z (elevation) (depth = 0)
                        real,    // Minimum hole depth to start output values
                        real,    // Maximum hole depth for output values
                        real,    // Increment for output values
                        int,     // <define>DIP_CONVENTION</define>
                        VV,      // X (Easting) - Output
                        VV,      // Y (Northin) - Output
                        VV,      // Z (Elevation) - Output
                        VV       // Depths - Output
                        );


//-----------------------------------------------------------------------------------------------------------
// SaveDataParametersINI_DH   Save data parameters to INI files..
//
// Returns                    Nothing
//
// Notes                      Wholeplot data graphing parameters for each channel are stored
//                            in the channel REG. This function lets a user transfer pre-defined
//                            settings to individual INI files (eg. cu.ini).
//                            As of v6.3, the DH object is NOT required for this function, and
//                            is, in fact, ignored.
//
// Available                  6.0.0
//

[_extended] void
SaveDataParametersINI_DH (
                          DH,      // DH Object   (ignored).
                          DB,      // Source database
                          string   // Directory to store INI files
                          );


//-----------------------------------------------------------------------------------------------------------
// SaveJob_DH   Save a DH plotting job
//
// Returns      Nothing
//
// Available    5.0.0
//

[_extended] void
SaveJob_DH (
            DH,      // DH object
            string,  // Job file name
            int      // <define>DH_PLOT</define>
            );


//-----------------------------------------------------------------------------------------------------------
// SaveSelect_DH   Saves current selections to a file.
//
// Returns         Nothing
//
// Available       5.0.0
//

[_extended] void
SaveSelect_DH (
               DH,      // Database
               string   // File Name
               );


//-----------------------------------------------------------------------------------------------------------
// SectionWindowSizeMM_DH   Deterine the size, in mm, of the section window
//
// Returns                  Nothing
//
// Notes                    Given the current selection of windows (e.g. legend, plan),
//                          paper size and orientation, return the size in mm of the
//                          window used for plotting the section.
//
// Available                6.0.0
//

[_extended] void
SectionWindowSizeMM_DH (
                        DH,        // DH Object
                        var real,  // X size in mm.
                        var real   // Y size in mm.
                        );


//-----------------------------------------------------------------------------------------------------------
// SelectAllHoles_DH   Select all the holes in a Drill hole project.
//
// Returns             Nothing
//
// Available           5.0.0
//

[_extended] void
SelectAllHoles_DH (
                   DH   // Database
                   );


//-----------------------------------------------------------------------------------------------------------
// SelectHoles_DH   Select holes by hole indices.
//
// Returns          Nothing
//
// Notes            Indices less than 0 are skipped. This lets you use this function
//                  after a call to FindItems_LST, which returns -1 for indices not located.
//
// Available        6.3.0
//

[_extended] void
SelectHoles_DH (
                DH,   // DH object
                VV,   // INT VV with hole indices.
                int   // 0 - deselect, 1 - select
                );


//-----------------------------------------------------------------------------------------------------------
// SelectName_DH   Select holes using a name mask.
//
// Returns         Nothing
//
// Notes           Overwrite mode - all selections tested and selected or not selected
//                 Append mode    - only holes matching the mask are selected or not selected.
//
// Available       5.0.0
//

[_extended] void
SelectName_DH (
               DH,      // DH object
               string,  // Mask
               int,     // 0 - deselect, 1 - select
               int      // 0 - overwrite, 1 - append
               );


//-----------------------------------------------------------------------------------------------------------
// SelectPLY_DH   Select all holes in PLY (Polygon) object.
//
// Returns        Nothing
//
// Notes          This function operates the same as the call:
//                
//                SelectPLY2_DH(Drill, 1, 0, 0);
//
// Available      5.0.0
//

[_extended] void
SelectPLY_DH (
              DH,   // Database
              PLY   // Polygon object
              );


//-----------------------------------------------------------------------------------------------------------
// SelectPLY2_DH   Select holes in PLY (Polygon) object with options.
//
// Returns         Nothing
//
// Notes           The various selection options give the following results:
//                 
//                 New/Select/inside: Unselect all holes, then
//                 select all holes inside the polygon.
//                 New/Select/outside: Unselect all holes, then
//                 select all holes outside the polygon.
//                 New/Deselect/inside: Select all holes, then
//                 deselect all holes inside the polygon.
//                 New/Deselect/outside: Select all holes, then
//                 deselect all holes outside the polygon.
//                 
//                 Append/Select/inside: Select all holes inside the polygon.
//                 Leave selections outside as is.
//                 Append/Select/outside: Select all holes outside the polygon.
//                 Leave selections inside as is.
//                 Append/Deselect/inside: Deselect all holes inside the polygon
//                 Leave selections outside as is.
//                 Append/Deselect/outside: Deselect all holes outside the polygon.
//                 Leave selections inside as is.
//
// Available       6.1.0
//

[_extended] void
SelectPLY2_DH (
               DH,   // Database
               PLY,  // Polygon object
               int,  // Select (0) or Deselect (1)
               int,  // Region (0: inside, 1: outside)
               int   // Mode (0: Append, 1: New)
               );


//-----------------------------------------------------------------------------------------------------------
// SetCrookedSectionIPJ_DH   Pass the Crooked projection required for plotting to a crooked section.
//
// Returns                   Nothing
//
// Notes                     This might be extracted from an existing crooked section view, or created from a database line.
//
// Available                 7.2.0
//

[_extended] void
SetCrookedSectionIPJ_DH (
                         DH,   // DH Object
                         IPJ   // Crooked Section IPJ
                         );


//-----------------------------------------------------------------------------------------------------------
// SetCurrentViewName_DH   Set the current map view name.
//
// Returns                 Nothing
//
// Notes                   Can be used to specify the name of the view to plot into.
//
// Available               7.2.0
//

[_extended] void
SetCurrentViewName_DH (
                       DH,      // DH Object
                       string   // View name
                       );


//-----------------------------------------------------------------------------------------------------------
// SetInfo_DH   Set Collar Information.
//
// Returns      Nothing
//
// Notes        If the DH_ELEV channel is requested it will also
//              search for the DH_RL channel, which is the new
//              name for the collar elevation.
//
// Available    5.0.0
//

[_extended] void
SetInfo_DH (
            DH,      // DH Handle
            int,     // Hole index
            string,  // Name of information
            string   // Information
            );


//-----------------------------------------------------------------------------------------------------------
// SetIPJ_DH   Set the project IPJ.
//
// Returns     Nothing
//
// Notes       The projection for the project is the projection stored
//             in the DH_EAST channel in the collar table. This
//             function sets the projection of the (DH_EAST, DH_NORTH)
//             channel pairs in each of the project databases to the
//             input IPJ.
//             The input IPJ cannot be a geographic coordinate system
//             or this call will fail with an error message.
//
// Available   5.1.8
//

[_extended] void
SetIPJ_DH (
           DH,   // DH Handle
           IPJ   // IPJ Handle
           );


//-----------------------------------------------------------------------------------------------------------
// SetMAP_DH   Store the current MAP to the DH object.
//
// Returns     Nothing
//
// Notes       Use this before calling the ReplotHoles functions,
//             so that, instead of creating a new map, the plotting
//             functions use the existing one.
//
// Available   7.1.0
//

[_extended] void
SetMAP_DH (
           DH,   // DH Handle
           MAP   // IPJ Handle
           );


//-----------------------------------------------------------------------------------------------------------
// SetNewIPJ_DH   Set a new project database projection to collar table projection.
//
// Returns        Nothing
//
// Notes          Gets the IPJ of the collar table current x channel and copies it
//                into the named database (as long as it is in the project!)
//
// Available      5.1.8
//

[_extended] void
SetNewIPJ_DH (
              DH,      // DH object
              string   // Project database name
              );


//-----------------------------------------------------------------------------------------------------------
// SetSelectedHolesVV_DH   Set hole selection using hole indices.
//
// Returns                 Nothing
//
// Available               8.0.0
//

[_extended] void
SetSelectedHolesVV_DH (
                       DH,   // DH Handle
                       VV,   // Input hole indices (must be type INT)
                       int   // 0 - overwrite, 1 - append
                       );


//-----------------------------------------------------------------------------------------------------------
// SetTemplateBlob_DH   Store the import template to the database.
//
// Returns              Nothing
//
// Notes                The template can later be retrieved in order to refresh the
//                      database with a call to the DHIMPORT.GX.
//                      
//                      The import types correspond to the DHIMPORT.IMPTYPE variable:
//                      0: ASCII, 1: Database/XLS, 2: ODBC
//
// Available            6.0.0
//

[_extended] void
SetTemplateBlob_DH (
                    DB,      // DB Handle
                    string,  // Import template name
                    int      // <define>DH_DATA</define>
                    );


//-----------------------------------------------------------------------------------------------------------
// SignificantIntersectionsDB_DH   Make a report of Significant Intersections
//
// Returns                         Nothing
//
// Available                       7.2.0
//

[_extended] void
SignificantIntersectionsDB_DH (
                               DH,      // DH Object
                               DB,      // Input assay DB object
                               DB,      // Output composite DB object
                               int,     // <define>DH_COMPSTDB_HOLSEL</define>
                               string,  // The primary assay channel.
                               real,    // Minimum Cut off grade for Primary Assay
                               real,    // Maximum Cut off grade for Primary Assay
                               real,    // Minimum Composite Length
                               real,    // Minimum Composite thickness
                               real,    // Maximum Internal Dilution
                               real,    // Minimum diluted grade
                               real     // Grade for Missing Assays
                               );


//-----------------------------------------------------------------------------------------------------------
// TestImportLAS_DH   Tests import of LAS Data for problems.
//
// Returns            Nothing
//
// Notes              See ImportLAS_DH.
//                    Determines if the import of the LAS data will result in data
//                    being overwritten, interpolated or resampled. Warnings are written to a log
//                    file, as in sImportLAS_DH. Warnings are not registered in cases
//                    where data is merely extended at the start or the end with dummies
//                    to match a different interval down the hole.
//
// Available          6.0.1
//

[_extended] void
TestImportLAS_DH (
                  DH,       // DH Handle
                  string,   // Assay table name
                  string,   // LAS file name
                  real,     // Averaging/desampling interval
                  WA,       // Log file handle
                  var int   // 1 returned if problems found
                  );


//-----------------------------------------------------------------------------------------------------------
// UnSelectAllHoles_DH   Unselect all the holes in a Drill hole project.
//
// Returns               Nothing
//
// Available             5.0.0
//

[_extended] void
UnSelectAllHoles_DH (
                     DH   // Database
                     );


//-----------------------------------------------------------------------------------------------------------
// UnSelectedHoleLST_DH   Populate an LST with the list of the unselected holes
//
// Returns                Nothing
//
// Available              6.3.0
//

[_extended] void
UnSelectedHoleLST_DH (
                      DH,   // DH Handle
                      LST   // LST handle
                      );


//-----------------------------------------------------------------------------------------------------------
// UpdateCollarTable_DH   Update all collar table information.
//
// Returns                Nothing
//
// Available              5.0.0
//

[_extended] void
UpdateCollarTable_DH (
                      DH   // DH handle
                      );


//-----------------------------------------------------------------------------------------------------------
// UpdateHoleExtent_DH   Update extents for one hole.
//
// Returns               Nothing
//
// Available             5.0.0
//

[_extended] void
UpdateHoleExtent_DH (
                     DH,   // DH handle
                     int   // Hole index
                     );


//-----------------------------------------------------------------------------------------------------------
// Wholeplot_DH   Run a Wholeplot plot job.
//
// Returns        Nothing
//
// Notes          The parameter file must correspond to the plot Type. The INI file
//                contains settings for all of the non-database data related
//                parameters (e.g. Map template, scale, boundaries,
//                section definitions, hole trace parameters etc...)
//
// Available      5.1.2
//

[_extended] void
Wholeplot_DH (
              DH,      // DH handle
              string,  // Parameter (INI) name
              int      // <define>DH_PLOT</define>
              );


//-----------------------------------------------------------------------------------------------------------
// SurfaceIntersections_DH   Determine intersections of drillholes with a surface.
//
// Returns                   Nothing
//
// Available                 8.3.0
//

[_extended] void
SurfaceIntersections_DH (
                         DH,      // DH Handle
                         DB,      // Output DB Handle
                         string,  // Input surface file
                         int      // Selected holes (1), All holes (0)
                         );




//===========================================================================================================
// Group ArcGIS Target Functions
//===========================================================================================================

//-----------------------------------------------------------------------------------------------------------
// iIsESRI_DH   Running inside ArcGIS?
//
// Returns      0 - if No
//              1 - if Yes
//
// Available    5.1.8
//

[_extended] int
iIsESRI_DH (
            );




//===========================================================================================================
// Group Data processing/conversion methods
//===========================================================================================================

//-----------------------------------------------------------------------------------------------------------
// CreatChanLST_DH   Fills a LST with available string and numeric channel code values.
//
// Returns           Nothing
//
// Notes             Channel codes are in the format "[Assay] Au", where the name in
//                   the square brackets is descriptive part of the project database
//                   containing the given channel name. The above code might refer to
//                   the "Au" channel in the "Tutorial_Assay.gdb" database.
//
// Available         5.1.8
//

[_extended] void
CreatChanLST_DH (
                 DH,   // DH Object
                 LST   // LST to fill with channel code values.
                 );


//-----------------------------------------------------------------------------------------------------------
// DepthDataLST_DH   Fills a LST with available channel code values from Depth databases.
//
// Returns           Nothing
//
// Notes             Channel codes are in the format "[Assay] Au", where the name in
//                   the square brackets is descriptive part of the project database
//                   containing the given channel name. The above code might refer to
//                   the "Au" channel in the "Tutorial_Assay.gdb" database.
//
// Available         6.4.0
//

[_extended] void
DepthDataLST_DH (
                 DH,   // DH Object
                 LST   // LST to fill with channel code values.
                 );


//-----------------------------------------------------------------------------------------------------------
// FromToDataLST_DH   Fills a LST with available string and numeric channel code values from From-To databases.
//
// Returns            Nothing
//
// Notes              Channel codes are in the format "[Assay] Au", where the name in
//                    the square brackets is descriptive part of the project database
//                    containing the given channel name. The above code might refer to
//                    the "Au" channel in the "Tutorial_Assay.gdb" database.
//
// Available          6.4.0
//

[_extended] void
FromToDataLST_DH (
                  DH,      // DH Object
                  string,  // Assay dataset ("" for all)
                  LST      // LST to fill with channel code values.
                  );


//-----------------------------------------------------------------------------------------------------------
// GetGeologyContacts_DH   Return XYZ locations of top or bottom geological surfaces
//
// Returns                 Nothing
//
// Notes                   For the input LST of holes, returns XYZ location of top or bottom
//                         contact with the input geology. Those selected holes which do NOT
//                         have contacts, return rDUMMY for the corresponding locations.
//
// Available               7.0.0
//

[_extended] void
GetGeologyContacts_DH (
                       DH,      // DH object
                       LST,     // LST of holes to check
                       string,  // Channel code
                       string,  // Geology item
                       int,     // <define>DH_SURFACE</define> Surface selection (top or bottom)
                       real,    // Max gap to skip when compositing (GS_R8DM for none)
                       VV,      // X locations of the contact
                       VV,      // Y locations of the contact
                       VV       // Z locations of the contact
                       );


//-----------------------------------------------------------------------------------------------------------
// GetOrientedCoreDipDir_DH   Converted alpha/beta values in oriented cores to dip/dip direction.
//
// Returns                    Nothing
//
// Notes                      The input data are the oriented core alpha and beta values, using either
//                            top or bottom reference. The values for each hole in the LST are converted
//                            to "absolute" dip and dip-direction values, using the resurveyed hole
//                            orientations at each depth.
//                            The alpha and beta data must be from the same database, and the output
//                            dip and dip/dir channels are written to the same database.
//
// Available                  6.4.0
//

[_extended] void
GetOrientedCoreDipDir_DH (
                          DH,      // DH Object
                          LST,     // List of holes to process (e.g. from HoleLST_DH)
                          string,  // Channel code for input alpha data
                          string,  // Channel code for input beta data
                          int,     // 1: Top of core reference 0: Bottom of core reference
                          string,  // Channel name for output dip data
                          string   // Channel name for output dip direction
                          );


//-----------------------------------------------------------------------------------------------------------
// GetUniqueChannelItems_DH   Return a VV with unique items in a channel.
//
// Returns                    Nothing
//
// Notes                      Finds and sorts all the unique non-dummy items for the selected channel.
//
// Available                  7.0.0
//

[_extended] void
GetUniqueChannelItems_DH (
                          DH,      // DH object
                          string,  // Channel code
                          int,     // Selected holes (1), All holes (0)
                          VV       // VV filled with items (converted to this VV type)
                          );


//-----------------------------------------------------------------------------------------------------------
// GetUniqueChannelItemsFromCollar_DH   Return a VV with unique items in a channel.
//
// Returns                              Nothing
//
// Notes                                Finds and sorts all the unique non-dummy items for the selected channel.
//
// Available                            7.3.0
//

[_extended] void
GetUniqueChannelItemsFromCollar_DH (
                                    DH,      // DH object
                                    string,  // Channel
                                    int,     // Selected holes (1), All holes (0)
                                    VV       // VV filled with items (converted to this VV type)
                                    );


//-----------------------------------------------------------------------------------------------------------
// iChanType_DH   Return the data type for a channel code.
//
// Returns        Channel data type
//
// Notes          Finds and sorts all the unique non-dummy items for the selected channel.
//
// Available      7.0.0
//

[_extended] int
iChanType_DH (
              DH,      // DH object
              string   // Channel code
              );


//-----------------------------------------------------------------------------------------------------------
// iFindHoleIntersection_DH   Return XYZ locations of the intersection of a hole with a DEM grid.
//
// Returns                    1 if intersection found
//                            0 if no intersection found
//
// Notes                      Input the hole index and an IMG object. Returns XYZ location
//                            of the hole intersection with the DEM. Interpolation inside the DEM
//                            uses the native IMG interp method. If no intersection is found the
//                            returned XYZ locations are rDUMMY.
//
// Available                  7.0.0
//

[_extended] int
iFindHoleIntersection_DH (
                          DH,        // DH object
                          int,       // Hole index
                          IMG,       // DEM Grid
                          var real,  // Returned X location
                          var real,  // Returned Y location
                          var real   // Returned Z location
                          );


//-----------------------------------------------------------------------------------------------------------
// IGetChanCodeInfo_DH   Return the assay database index and channel name from a channel code string.
//
// Returns               Nothing
//
// Notes                 The input channel code is in the form "[Assay] channel"
//
// Available             7.3.0
//

[_extended] void
IGetChanCodeInfo_DH (
                     DH,          // DH object
                     string,      // Input channel code "[Assay] channel"
                     var int,     // Returned assay database index
                     var string,  // Channel name
                     int          // Buffer size for channel name
                     );

#define GetChanCodeInfo_DH(A, B, C, D) IGetChanCodeInfo_DH(A, B, C, D, sizeof(D))


//-----------------------------------------------------------------------------------------------------------
// iGridIntersection_DH   Algorithm to determine the intersection of a straight hole with a surface (DEM) grid.
//
// Returns                1 if an intersection is found, 0 if not.
//
// Notes                  Given a point on the hole and the straight hole dip and azimuth,
//                        ocate (an) intersection point with the input DEM grid.
//
// Available              7.3.0
//

[_extended] int
iGridIntersection_DH (
                      DH,        // DH object
                      real,      // Input location on hole X
                      real,      // Input location on hole Y
                      real,      // Input location on hole Z
                      real,      // Dip (positive up) in degrees
                      real,      // Azimuth in degrees
                      string,    // DEM grid
                      var real,  // Returned intersection point X
                      var real,  // Returned intersection point Y
                      var real   // Returned intersection point Z
                      );


//-----------------------------------------------------------------------------------------------------------
// LithoGrid3D_DH   Create a lithology voxel grid with lith codes mapped to single values.
//
// Returns          Nothing
//
// Notes            Values in the input channel are assigned the index of the corresponding
//                  item found in the input TPAT.
//                  The compositing gap refers to the size of gaps in the data (either
//                  a blank lithology or missing from-to interval) which will be ignored
//                  when compositing lithologies into contiguous from-to intervals.
//                  The non-contact radius is used to dummy out the level grids around holes
//                  where the gridded lithology is not found. If not specified (dummy) then
//                  half the distance to the nearest contacting hole is used.
//
// Available        7.0.0
//

[_extended] void
LithoGrid3D_DH (
                DH,      // DH Object
                string,  // Lithology channel code
                TPAT,    // Codes, colors etc.
                string,  // Name of VOX Persistent Storage file
                real,    // Cell Size (GS_R8DM for automatic calculation)
                real,    // Max gap to skip when compositing (GS_R8DM for none)
                real,    // Non-contact radius.
                int,     // Gridding type (0: Rangrid, 1: TinGrid)
                REG,     // Rangrid control REG (see RGRD class for parameters)
                int      // Retain top/bottom grids?
                );


//-----------------------------------------------------------------------------------------------------------
// NumericChanLST_DH   Fills a LST with available numeric channel code values.
//
// Returns             Nothing
//
// Notes               Channel codes are in the format "[Assay] Au", where the name in
//                     the square brackets is descriptive part of the project database
//                     containing the given channel name. The above code might refer to
//                     the "Au" channel in the "Tutorial_Assay.gdb" database.
//
// Available           7.2.0
//

[_extended] void
NumericChanLST_DH (
                   DH,   // DH Object
                   LST   // LST to fill with channel code values.
                   );


//-----------------------------------------------------------------------------------------------------------
// NumericFromToDataLST_DH   Fills a LST with available numeric channel code values from From-To databases..
//
// Returns                   Nothing
//
// Notes                     Channel codes are in the format "[Assay] Au", where the name in
//                           the square brackets is descriptive part of the project database
//                           containing the given channel name. The above code might refer to
//                           the "Au" channel in the "Tutorial_Assay.gdb" database.
//
// Available                 7.2.0
//

[_extended] void
NumericFromToDataLST_DH (
                         DH,      // DH Object
                         string,  // Assay dataset ("" for all)
                         LST      // LST to fill with channel code values.
                         );


//-----------------------------------------------------------------------------------------------------------
// PunchGridHoles_DH   Dummy out locations in a grid around non-contact holes.
//
// Returns             Nothing
//
// Notes               Grid is dummied out to the blanking distance around holes where
//                     the input Z value is dummy. If a contacting hole is closer then
//                     twice the blanking distance, the blanking distance is reduced
//                     accordingly. Distances are measured horizontally (e.g. Z is ignored).
//                     If the blanking distance is zero or dummy, the distance is
//                     automatically set to half the distance to the closest hole intersection.
//
// Available           7.0.0
//

[_extended] void
PunchGridHoles_DH (
                   DH,    // DH object
                   IMG,   // DEM grid
                   VV,    // X locations of the contacts
                   VV,    // Y locations of the contacts
                   VV,    // Z locations of the contacts
                   real   // Blanking distance
                   );


//-----------------------------------------------------------------------------------------------------------
// StringChanLST_DH   Fills a LST with available string channel code values.
//
// Returns            Nothing
//
// Notes              Channel codes are in the format "[Assay] Au", where the name in
//                    the square brackets is descriptive part of the project database
//                    containing the given channel name. The above code might refer to
//                    the "Au" channel in the "Tutorial_Assay.gdb" database.
//
// Available          7.2.0
//

[_extended] void
StringChanLST_DH (
                  DH,   // DH Object
                  LST   // LST to fill with channel code values.
                  );


//-----------------------------------------------------------------------------------------------------------
// StringFromToDataLST_DH   Fills a LST with available string-type channel code values from From-To databases.
//
// Returns                  Nothing
//
// Notes                    Channel codes are in the format "[Geology] Lithology", where the name in
//                          the square brackets is descriptive part of the project database
//                          containing the given channel name. The above code might refer to
//                          the "Lithology" channel in the "Tutorial_Geology.gdb" database.
//
// Available                7.2.0
//

[_extended] void
StringFromToDataLST_DH (
                        DH,      // DH Object
                        string,  // Assay dataset ("" for all)
                        LST      // LST to fill with channel code values.
                        );





#endif

