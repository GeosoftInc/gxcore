//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// 
// The REG class is used for storing and retrieving named
// variables. Many classes contain REG objects for storing
// information particular to the class.  The META class supersedes
// the REG class and is gradually replacing the use of the
// REG class in newer applications.
// 
//
//-----------------------------------------------------------------------------------------------------------



#ifndef REG_GXH_DEFINED
#define REG_GXH_DEFINED


#define GetString_REG(A,B,C) Get_REG(A,B,C,sizeof(C))

//===========================================================================================================
//
// Define	REG_MERGE
//
// REG merge options
//
// REG_MERGE_REPLACE   Replace Values
// REG_MERGE_ADD       Only append values
//
//===========================================================================================================

#define REG_MERGE_REPLACE    0
#define REG_MERGE_ADD        1


//-----------------------------------------------------------------------------------------------------------
// Clear_REG   Clears all the parameters in a REG object
//
// Returns     Nothing
//
// Available   5.0.0
//

[_public] void
Clear_REG (
           REG   // REG object
           );


//-----------------------------------------------------------------------------------------------------------
// Copy_REG   Copy
//
// Returns    Nothing
//
// Available  5.0.0
//

[_public] void
Copy_REG (
          REG,  // destination
          REG   // source
          );


//-----------------------------------------------------------------------------------------------------------
// Create_REG   Create a handle to a REG object
//
// Returns      REG Object
//
// Available    5.0.0
//

[_public] REG
Create_REG (
            int   // maximum size of "parameter=setting" string.
            );


//-----------------------------------------------------------------------------------------------------------
// CreateS_REG   Create a handle to a REG object from a BF
//
// Returns       REG Object
//
// Available     5.0.0
//

[_public] REG
CreateS_REG (
             BF   // BF handle for file containing serialized REG
             );


//-----------------------------------------------------------------------------------------------------------
// Destroy_REG   Destroy a REG.
//
// Returns       Nothing
//
// Available     5.0.0
//

[_public] void
Destroy_REG (
             REG   // REG to destroy.
             );


//-----------------------------------------------------------------------------------------------------------
// Get_REG   Gets a string for a specified parameter in the REG object
//
// Returns   Nothing
//
// Available 5.0.0
//

[_public] void
Get_REG (
         REG,         // Handle to REG object (stores control parameters)
         string,      // Name of the parameter
         var string,  // String to get
         int          // Length of destination string
         );

#define _Get_REG(A, B, C) Get_REG(A, B, C, sizeof(C))


//-----------------------------------------------------------------------------------------------------------
// GetInt_REG   Gets an int for a specified parameter in the REG object
//
// Returns      Nothing
//
// Notes        If parameter is not present in REG, iDUMMY is returned.
//
// Available    5.0.0
//

[_public] void
GetInt_REG (
            REG,      // Handle to REG object (stores control parameters)
            string,   // Name of the parameter
            var int   // Int to get
            );


//-----------------------------------------------------------------------------------------------------------
// GetOne_REG   Gets n-th entry of the REG object
//
// Returns      Nothing
//
// Available    5.1.1
//

[_public] void
GetOne_REG (
            REG,         // Handle to REG object (stores control parameters)
            int,         // sequential number of REG entry
            var string,  // String to put parameter name
            int,         // Size of parameter String
            var string,  // String to put data into.
            int          // Size of Data String
            );

#define _GetOne_REG(A, B, C, D) GetOne_REG(A, B, C, sizeof(C), D, sizeof(D))


//-----------------------------------------------------------------------------------------------------------
// GetReal_REG   Gets an real for a specified parameter in the REG object
//
// Returns       Nothing
//
// Notes         If parameter is not present in REG, rDUMMY is returned.
//
// Available     5.0.0
//

[_public] void
GetReal_REG (
             REG,       // Handle to REG object (stores control parameters)
             string,    // Name of the parameter
             var real   // Real to get
             );


//-----------------------------------------------------------------------------------------------------------
// iEntries_REG   Get the number of parms in a REG object
//
// Returns        Number of parms in a REG object.
//
// Available      5.1.1
//

[_public] int
iEntries_REG (
              REG   // REG object
              );


//-----------------------------------------------------------------------------------------------------------
// LoadINI_REG   Load a registry from an INI file.
//
// Returns       Nothing
//
// Notes         Items are loaded into the REG in the format "GROUP.ITEM".
//
// Available     5.0.0
//

[_public] void
LoadINI_REG (
             REG,     // REG
             string   // INI file name
             );


//-----------------------------------------------------------------------------------------------------------
// MatchString_REG   Replace a string with reg settings.
//
// Returns           Nothing
//
// Available         5.0.0
//

[_public] void
MatchString_REG (
                 REG,         // Handle to REG object (stores control parameters)
                 string,      // String to Replace
                 var string,  // Output Buffer
                 int          // Size of the Output Buffer
                 );

#define _MatchString_REG(A, B, C) MatchString_REG(A, B, C, sizeof(C))


//-----------------------------------------------------------------------------------------------------------
// Merge_REG   Merge
//
// Returns     Nothing
//
// Available   5.0.0
//

[_public] void
Merge_REG (
           REG,  // destination
           REG,  // source
           int   // <define>REG_MERGE</define>
           );


//-----------------------------------------------------------------------------------------------------------
// SaveINI_REG   Save a REG to an INI file.
//
// Returns       Nothing
//
// Notes         
//               Only REG parameters in the form "GROUP.ITEM" are
//               dumped to the INI file, because they match the INI format
//               which groups items under [GROUP] headings.
//               Single-word items (without a separating period) are skipped.
//               
//
// Available     5.0.0
//

[_public] void
SaveINI_REG (
             REG,     // REG
             string   // INI file name
             );


//-----------------------------------------------------------------------------------------------------------
// Serial_REG   Serialize a REG object into a file.
//
// Returns      Nothing
//
// Available    5.0.0
//

[_public] void
Serial_REG (
            REG,  // REG object
            BF    // BF to serialize REG into
            );


//-----------------------------------------------------------------------------------------------------------
// Set_REG   Sets a string parameter in the REG object
//
// Returns   Nothing
//
// Notes     
//           To remove a parameter completely, use one of the
//           following:
//           
//           SetInt_REG(Reg, sParam, iDUMMY);
//           or
//           SetReal_REG(Reg, sParam, rDUMMY);
//           
//
// Available 5.0.0
//

[_public] void
Set_REG (
         REG,     // Handle to REG object (stores control parameters)
         string,  // Name of the parameter
         string   // String to set it to An empty string sets the setting to an empty string, but does NOT remove the parameter from the REG.
         );


//-----------------------------------------------------------------------------------------------------------
// SetInt_REG   Sets an int for a specified parameter in the REG object
//
// Returns      Nothing
//
// Available    5.0.0
//

[_public] void
SetInt_REG (
            REG,     // Handle to REG object (stores control parameters)
            string,  // Name of the parameter
            int      // Int to set, iDUMMY to remove the parameter
            );


//-----------------------------------------------------------------------------------------------------------
// SetReal_REG   Sets an real for a specified parameter in the REG object
//
// Returns       Nothing
//
// Available     5.0.0
//

[_public] void
SetReal_REG (
             REG,     // Handle to REG object (stores control parameters)
             string,  // Name of the parameter
             real     // Real to set, rDUMMY to remove the parameter
             );





#endif

