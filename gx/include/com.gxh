//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// This class is used to communicate with external serial devices. It allows the setting of timeouts.
//
//-----------------------------------------------------------------------------------------------------------



#ifndef COM_GXH_DEFINED
#define COM_GXH_DEFINED

//===========================================================================================================
//
// Define	COM_BAUD
//
// Connection Speed
//
// COM_BAUD_110
// COM_BAUD_300
// COM_BAUD_600
// COM_BAUD_1200
// COM_BAUD_2400
// COM_BAUD_4800
// COM_BAUD_9600
// COM_BAUD_14400
// COM_BAUD_19200
// COM_BAUD_56000
// COM_BAUD_57600
// COM_BAUD_115200
// COM_BAUD_128000
// COM_BAUD_256000
// COM_BAUD_38400
//
//===========================================================================================================

#define COM_BAUD_110       0
#define COM_BAUD_300       1
#define COM_BAUD_600       2
#define COM_BAUD_1200      3
#define COM_BAUD_2400      4
#define COM_BAUD_4800      5
#define COM_BAUD_9600      6
#define COM_BAUD_14400     7
#define COM_BAUD_19200     8
#define COM_BAUD_56000     9
#define COM_BAUD_57600     10
#define COM_BAUD_115200    11
#define COM_BAUD_128000    12
#define COM_BAUD_256000    13
#define COM_BAUD_38400     14


//===========================================================================================================
//
// Define	COM_DATASIZE
//
// Data Bits
//
// COM_DATASIZE_FIVE
// COM_DATASIZE_SIX
// COM_DATASIZE_SEVEN
// COM_DATASIZE_EIGHT
//
//===========================================================================================================

#define COM_DATASIZE_FIVE     5
#define COM_DATASIZE_SIX      6
#define COM_DATASIZE_SEVEN    7
#define COM_DATASIZE_EIGHT    8


//===========================================================================================================
//
// Define	COM_FLOWCONTROL
//
// Flow Control Options
//
// COM_FLOWCONTROL_NONE
// COM_FLOWCONTROL_RTS_CTS
// COM_FLOWCONTROL_DTR_DSR
// COM_FLOWCONTROL_XON_XOFF
//
//===========================================================================================================

#define COM_FLOWCONTROL_NONE        0
#define COM_FLOWCONTROL_RTS_CTS     1
#define COM_FLOWCONTROL_DTR_DSR     2
#define COM_FLOWCONTROL_XON_XOFF    3


//===========================================================================================================
//
// Define	COM_PARITY
//
// Parity
//
// COM_PARITY_EVEN
// COM_PARITY_NARK
// COM_PARITY_NONE
// COM_PARITY_ODD
// COM_PARITY_SPACE
//
//===========================================================================================================

#define COM_PARITY_EVEN     0
#define COM_PARITY_NARK     1
#define COM_PARITY_NONE     2
#define COM_PARITY_ODD      3
#define COM_PARITY_SPACE    4


//===========================================================================================================
//
// Define	COM_STOPBITS
//
// Stop Bits
//
// COM_STOPBITS_ONE
// COM_STOPBITS_ONE5
// COM_STOPBITS_TWO
//
//===========================================================================================================

#define COM_STOPBITS_ONE     0
#define COM_STOPBITS_ONE5    1
#define COM_STOPBITS_TWO     2


//-----------------------------------------------------------------------------------------------------------
// Create_COM   Create COM object.
//
// Returns      COM Object
//
// Available    5.0.0
//

[_licensed] COM
Create_COM (
            string,  // Port name to open ("COM1" is example)
            int,     // <define>COM_BAUD</define>
            int,     // <define>COM_DATASIZE</define>
            int,     // <define>COM_PARITY</define>
            int,     // <define>COM_STOPBITS</define>
            int,     // <define>COM_FLOWCONTROL</define>
            int      // Timeout in Ms (500)
            );


//-----------------------------------------------------------------------------------------------------------
// CreateNoTerminate_COM   Create COM object.
//
// Returns                 COM Object
//
// Available               6.0.0
//

[_licensed] COM
CreateNoTerminate_COM (
                       string,  // Port name to open ("COM1" is example)
                       int,     // <define>COM_BAUD</define>
                       int,     // <define>COM_DATASIZE</define>
                       int,     // <define>COM_PARITY</define>
                       int,     // <define>COM_STOPBITS</define>
                       int,     // <define>COM_FLOWCONTROL</define>
                       int      // Timeout in Ms (500)
                       );


//-----------------------------------------------------------------------------------------------------------
// Destroy_COM   Destroy COM handle.
//
// Returns       Nothing
//
// Available     5.0.0
//

[_public] void
Destroy_COM (
             COM   // COM handle
             );


//-----------------------------------------------------------------------------------------------------------
// IiReadLineNoTerminate_COM   Reads a Line from the COM
//
// Returns                     0 - if successful in reading a line
//                             1 - if an error was encountered
//
// Available                   6.0.1
//

[_licensed] int
IiReadLineNoTerminate_COM (
                           COM,         // COM handle
                           var string,  // String for line
                           int          // Length of Line to read, CT-LF is not stipped, NULL will be added so the Line length must be at least int+1.
                           );

#define iReadLineNoTerminate_COM(A, B) IiReadLineNoTerminate_COM(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// iReadCharsNoTerminate_COM   Reads characters from the COM, times out and does not terminate
//
// Returns                     0 - if successful
//                             1 - if time out or error
//
// Available                   6.0.1
//

[_licensed] int
iReadCharsNoTerminate_COM (
                           COM,         // COM handle
                           var string,  // String for characters
                           int          // Number of characters to read (string size must be +1) to silence all message reporting enter the negative value of the number of chars to read
                           );

#define _iReadCharsNoTerminate_COM(A, B) iReadCharsNoTerminate_COM(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// IReadLine_COM   Reads a Line from the COM
//
// Returns         Nothing
//
// Available       5.0.0
//

[_licensed] void
IReadLine_COM (
               COM,         // COM handle
               var string,  // String for line
               int          // Length of Line to read, NULL will be added so the Line length must be at least int+1.
               );

#define ReadLine_COM(A, B) IReadLine_COM(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// iWriteCharsNoTerminate_COM   Writes characters to the COM.  Does not terminate upon error
//
// Returns                      0 - if successful in writing a string
//                              1 - if time out or error was encountered
//
// Available                    6.0.1
//

[_licensed] int
iWriteCharsNoTerminate_COM (
                            COM,     // COM handle
                            string   // Line to write
                            );


//-----------------------------------------------------------------------------------------------------------
// PurgeComm_COM   Purges the input and output buffers.
//
// Returns         Nothing
//
// Available       5.1.8
//

[_licensed] void
PurgeComm_COM (
               COM   // Port
               );


//-----------------------------------------------------------------------------------------------------------
// ReadChars_COM   Reads characters from the COM
//
// Returns         Nothing
//
// Available       5.0.0
//

[_licensed] void
ReadChars_COM (
               COM,         // COM handle
               var string,  // String for characters
               int          // Number of characters to read (string size must be +1)
               );

#define _ReadChars_COM(A, B) ReadChars_COM(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// ReadEM61LinesWA_COM   Reads Lines from the COM to a WA: Geonics EM61 only
//
// Returns               Nothing
//
// Available             5.0.0
//

[_licensed] void
ReadEM61LinesWA_COM (
                     COM,  // COM handle
                     int,  // Number of lines
                     WA    // Where to put lines
                     );


//-----------------------------------------------------------------------------------------------------------
// ReadFile2WA_COM   Reads entire dataset from the COM to a WA
//
// Returns           Nothing
//
// Available         5.0.0
//

[_licensed] void
ReadFile2WA_COM (
                 COM,  // COM handle
                 WA    // Where to put lines
                 );


//-----------------------------------------------------------------------------------------------------------
// ReadLinesWA_COM   Reads Lines from the COM to a WA
//
// Returns           Nothing
//
// Available         5.0.0
//

[_licensed] void
ReadLinesWA_COM (
                 COM,  // COM handle
                 int,  // Number of lines
                 WA    // Where to put lines
                 );


//-----------------------------------------------------------------------------------------------------------
// SetTimeOut_COM   Set the timeout value.
//
// Returns          Nothing
//
// Available        5.0.0
//

[_licensed] void
SetTimeOut_COM (
                COM,  // COM handle
                int   // Timeout in Ms (500)
                );


//-----------------------------------------------------------------------------------------------------------
// WriteChars_COM   Writes characters to the COM
//
// Returns          Nothing
//
// Available        5.0.0
//

[_licensed] void
WriteChars_COM (
                COM,     // COM handle
                string   // Line to write
                );


//-----------------------------------------------------------------------------------------------------------
// WriteLine_COM   Writes a Line to the COM
//
// Returns         Nothing
//
// Available       5.0.0
//

[_licensed] void
WriteLine_COM (
               COM,     // COM handle
               string   // Line to write
               );





#endif

