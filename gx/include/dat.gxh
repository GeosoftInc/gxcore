//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// 
// The DAT object is used to access data from an variety of data sources
// using the same access functions. The DAT interface supports data access
// on a point-by-point, of line-by-line basis.  For example,
// the Run_BIGRID function uses 2 DAT objects - one DAT associated with the
// input data source, which is read line-by-line, and a second associated with
// the output grid file output grid file.
// 
// Use a specific DAT creation method for an associated
// information source in order to make a DAT as required
// by a specific processing function.  The gridding methods all use DATs.
// 
//
//-----------------------------------------------------------------------------------------------------------



#ifndef DAT_GXH_DEFINED
#define DAT_GXH_DEFINED

//===========================================================================================================
//
// Define	DAT_FILE
//
// Type of grid
//
// DAT_FILE_GRID
// DAT_FILE_IMAGE
//
//===========================================================================================================

#define DAT_FILE_GRID     1
#define DAT_FILE_IMAGE    2


//===========================================================================================================
//
// Define	DAT_FILE_FORM
//
// Type of form
//
// DAT_FILE_FORM_OPEN
// DAT_FILE_FORM_SAVE
//
//===========================================================================================================

#define DAT_FILE_FORM_OPEN    0
#define DAT_FILE_FORM_SAVE    1


//===========================================================================================================
//
// Define	DAT_XGD
//
// DAT Open modes
//
// DAT_XGD_READ
// DAT_XGD_NEW
// DAT_XGD_WRITE
//
//===========================================================================================================

#define DAT_XGD_READ     0
#define DAT_XGD_NEW      1
#define DAT_XGD_WRITE    2


//-----------------------------------------------------------------------------------------------------------
// CreateDB_DAT   Create a handle to a database DAT object
//
// Returns        DAT Object
//
// Available      5.0.0
//

[_public] DAT
CreateDB_DAT (
              DB,      // Handle to database which DAT is connected with
              string,  // Name of X channel in database
              string,  // Name of Y channel in database
              string   // Name of Z channel in database
              );


//-----------------------------------------------------------------------------------------------------------
// CreateXGD_DAT   Create a handle to a grid file DAT object
//
// Returns         DAT Object
//
// Available       5.0.0
//

[_public] DAT
CreateXGD_DAT (
               string,  // Name of grid file to associate DAT with
               int      // <define>DAT_XGD</define>
               );


//-----------------------------------------------------------------------------------------------------------
// Destroy_DAT   Destroy a DAT.
//
// Returns       Nothing
//
// Available     5.0.0
//

[_public] void
Destroy_DAT (
             DAT   // DAT to destroy.
             );


//-----------------------------------------------------------------------------------------------------------
// GetLST_DAT   Put available DAT filters and qualifiers in a LST
//
// Returns      Nothing
//
// Notes        
//              The filters displayed in the Grid/Image file browse dialog are put
//              in the "Name" of the LST, while the file qualifiers are stored in
//              the "Value".
//              
//
// Available    5.1.8
//

[_public] void
GetLST_DAT (
            LST,     // LST object to populate
            string,  // DAT interface name ("XGD" only support option currently)
            int,     // <define>DAT_FILE</define>
            int      // <define>DAT_FILE_FORM</define>
            );


//-----------------------------------------------------------------------------------------------------------
// RangeXYZ_DAT   Determine the range in X, Y and Z in the DAT source
//
// Returns        Nothing
//
// Notes          Terminates if unable to open an RPT DAT interface.
//
// Available      7.3.0
//

[_public] void
RangeXYZ_DAT (
              DAT,       // DAT object
              var real,  // Minimum X (rMAX if none)
              var real,  // Minimum Y (rMAX if none)
              var real,  // Minimum Z (rMAX if none)
              var real,  // Maximum X (rMIN if none)
              var real,  // Maximum Y (rMIN if none)
              var real,  // Maximum Z (rMIN if none)
              var int    // Number of non-dummy XYZ.
              );





#endif

