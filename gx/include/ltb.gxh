//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// 
// An LTB object is typically created from a CSV (comma-separated values)
// file, and is a table of information that may be accessed by row
// or column. The LTB class is recommended for use with small tables
// produced from short lists (of the order of 1000's or records) such
// as the different geographic projections and their defining parameters.
// Large tables, such as those required for table-lookup functions, should
// be accessed using the TB class.
// 
//
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
// Notes
//
// 
// An LTB ASCII table file has the following structure:
// 
// / comments
// key_name,col_1,col_2,col_3,etc...    /field names
// key_1,token,token,token,etc...       /data lines
// key_2,token,token,token,etc...
// etc...
// 
// The first column must be the key column (all entries unique).
// 
// The header line is optional and can be used to find entries.
// 
// Comment and empty lines are ignored.
// 
//
//-----------------------------------------------------------------------------------------------------------



#ifndef LTB_GXH_DEFINED
#define LTB_GXH_DEFINED


#define CreateCSV_LTB(A) Create_LTB(A,LTB_TYPE_HEADER,LTB_DELIM_COMMA,"")

//===========================================================================================================
//
// Define	LTB_CASE
//
// Case handling of LTB strings
//
// LTB_CASE_INSENSITIVE   Ignore case
// LTB_CASE_SENSITIVE     Case is used
//
//===========================================================================================================

#define LTB_CASE_INSENSITIVE    0
#define LTB_CASE_SENSITIVE      1


//===========================================================================================================
//
// Define	LTB_CONLST
//
// Matching types
//
// LTB_CONLST_EXACT
// LTB_CONLST_ANY
//
//===========================================================================================================

#define LTB_CONLST_EXACT    0
#define LTB_CONLST_ANY      1


//===========================================================================================================
//
// Define	LTB_DELIM
//
// Types of LTB Delimiters
//
// LTB_DELIM_SPACE        Spaces
// LTB_DELIM_COMMA        Commas
// LTB_DELIM_SPACECOMMA   Spaces and Commas
//
//===========================================================================================================

#define LTB_DELIM_SPACE         0
#define LTB_DELIM_COMMA         1
#define LTB_DELIM_SPACECOMMA    2


//===========================================================================================================
//
// Define	LTB_TYPE
//
// Types of LTB Headers
//
// LTB_TYPE_HEADER     Has a header
// LTB_TYPE_NOHEADER   Has no header
//
//===========================================================================================================

#define LTB_TYPE_HEADER      0
#define LTB_TYPE_NOHEADER    1


//-----------------------------------------------------------------------------------------------------------
// AddRecord_LTB   Add a new record.
//
// Returns         Nothing
//
// Notes           
//                 If the record exists, the existing record is cleared
//                 and the record number is returned.
//                 
//
// Available       5.0.0
//

[_public] void
AddRecord_LTB (
               LTB,      // LTB object
               string,   // Key name
               var int   // Returned record number
               );


//-----------------------------------------------------------------------------------------------------------
// Contract_LTB   Contract the contents of two same-key and same-fields tables.
//
// Returns        
//                x    - Handle to LTB object
//                NULL - Error of some kind
//                
//
// Notes          
//                The "Key" of the child must be the same as the "Key" of the Master.
//                The fields of two LTB must be the same.
//                
//                Contracting takes place as follows:
//                
//                1. The Master LTB is copied to the New LTB.
//                2. All records in the contract LIB are deleted from the New LTB (if there are any)
//                3. The New LTB is returned.
//                
//
// Available      5.1.0
//

[_public] LTB
Contract_LTB (
              LTB,  // Master LTB
              LTB   // Contract LTB
              );


//-----------------------------------------------------------------------------------------------------------
// Create_LTB   Creates a LTB object from a file.
//
// Returns      
//              x    - Handle to LTB object
//              NULL - Error of some kind
//              
//
// Notes        If the file has no header, field names are assumed to be "0", "1", etc.
//
// Available    5.0.0
//

[_public] LTB
Create_LTB (
            string,  // File name, .csv assumed, searched locally then in GEOSOFT.
            int,     // <define>LTB_TYPE</define>
            int,     // <define>LTB_DELIM</define>
            string   // Key to find if only one record required, "" to read entire table.
            );


//-----------------------------------------------------------------------------------------------------------
// CreateCrypt_LTB   Creates a LTB object from an encrypted file.
//
// Returns           
//                   x    - Handle to LTB object
//                   NULL - Error of some kind
//                   
//
// Notes             If the file has no header, field names are assumed to be "0", "1", etc.
//
// Available         6.2.0
//

[_public] LTB
CreateCrypt_LTB (
                 string,  // File name, .csv assumed, searched locally then in GEOSOFT.
                 int,     // <define>LTB_TYPE</define>
                 int,     // <define>LTB_DELIM</define>
                 int,     // <define>LTB_CASE</define>
                 string,  // Key to find if only one record required, "" to read entire table.
                 string   // Decryption Key <define>SYS_CRYPT_KEY</define>
                 );


//-----------------------------------------------------------------------------------------------------------
// CreateEx_LTB   Creates a LTB object from a file.
//
// Returns        
//                x    - Handle to LTB object
//                NULL - Error of some kind
//                
//
// Notes          If the file has no header, field names are assumed to be "0", "1", etc.
//
// Available      6.1.0
//

[_public] LTB
CreateEx_LTB (
              string,  // File name, .csv assumed, searched locally then in GEOSOFT.
              int,     // <define>LTB_TYPE</define>
              int,     // <define>LTB_DELIM</define>
              int,     // <define>LTB_CASE</define>
              string   // Key to find if only one record required, "" to read entire table.
              );


//-----------------------------------------------------------------------------------------------------------
// DeleteRecord_LTB   Delete a record.
//
// Returns            Nothing
//
// Notes              
//                    Record numbers after the deleted record will be reduced
//                    by 1.
//                    
//
// Available          5.0.0
//

[_public] void
DeleteRecord_LTB (
                  LTB,  // LTB object
                  int   // Record number to delete
                  );


//-----------------------------------------------------------------------------------------------------------
// Destroy_LTB   Destroy
//
// Returns       Nothing
//
// Available     5.0.0
//

[_public] void
Destroy_LTB (
             LTB   // LTB object to destroy
             );


//-----------------------------------------------------------------------------------------------------------
// GetConLST_LTB   Populate a LST with LTB names from matching fields.
//
// Returns         Nothing
//
// Notes           
//                 The LST object will be in the order of the file.
//                 The LST names will be the LTB key fields and the
//                 LST values will be the LTB record numbers.
//                 
//
// Available       5.0.0
//

[_public] void
GetConLST_LTB (
               LTB,     // LTB object
               int,     // Field
               string,  // String to match to field, must be lower-case
               int,     // <define>LTB_CONLST</define>
               LST      // List to populate
               );


//-----------------------------------------------------------------------------------------------------------
// GetLST_LTB   Populate an LST with LTB names
//
// Returns      Nothing
//
// Notes        
//              The LST object will be in the order of the file.
//              The LST names will be the LTB fields and the
//              LST values will be the LTB record numbers.
//              
//
// Available    5.0.0
//

[_public] void
GetLST_LTB (
            LTB,  // LTB object
            int,  // Field to get, 0 for key field
            LST   // List to populate
            );


//-----------------------------------------------------------------------------------------------------------
// GetLST2_LTB   Populate an LST with LTB names and values
//
// Returns       Nothing
//
// Notes         
//               The LST object will be in the order of the file.
//               The LST names will come from the LTB name field and the
//               LST values will come from value field specified.
//               
//
// Available     5.0.0
//

[_public] void
GetLST2_LTB (
             LTB,  // LTB object
             int,  // Field for names, 0 for key field
             int,  // Field for values, 0 for key field
             LST   // List to populate
             );


//-----------------------------------------------------------------------------------------------------------
// iFields_LTB   Get number of fields.
//
// Returns       Number of fields in the LTB.
//
// Available     5.0.0
//

[_public] int
iFields_LTB (
             LTB   // LTB object
             );


//-----------------------------------------------------------------------------------------------------------
// iFindField_LTB   Return the field number for the specified field.
//
// Returns          
//                  -1 if field does not exist.
//                  field number if field does exist.
//                  
//
// Available        5.0.0
//

[_public] int
iFindField_LTB (
                LTB,     // LTB object
                string   // Field name
                );


//-----------------------------------------------------------------------------------------------------------
// iFindKey_LTB   Return the key index of a record.
//
// Returns        
//                -1 if key does not exist.
//                record number if key does exist.
//                
//
// Available      5.0.0
//

[_public] int
iFindKey_LTB (
              LTB,     // LTB object
              string   // Key name
              );


//-----------------------------------------------------------------------------------------------------------
// IGetField_LTB   Get a field name by index.
//
// Returns         Nothing
//
// Notes           If the record or field are out of range, an empty string is returned.
//
// Available       5.0.0
//

[_public] void
IGetField_LTB (
               LTB,         // LTB object
               int,         // Field number
               var string,  // Returned field name
               int          // Maximum field name string length
               );

#define GetField_LTB(A, B, C) IGetField_LTB(A, B, C, sizeof(C))


//-----------------------------------------------------------------------------------------------------------
// iGetInt_LTB   Get a int entry from the LTB
//
// Returns       
//               If the record or field are out of range,
//               an empty string or dummy value is returned.
//               
//
// Available     5.0.0
//

[_public] int
iGetInt_LTB (
             LTB,  // LTB object
             int,  // Record number
             int   // Field number
             );


//-----------------------------------------------------------------------------------------------------------
// IGetString_LTB   Get an entry from the LTB
//
// Returns          Nothing
//
// Notes            
//                  If the record or field are out of range,
//                  an empty string or dummy value is returned.
//                  
//
// Available        5.0.0
//

[_public] void
IGetString_LTB (
                LTB,         // LTB object
                int,         // Record number
                int,         // Field number
                var string,  // Returned field token
                int          // Maximum field token string length
                );

#define GetString_LTB(A, B, C, D) IGetString_LTB(A, B, C, D, sizeof(D))


//-----------------------------------------------------------------------------------------------------------
// IGetEnglishString_LTB   Get the English entry from the LTB
//
// Returns                 Nothing
//
// Notes                   
//                         If the record or field are out of range,
//                         an empty string or dummy value is returned.
//                         
//
// Available               8.2.0
//

[_public] void
IGetEnglishString_LTB (
                       LTB,         // LTB object
                       int,         // Record number
                       int,         // Field number
                       var string,  // Returned field token
                       int          // Maximum field token string length
                       );

#define GetEnglishString_LTB(A, B, C, D) IGetEnglishString_LTB(A, B, C, D, sizeof(D))


//-----------------------------------------------------------------------------------------------------------
// iRecords_LTB   Get number of records in LTB.
//
// Returns        Number of records in the LTB.
//
// Available      5.0.0
//

[_public] int
iRecords_LTB (
              LTB   // LTB object
              );


//-----------------------------------------------------------------------------------------------------------
// iSearch_LTB   Search for a record containing field value
//
// Returns       
//               -1 if search failed.
//               record number if search succeeds
//               
//
// Available     5.0.0
//

[_public] int
iSearch_LTB (
             LTB,     // LTB object
             int,     // Search start record
             int,     // Field number
             string   // Search string (case sensitive)
             );


//-----------------------------------------------------------------------------------------------------------
// Merge_LTB   Merge the contents of two same-key tables.
//
// Returns     
//             x    - Handle to LTB object
//             NULL - Error of some kind
//             
//
// Notes       
//             Merging takes place as follows:
//             
//             1. The "Key" of the child must be the same as the "Key" of the Master.
//             2. The fields of the Master LTB are collected in-order.
//             3. Any new fields of the Child LTB are added to the end of the list.
//             4. A new LTB is created to contain the new field list (in-order).
//             5. The Child table contents are added to the New LTB.
//             6. The Master table contents are added/replace the New LTB.
//             7. The New LTB is returned.
//             
//             If the fields of the Master and Child are the same, steps 4, 5, 6 are
//             replaced by:
//             
//             4. The Master LTB is copied to the New LTB.
//             5. Any New records found in the child are added to the New LTB
//             
//
// Available   5.0.0
//

[_public] LTB
Merge_LTB (
           LTB,  // Master LTB
           LTB   // Child LTB
           );


//-----------------------------------------------------------------------------------------------------------
// rGetReal_LTB   Get a real entry from the LTB
//
// Returns        
//                If the record or field are out of range,
//                an empty string or dummy value is returned.
//                
//
// Available      5.0.0
//

[_public] real
rGetReal_LTB (
              LTB,  // LTB object
              int,  // Record number
              int   // Field number
              );


//-----------------------------------------------------------------------------------------------------------
// Save_LTB   Save LTB changes to existing or new file
//
// Returns    Nothing
//
// Available  5.0.0
//

[_public] void
Save_LTB (
          LTB,     // LTB
          string   // File name, .csv assumed.  If "", save to original file.
          );


//-----------------------------------------------------------------------------------------------------------
// SaveCrypt_LTB   Save LTB to a new file using encryption
//
// Returns         Nothing
//
// Available       6.2.0
//

[_public] void
SaveCrypt_LTB (
               LTB,     // LTB
               string,  // File name, .csv assumed.  If "", save to original file.
               string   // Encryption key  <define>SYS_CRYPT_KEY</define>
               );


//-----------------------------------------------------------------------------------------------------------
// SetInt_LTB   Set a long entry
//
// Returns      Nothing
//
// Available    5.0.0
//

[_public] void
SetInt_LTB (
            LTB,  // LTB object
            int,  // Record number
            int,  // Field number
            int   // Entry
            );


//-----------------------------------------------------------------------------------------------------------
// SetReal_LTB   Set a double entry
//
// Returns       Nothing
//
// Available     5.0.0
//

[_public] void
SetReal_LTB (
             LTB,   // LTB object
             int,   // Record number
             int,   // Field number
             real   // Entry
             );


//-----------------------------------------------------------------------------------------------------------
// SetString_LTB   Set an entry
//
// Returns         Nothing
//
// Available       5.0.0
//

[_public] void
SetString_LTB (
               LTB,     // LTB object
               int,     // Record number
               int,     // Field number
               string   // Entry
               );





#endif

