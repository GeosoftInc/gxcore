//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// This is a specialized class which performs 3D Euler deconvolution
// for potential field interpretation.
//
//-----------------------------------------------------------------------------------------------------------



#ifndef EUL3_GXH_DEFINED
#define EUL3_GXH_DEFINED

//===========================================================================================================
//
// Define	EUL3_RESULT
//
// Euler result types
//
// EUL3_RESULT_X
// EUL3_RESULT_Y
// EUL3_RESULT_DEPTH
// EUL3_RESULT_BACKGROUND
// EUL3_RESULT_DEPTHERROR
// EUL3_RESULT_LOCATIONERROR
// EUL3_RESULT_WINDOWX
// EUL3_RESULT_WINDOWY
//
//===========================================================================================================

#define EUL3_RESULT_X                1
#define EUL3_RESULT_Y                2
#define EUL3_RESULT_DEPTH            3
#define EUL3_RESULT_BACKGROUND       4
#define EUL3_RESULT_DEPTHERROR       5
#define EUL3_RESULT_LOCATIONERROR    6
#define EUL3_RESULT_WINDOWX          7
#define EUL3_RESULT_WINDOWY          8


//-----------------------------------------------------------------------------------------------------------
// _Destr_EUL3   Destroys a EUL3 object.
//
// Returns       Nothing
//
// Available     5.0.0
//

[_extended] void
_Destr_EUL3 (
             EUL3   // EUL3 object
             );
#define Destr_EUL3 _Destr_EUL3

//-----------------------------------------------------------------------------------------------------------
// Creat_EUL3   Creates an EUL3 object.
//
// Returns      EUL3 Object
//
// Available    5.0.0
//

[_extended] EUL3
Creat_EUL3 (
            IMG,   // Image of grid T
            IMG,   // Image of grid Tx
            IMG,   // Image of grid Ty
            IMG,   // Image of grid Tz
            int,   // Window size (maximum 20)
            real,  // Geometric index, from 0.0 to 3.0
            real,  // Max tolerance to allow (percentage)
            real,  // Max dist. acceptable (0 for infinite)
            int,   // ObsFlg  Height (0) or Elevation (1)
            real,  // Height of observation plane
            real   // Elevation of observation plane
            );


//-----------------------------------------------------------------------------------------------------------
// GetResult_EUL3   Get a result field VV from EUL3 object
//
// Returns          Nothing
//
// Available        5.0.0
//

[_extended] void
GetResult_EUL3 (
                EUL3,  // EUL3 object
                VV,    // VV to store the result
                int    // <define>EUL3_RESULT</define>
                );


//-----------------------------------------------------------------------------------------------------------
// Write_EUL3   Write the results of EUL3 object to output file.
//
// Returns      Nothing
//
// Available    5.0.0
//

[_extended] void
Write_EUL3 (
            EUL3,    // EUL3 object
            string   // Output File Name
            );


//-----------------------------------------------------------------------------------------------------------
// ExEulerDerive_EUL3   Calculates gradients
//
// Returns              0 for OK, -1 for Error
//
// Available            9.0.0
//

[_extended] int
ExEulerDerive_EUL3 (
                    VV,    // Input distance
                    real,  // Sample Interval
                    VV,    // Input mag
                    int,   // SampleCount
                    VV,    // Horizontal Gradient out
                    VV,    // Vertical Gradient out
                    int    // Output array size limit
                    );


//-----------------------------------------------------------------------------------------------------------
// ExEulerCalc_EUL3   Does the exeuler depth calculations
//
// Returns            >0 for OK, -1 for Error
//
// Available          9.0.0
//

[_extended] int
ExEulerCalc_EUL3 (
                  int,   // Solution type flag (0 for contacts, 1 for dykes)
                  real,  // Structural index value (used only when generating dykes)
                  int,   // Window length
                  real,  // Field strength in nT
                  real,  // Inclination
                  real,  // Declination
                  real,  // Profile azimuth wrt north
                  real,  // Minimum depth for returned solutions
                  real,  // Maximum depth for returned solutions
                  real,  // Percentage error allowed before rejection
                  int,   // Number of points in profile
                  VV,    // Array of point distances along profile
                  VV,    // Array of observed values
                  VV,    // Array of horizontal derivative values. Can be NULL for calculated
                  VV,    // Array of vertical derivative values. Can be NULL for calculated
                  int,   // Length of solutions arrays passed in
                  VV,    // The profile distance for each solution
                  VV,    // The depth for each solution
                  VV,    // The dip for each solution
                  VV     // The susceptibility for each solution
                  );





#endif

