//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// Oasis montaj implementation of RTE SEMPLOT
//
//-----------------------------------------------------------------------------------------------------------



#ifndef SEMPLOT_GXH_DEFINED
#define SEMPLOT_GXH_DEFINED



#define ImportAscWizard_SEMPLOT(A,B,C) IImportAsciiWizard_SEMPLOT(A, B, C, sizeof(C))


//===========================================================================================================
//
// Define	SEMPLOT_GROUP_CLASS
//
// SEMPLOT group class.
//
// SEMPLOT_GROUP_CLASS
//
//===========================================================================================================

#define SEMPLOT_GROUP_CLASS    "Semplot"


//===========================================================================================================
//
// Define	SEMPLOT_EXPORT
//
// SEMPLOT export type selection.
//
// SEMPLOT_EXPORT_NORMAL    Exports Sample info channels, oxides/ratios, totals, extra channels.
// SEMPLOT_EXPORT_NOEXTRA   Exports Sample info, oxides/ratios, totals.
//
//===========================================================================================================

#define SEMPLOT_EXPORT_NORMAL     0
#define SEMPLOT_EXPORT_NOEXTRA    1


//===========================================================================================================
//
// Define	SEMPLOT_EXT
//
// SEMPLOT file extension selection
//
// SEMPLOT_EXT_ALL       Use for selection only. Selects both "Semplot" and "CHIMERA" type
//                       files when creating LSTs etc.
// SEMPLOT_EXT_SEMPLOT   Read/write templates with extensions ".xyt", ".tri" and ".semtemplate"
//                       Read/write overlays with extensions ".oly" and ".semoverlay"
// SEMPLOT_EXT_CHIMERA   Read/write templates with extensions ".geosoft_template"
//                       Read/write overlays with extensions ".geosoft_overlay"
//
//===========================================================================================================

#define SEMPLOT_EXT_ALL        0
#define SEMPLOT_EXT_SEMPLOT    1
#define SEMPLOT_EXT_CHIMERA    2


//===========================================================================================================
//
// Define	SEMPLOT_PLOT
//
// SEMPLOT plot type selection.
//
// SEMPLOT_PLOT_ALL       Use for selection only. Selects both "XYPlot" and "TriPlot"
//                        plots when creating LSTs etc.
// SEMPLOT_PLOT_XYPLOT    Select XY (Scatter) plot.
// SEMPLOT_PLOT_TRIPLOT   Select Tri (Triangular) plot.
// SEMPLOT_PLOT_UNKNOWN   Returned as an error status from some functions.
//
//===========================================================================================================

#define SEMPLOT_PLOT_ALL        0
#define SEMPLOT_PLOT_XYPLOT     1
#define SEMPLOT_PLOT_TRIPLOT    2
#define SEMPLOT_PLOT_UNKNOWN    3


//-----------------------------------------------------------------------------------------------------------
// ApplyFilterToMask_SEMPLOT   Apply the filter to the mask channel
//
// Returns                     Nothing
//
// Notes                       The mask channel is updated for the current data to reflect
//                             the actions of the filter. Those values passing get 1, those
//                             failing get 0.
//
// Available                   6.2.0
//

[_extended] void
ApplyFilterToMask_SEMPLOT (
                           DB,      // Database handle
                           string,  // Filter name
                           string,  // Mask channel name
                           string,  // Mineral channel name
                           string,  // Mineral to use ("All" or "" for all)
                           int      // Mask mode (0: Append, 1: New)
                           );


//-----------------------------------------------------------------------------------------------------------
// ConvertDummies_SEMPLOT   Convert dummies to zero values for assay channels.
//
// Returns                  Nothing
//
// Notes                    The is operation is controlled by the Preferences
//                          "Use dummies to indicate no data?" By default, this option is "yes"
//                          so this function will return with no changes. However, if
//                          "no", then all ASSAY class channels will have dummy values
//                          converted to 0.0.
//
// Available                6.2.0
//

[_extended] void
ConvertDummies_SEMPLOT (
                        DB,       // database handle
                        DB_SYMB   // Input line to convert
                        );


//-----------------------------------------------------------------------------------------------------------
// CreateGroups_SEMPLOT   Group data by anomaly or string channel - Interactive.
//
// Returns                Nothing
//
// Available              6.2.0
//

[_extended] void
CreateGroups_SEMPLOT (
                      DB,      // Database handle
                      string   // Mask channel
                      );


//-----------------------------------------------------------------------------------------------------------
// DefaultGroups_SEMPLOT   Group data by selected anomalies.
//
// Returns                 Nothing
//
// Available               6.2.0
//

[_extended] void
DefaultGroups_SEMPLOT (
                       DB   // Database handle
                       );


//-----------------------------------------------------------------------------------------------------------
// EditMapPlotParameters_SEMPLOT   Alter parameters in an XYplot Triplot map.
//
// Returns                         Nothing
//
// Notes                           The Parameters GUI is loaded based on settings stored in
//                                 the map. The map is then re-plotted, overwriting the old one,
//                                 based on the new settings. Note that the selection of data
//                                 in the current DB is used to replot the map.
//
// Available                       6.2.0
//

[_extended] void
EditMapPlotParameters_SEMPLOT (
                               DB,      // Database handle
                               string,  // Mask channel (can be "")
                               string,  // Mineral channel (can be "" for raw data)
                               MAP,     // Map handle
                               string   // Map View
                               );


//-----------------------------------------------------------------------------------------------------------
// EditPlotComponents_SEMPLOT   Set group names and channels to plot in a template.
//
// Returns                      Nothing
//
// Notes                        The "Components" group in the INI file is edited.
//                              
//                              Looks first in user\etc, then in \etc.
//                              Looks first for file prefix "semtemplate" then "xyt" or "tri"
//                              The altered template will be output to the user\etc directory with
//                              the file extension "semtemplate".
//
// Available                    6.2.0
//

[_extended] void
EditPlotComponents_SEMPLOT (
                            DB,      // Database handle
                            string   // Template name
                            );


//-----------------------------------------------------------------------------------------------------------
// EditPlotParameters_SEMPLOT   Set TriPlot parameters in a template.
//
// Returns                      Nothing
//
// Notes                        The "Parameters" group in the INI file is edited.
//                              
//                              Looks first in user\etc, then in \etc.
//                              Looks first for file prefix "semtemplate" then "xyt" or "tri"
//                              The altered template will be output to the user\etc directory with
//                              the file extension "semtemplate".
//
// Available                    6.2.0
//

[_extended] void
EditPlotParameters_SEMPLOT (
                            DB,      // Database handle
                            string   // Template name
                            );


//-----------------------------------------------------------------------------------------------------------
// ExportOverlay_SEMPLOT   Create overlay map and file from a group.
//
// Returns                 Nothing
//
// Notes                   The group is written to a new map, and an overlay file
//                         is created which points to this map.
//
// Available               6.2.0
//

[_extended] void
ExportOverlay_SEMPLOT (
                       string,  // overlay file name
                       string,  // associated map
                       MVIEW,   // View with group
                       string,  // group name
                       int,     // <define>SEMPLOT_PLOT</define>
                       string,  // XStage
                       string,  // XOxide
                       string,  // YStage
                       string,  // YOxide
                       string,  // ZStage
                       string,  // ZOxide
                       int      // <define>SEMPLOT_EXT</define>
                       );


//-----------------------------------------------------------------------------------------------------------
// ExportView_SEMPLOT   Create a "View" database
//
// Returns              Nothing
//
// Available            6.2.0
//

[_extended] void
ExportView_SEMPLOT (
                    DB,      // Original raw data database
                    LST,     // List of lines (anomlies) to export
                    DB,      // Destination database
                    int,     // View to export - One of SEMPLOT_XXX_STAGE
                    string,  // Mask channel ("" for None)
                    string,  // Mineral channel
                    string   // Mineral to export ("" for all)
                    );


//-----------------------------------------------------------------------------------------------------------
// ExportView2_SEMPLOT   Create a "View" database, with channel selection
//
// Returns               Nothing
//
// Available             7.1.0
//

[_extended] void
ExportView2_SEMPLOT (
                     DB,      // Original raw data database
                     LST,     // List of lines (anomlies) to export
                     DB,      // Destination database
                     int,     // View to export - One of SEMPLOT_XXX_STAGE
                     string,  // Mask channel ("" for None)
                     string,  // Mineral channel
                     string,  // Mineral to export ("" for all)
                     int      // <define>SEMPLOT_EXPORT</define> Channel selection
                     );


//-----------------------------------------------------------------------------------------------------------
// FilterLST_SEMPLOT   Fill a LST with existing SEMPLOT filters
//
// Returns             Nothing
//
// Notes               "Supplied" filters are stored in \etc, while user-edited and new filters
//                     are stored in user\etc. This function finds all files with the extension
//                     ".semfilter", first in user\etc, then in \etc, and adds the file names
//                     (without the extension) to the LST. The name with the extension is stored
//                     as the value.
//                     The LST is cleared first.
//
// Available           6.2.0
//

[_extended] void
FilterLST_SEMPLOT (
                   LST   // LST to fill.
                   );


//-----------------------------------------------------------------------------------------------------------
// FilterMineralPosData_SEMPLOT   Filter raw data by position and mineral values
//
// Returns                        Nothing
//
// Notes                          The Mask channel will be updated so that those data values
//                                which "pass" get "1" and those that "fail" get dummy "*"
//                                NO DATA IS REMOVED.
//                                Works on all selected lines of data.
//
// Available                      6.2.0
//

[_extended] void
FilterMineralPosData_SEMPLOT (
                              DB,      // Database handle
                              string,  // Mask channel
                              string,  // Mineral channel
                              string,  // mineral (string) - "C", "I" etc.
                              int      // Grain position
                              );


//-----------------------------------------------------------------------------------------------------------
// GetAssociatedLST_SEMPLOT   Get the associated channels for this group in a LST
//
// Returns                    Nothing
//
// Available                  6.2.0
//

[_extended] void
GetAssociatedLST_SEMPLOT (
                          DB,       // Database handle
                          DB_SYMB,  // Data Group handle
                          LST       // LST to copy channels into
                          );


//-----------------------------------------------------------------------------------------------------------
// GetCurrentMineralLST_SEMPLOT   Retrieve LST of minerals in selected lines.
//
// Returns                        Nothing
//
// Notes                          If the mineral channel name is not specified, it returns
//                                just the "X" (Unknown) item.
//
// Available                      6.2.0
//

[_extended] void
GetCurrentMineralLST_SEMPLOT (
                              DB,      // Database handle
                              string,  // Mineral channel name
                              LST      // LST object
                              );


//-----------------------------------------------------------------------------------------------------------
// GetCurrentPositionLST_SEMPLOT   Retrieve LST of positions in selected lines.
//
// Returns                         Nothing
//
// Available                       6.2.0
//

[_extended] void
GetCurrentPositionLST_SEMPLOT (
                               DB,   // Database handle
                               LST   // LST object
                               );


//-----------------------------------------------------------------------------------------------------------
// GetFullMineralLST_SEMPLOT   Retrieve LST of all minerals in Semplot_Minerals.csv
//
// Returns                     Nothing
//
// Available                   6.2.0
//

[_extended] void
GetFullMineralLST_SEMPLOT (
                           LST   // LST object
                           );


//-----------------------------------------------------------------------------------------------------------
// GetFullPositionLST_SEMPLOT   Retrieve LST of all possible mineral positions.
//
// Returns                      Nothing
//
// Available                    6.2.0
//

[_extended] void
GetFullPositionLST_SEMPLOT (
                            LST   // LST object
                            );


//-----------------------------------------------------------------------------------------------------------
// GetGroupingLST_SEMPLOT   Get list of items to group symbols by.
//
// Returns                  Nothing
//
// Notes                    The first item is "Anomaly", which gives the line names, The second
//                          item (if the channel exists in the database) is the Sample Number.
//                          After this are included all string channels which are NOT oxides or
//                          elements. (The list can include the mineral).
//                          Channel symbol is the LST value (except for the first item - "Anomaly")
//
// Available                6.2.0
//

[_extended] void
GetGroupingLST_SEMPLOT (
                        DB,   // database handle
                        LST   // list to hold items
                        );


//-----------------------------------------------------------------------------------------------------------
// iCreateASCIITemplate_SEMPLOT   : Generate ASCII import template automatically
//
// Returns                        1 if it succeeds in creating a Template.
//                                0 if it fails.
//
// Available                      6.2.0
//

[_extended] int
iCreateASCIITemplate_SEMPLOT (
                              string,  // data file name
                              string   // template to make
                              );


//-----------------------------------------------------------------------------------------------------------
// iCreateDatabaseTemplate_SEMPLOT   Generate database import template automatically
//
// Returns                           1 if it succeeds in creating a Template.
//                                   0 if it fails.
//
// Available                         6.2.0
//

[_extended] int
iCreateDatabaseTemplate_SEMPLOT (
                                 string,  // data file name
                                 string   // template to make
                                 );


//-----------------------------------------------------------------------------------------------------------
// iEditFilter_SEMPLOT   Edit and create filter on channel values
//
// Returns               -1 - Cancel - Edits to filter discarded.
//                       
//                       0 - Normal Return. Edits saved to filter file.
//                       
//                       1 - Apply filter to current data only
//                       
//                       2 - Remove filter - If removing filtered data, just
//                       restore the data to the Min/Pos data
//                       otherwise set the mask channel to 1.
//                       
//                       Re-entry code. If not iDUMMY, what to do inside the filter after
//                       going back in. Returned on exit, used on next input.
//                       
//                       0 - Nothing. Don't need to go back into this function again.
//                       1 - Edit the filter.
//                       
//                       Notes            New and edited filters are stored in user\etc in files with
//                       the file extension ".semfilter"
//                       If a file for the specified filter does not exist, then a
//                       new filter by that name will be created.
//
// Available             6.2.0
//

[_extended] int
iEditFilter_SEMPLOT (
                     DB,      // Database handle
                     string,  // Name of filter
                     string,  // Mask channel name
                     string,  // Mineral channel name
                     string   // Mineral to restrict filter to.
                     );


//-----------------------------------------------------------------------------------------------------------
// IGetMineralChannelName_SEMPLOT   Retrieve the mineral channel name.
//
// Returns                          Nothing
//
// Notes                            First looks at the SEMPLOT.MINERAL_CHANNEL value.
//                                  If not found, returns the first MINERAL class
//                                  channel found. If still not found, returns a
//                                  blank string.
//
// Available                        6.3.0
//

[_extended] void
IGetMineralChannelName_SEMPLOT (
                                DB,          // Database handle
                                var string,  // Mineral channel name
                                int          // Size of the Buffer
                                );

#define GetMineralChannelName_SEMPLOT(A, B) IGetMineralChannelName_SEMPLOT(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// IImportAsciiWizard_SEMPLOT   Generate a SEMPLOT ASCII import template.
//
// Returns                      Nothing
//
// Notes                        If the anomaly name is not included, then
//                              the input data must have an "Anom_Name" field.
//
// Available                    6.3.0
//

[_extended] void
IImportAsciiWizard_SEMPLOT (
                            string,      // data file name
                            string,      // template to make
                            var string,  // anomaly name (can be "")
                            int          // buffer size
                            );

#define ImportAsciiWizard_SEMPLOT(A, B, C) IImportAsciiWizard_SEMPLOT(A, B, C, sizeof(C))


//-----------------------------------------------------------------------------------------------------------
// IImportDatabaseODBC_SEMPLOT   Generate a template file for importing ODBC databases.
//
// Returns                       Nothing
//
// Available                     6.2.0
//

[_extended] void
IImportDatabaseODBC_SEMPLOT (
                             var string,  // connection string (input and returned)
                             int,         // connection string buffer size
                             var string,  // template file (returned)
                             int          // templage file buffer size
                             );

#define ImportDatabaseODBC_SEMPLOT(A, B) IImportDatabaseODBC_SEMPLOT(A, sizeof(A), B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// ImportBIN_SEMPLOT   Import blocked binary or archive ASCII data
//
// Returns             Nothing
//
// Notes               This wrapper is for SEMPLOT, and does not require the import licence.
//                     
//                     1. Binary import templates have extension .I2 by convention.  See
//                     BINARY.I2 for a description of the template format.
//                     Archive import templates have extension .I3 by convention. See
//                     ARCHIVE.I3 for a description of the template format.
//                     
//                     2. Both the import template and data file must exist.
//                     
//                     3. If a line already exists in the database, a new version is created
//                     unless a line name is passed in.  In this case, the specified name
//                     is used and the imported channels on the previous line will be
//                     destroyed.
//
// See also            LabTemplate_DU in du.gxh
//
// Available           6.2.0
//

[_extended] void
ImportBIN_SEMPLOT (
                   DB,      // Database
                   string,  // import data file name
                   string,  // import template name
                   string,  // Optional Line name (see note 3.)
                   int,     // Optional Flight number
                   real     // Optional date
                   );


//-----------------------------------------------------------------------------------------------------------
// ImportDatabaseADO_SEMPLOT   Generate a template file for importing semplot databases.
//
// Returns                     Nothing
//
// Available                   6.2.0
//

[_extended] void
ImportDatabaseADO_SEMPLOT (
                           string,  // data file name
                           string   // template to make
                           );


//-----------------------------------------------------------------------------------------------------------
// InitGroupSymbolsUsed_SEMPLOT   Initializes memory of symbols used in plotting.
//
// Returns                        Nothing
//
// Notes                          Maintains a list of the symbols used in plotting. Call before
//                                Plotting one or more legends - symbols are accumulated.
//                                PlotSymbolLegend_SEMPLOT uses this information to create a legend.
//
// Available                      6.2.0
//

[_extended] void
InitGroupSymbolsUsed_SEMPLOT (
                              DB   // database handle
                              );


//-----------------------------------------------------------------------------------------------------------
// iTemplateType_SEMPLOT   Create a new XYPlot or TriPlot template.
//
// Returns                 SEMPLOT_PLOT_XYPLOT or
//                         SEMPLOT_PLOT_TRIPLOT
//                         Terminates if error.
//
// Available               6.2.0
//

[_extended] int
iTemplateType_SEMPLOT (
                       string   // Template name
                       );


//-----------------------------------------------------------------------------------------------------------
// iViewType_SEMPLOT   Test to see if a view is an XYPlot or Triplot view.
//
// Returns             <define>SEMPLOT_PLOT</define>
//
// Notes               First checks the view name to see if it starts with
//                     "XYplt_" or "Triplt_". Failing that it looks in the
//                     view REG for a value for "Components.Type", which will
//                     be either "XYPlot" or "TriPlot".
//                     If the view does not appear to be an XYPlot or a TriPlot view,
//                     the function returns SEMPLOT_PLOT_UNKNOWN.
//
// Available           6.4.2
//

[_extended] int
iViewType_SEMPLOT (
                   MAP,     // Input map object
                   string   // Input view name
                   );


//-----------------------------------------------------------------------------------------------------------
// MineralID_SEMPLOT   Identify minerals from the oxide channels.
//
// Returns             Nothing
//
// Notes               Finds the best mineral matching the composition for each
//                     row of oxide values. Works using linear programming and
//                     the simplex method to maximize the oxides used to create
//                     each of the possible output minerals. The mineral leaving the
//                     least leftover is selected, as long as the residual (measured
//                     as a percent of the total) is less than or equal to the
//                     input value.
//
// Available           6.3.0
//

[_extended] void
MineralID_SEMPLOT (
                   DB,       // Database
                   real,     // Maximum residual value (in % of the total oxide)
                   DB_SYMB,  // Mineral channel (Locked RW)
                   DB_SYMB   // Residual channel (Locked RW)
                   );


//-----------------------------------------------------------------------------------------------------------
// NewFilter_SEMPLOT   Create a new selection filter.
//
// Returns             Nothing
//
// Notes               Creates a new, empty filter file in the user\etc directory
//
// Available           6.2.0
//

[_extended] void
NewFilter_SEMPLOT (
                   string,  // New filter name
                   string   // Filter to use as a model (can be "")
                   );


//-----------------------------------------------------------------------------------------------------------
// NewTemplate_SEMPLOT   Create a new XYPlot or TriPlot template.
//
// Returns               Nothing
//
// Notes                 The new template is written to the user\etc directory, with
//                       the file extension "semfilter". The template contains a parameter
//                       identifying it as an XY or Triplot.
//                       
//                       Model Template: Looks first in user\etc, then in \etc.
//                       Looks first for file prefix "semtemplate" then "xyt" or "tri"
//                       
//                       Because there are so many shared parameters, it is possible to use
//                       an XYPlot template as a model for a TriPlot, and vica-verca, with
//                       few complications.  (e.g. needing to define a "Z" component)
//
// Available             6.2.0
//

[_extended] void
NewTemplate_SEMPLOT (
                     string,  // New template name
                     int,     // Unknown
                     string   // Template to use as a model (can be "")
                     );


//-----------------------------------------------------------------------------------------------------------
// OverlayLST_SEMPLOT   Fill a list with the available plot overlay names
//
// Returns              Nothing
//
// Notes                Looks first in user\etc, then in \etc.
//                      See SEMPLOT_EXT definitions above for which files to look for.
//
// Available            6.2.0
//

[_extended] void
OverlayLST_SEMPLOT (
                    LST,  // Input LST.
                    int,  // <define>SEMPLOT_EXT</define>
                    int   // <define>SEMPLOT_PLOT</define>
                    );


//-----------------------------------------------------------------------------------------------------------
// Plot_SEMPLOT   Plot an XYPlot or TriPlot based on the template.
//
// Returns        Nothing
//
// Notes          The "Components" and "Parameters" groups in the INI file
//                are used.
//                Only values with mask values of 1 are plotted, if the mask
//                channel is specified.
//                
//                Call "ResetUsedChannel_SEMPLOT" prior to this function
//                in order to track the values actually plotted.
//                
//                Call InitGroupSymbolsUsed_SEMPLOT prior to this function
//                to reset recording of the symbols used in plotting (for legends etc).
//
// Available      6.2.0
//

[_extended] void
Plot_SEMPLOT (
              DB,      // Database handle
              string,  // Template file name
              string,  // Mask channel (can be "")
              string,  // Mineral channel (can be "" for raw data)
              string,  // Map name
              int,     // Map open mode; one of MAP_WRITEXXX (see map.gxh)
              int      // Plot symbols (O: No, 1:Yes) ?
              );


//-----------------------------------------------------------------------------------------------------------
// PlotSymbolLegend_SEMPLOT   Plot a symbol legend in a view.
//
// Returns                    Nothing
//
// Notes                      This function depends on InitGroupSymbolsUsed_SEMPLOT
//                            before the plot for which this legend is created is made.
//                            The symbols and groups to use in the legend are stored to
//                            a database blob after the plot is made. These values are
//                            recovered by this function to make the legend at the
//                            specified location.
//
// Available                  6.2.0
//

[_extended] void
PlotSymbolLegend_SEMPLOT (
                          DB,     // Database handle
                          MVIEW,  // View to plot into
                          real,   // X Minimum
                          real,   // Y Minimum
                          real,   // Y Maximum
                          real    // Symbol size
                          );


//-----------------------------------------------------------------------------------------------------------
// PropSymb_SEMPLOT   Plot a proportional symbol plot.
//
// Returns            Nothing
//
// Notes              Replots map using proportional symbols
//
// Available          6.2.0
//

[_extended] void
PropSymb_SEMPLOT (
                  DB,      // Database handle
                  MAP,     // Map to plot to
                  string,  // View to replot
                  string,  // channel name
                  string,  // mask channel (can be "")
                  string,  // mineral channel (
                  int,     // linear (0) or logarithmic (1) scaling
                  int,     // scale by diameter (0) or area (1)
                  real,    // scale base (log) data units
                  real,    // scale factor (log) data units/mm
                  int,     // symbol number
                  int,     // symbol weight
                  int,     // symbol line color
                  int,     // symbol fill color
                  int      // plot legend?
                  );


//-----------------------------------------------------------------------------------------------------------
// Replot_SEMPLOT   Replot an existing SEMPLOT plot based on current data.
//
// Returns          Nothing
//
// Notes            Note that the selection of data
//                  in the current DB is used to replot the map.
//                  
//                  Call "ResetUsedChannel_SEMPLOT" prior to this function
//                  in order to track the values actually plotted.
//                  
//                  Call InitGroupSymbolsUsed_SEMPLOT prior to this function
//                  to reset recording of the symbols used in plotting (for legends etc).
//
// Available        6.2.0
//

[_extended] void
Replot_SEMPLOT (
                DB,      // Database handle
                string,  // Mask channel (can be "")
                string,  // Mineral channel (can be "" for raw data)
                MAP,     // Map handle
                string   // Map View containing the plot
                );


//-----------------------------------------------------------------------------------------------------------
// RePlotSymbolLegend_SEMPLOT   Replot a symbol legend in a view.
//
// Returns                      Nothing
//
// Notes                        Searches the VIEW REG for information on a previously
//                              created legend, and if it finds that info, replots the Legend,
//                              using the current data, group key etc.
//
// Available                    6.2.0
//

[_extended] void
RePlotSymbolLegend_SEMPLOT (
                            DB,     // Database handle
                            MVIEW   // View to plot into
                            );


//-----------------------------------------------------------------------------------------------------------
// ResetGroups_SEMPLOT   Re-group data using current settings.
//
// Returns               Nothing
//
// Available             6.2.0
//

[_extended] void
ResetGroups_SEMPLOT (
                     DB,      // Database handle
                     string   // Mask channel
                     );


//-----------------------------------------------------------------------------------------------------------
// ResetUsedChannel_SEMPLOT   Set the "Plotted" channel to dummies
//
// Returns                    Nothing
//
// Notes                      This function is called before one or a series of plots to initialize
//                            the "Plotted" channel in all the selected lines to dummy values.
//                            As the plots are created, those points used in the plot are set to 1,
//                            so that at the end the database records which values have been plotted.
//                            This information can then be used to make a symbol legend.
//                            If the "Plotted" channel does not exist, it is created, associated,
//                            loaded, and filled with dummies.
//
// Available                  6.2.0
//

[_extended] void
ResetUsedChannel_SEMPLOT (
                          DB   // database handle
                          );


//-----------------------------------------------------------------------------------------------------------
// SelectPoly_SEMPLOT   Select data from a polygonal area on a map.
//
// Returns              Nothing
//
// Available            6.2.0
//

[_extended] void
SelectPoly_SEMPLOT (
                    DB,      // Database handle
                    MVIEW,   // View Handle
                    string,  // Mask channel to update
                    string,  // Mineral channel
                    PLY,     // Polygon to select from, in the view coordinates.
                    int      // Mask mode (0: Append, 1: New)
                    );


//-----------------------------------------------------------------------------------------------------------
// SetChannelOrder_SEMPLOT   Sets preset channel order.
//
// Returns                   Nothing
//
// Notes                     Sets channel order as follows:
//                           
//                           Sample_No
//                           X and Y Locations
//                           Mineral
//                           Grain_No
//                           Position (e.g. center, edge etc.)
//                           Grain Morph
//                           Oxides (in the order they appear in Semplot_Oxides.csv)
//                           Trace Elements (Ordered as in the periodic table)
//                           Total
//                           Mask
//                           IsPlotted (flag set when a value is plotted)
//                           Other channels
//                           
//                           Channel order is set for all "RawData" groups.
//
// Available                 6.2.0
//

[_extended] void
SetChannelOrder_SEMPLOT (
                         DB,   // database handle
                         LST   // channel names, handles
                         );


//-----------------------------------------------------------------------------------------------------------
// SetChannelUnits_SEMPLOT   Set units for oxides (%) and elements (ppm)
//
// Returns                   Nothing
//
// Notes                     If the channel units are already set, then they are not changed.
//                           Oxide channels are identified from the Semplot_Oxides.csv file.
//                           Trace elements are identified from the periodic table of the
//                           elements, except for "Y", if it is the current Y channel.
//
// Available                 6.2.0
//

[_extended] void
SetChannelUnits_SEMPLOT (
                         DB   // database handle
                         );


//-----------------------------------------------------------------------------------------------------------
// SetITR_SEMPLOT   Put ITR into a channel.
//
// Returns          Nothing
//
// Available        6.2.0
//

[_extended] void
SetITR_SEMPLOT (
                DB,       // Database handle
                DB_SYMB,  // Data channel handle
                ITR       // ITR
                );


//-----------------------------------------------------------------------------------------------------------
// SetMask_SEMPLOT   Set the mask channel ON or OFF.
//
// Returns           Nothing
//
// Available         6.2.0
//

[_extended] void
SetMask_SEMPLOT (
                 DB,      // Database handle
                 string,  // Mask channel
                 string,  // Mineral channel
                 string,  // Mineral to use ("All" or "" for all)
                 int,     // 0 for all lines, 1 for selected lines
                 int      // 0 for off, 1 for on.
                 );


//-----------------------------------------------------------------------------------------------------------
// SortData_SEMPLOT   Sort data by Sample No, Grain and Position
//
// Returns            Nothing
//
// Available          6.2.0
//

[_extended] void
SortData_SEMPLOT (
                  DB,       // Database handle
                  DB_SYMB,  // Data Group handle
                  int       // Use Anomaly channel as primary sort?
                  );


//-----------------------------------------------------------------------------------------------------------
// TemplateLST_SEMPLOT   Fill a list with the available plot template names
//
// Returns               Nothing
//
// Notes                 Looks first in user\etc, then in \etc.
//                       Looks first for file prefix "semtemplate" then "xyt" or "tri"
//                       (New-style templates with the "semtemplate" extentsion have the
//                       plot type "triplot" or "xyplot" inside them.)
//
// Available             6.2.0
//

[_extended] void
TemplateLST_SEMPLOT (
                     LST,  // Input LST.
                     int   // <define>SEMPLOT_PLOT</define>
                     );


//-----------------------------------------------------------------------------------------------------------
// TileWindows_SEMPLOT   Tile currently maximimized windows.
//
// Returns               Nothing
//
// Available             6.2.0
//

[_extended] void
TileWindows_SEMPLOT (
                     );


//-----------------------------------------------------------------------------------------------------------
// TotalOxides_SEMPLOT   Calculate the total oxides channel.
//
// Returns               Nothing
//
// Notes                 The mineral channel is needed in order to adjust the total
//                       with the Fe Corrected Ferric and Ferrous values, and these
//                       require a mineral for their identification. If none is provided,
//                       mineral "X" (unknown) is assumed.
//
// Available             6.2.0
//

[_extended] void
TotalOxides_SEMPLOT (
                     DB,      // database handle
                     string   // Mineral channel
                     );





#endif

