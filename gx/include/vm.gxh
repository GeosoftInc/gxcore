//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// 
// In-memory vector data methods
// The VM class will store vector (array) data in a memory buffer which
// can be accessed using the VM methods.
// The main use for the VM class is to store data in a single physical
// memory location.  This memory can then be accessed by a user DLL using
// the GetPtrVM_GEO function defined in gx_extern.h.
// VM memory can be any size, but a VM is intended for handling relatively
// small sets of data compared to a VV, which can work efficiently with
// very large volumes of data.  The acceptable maximum VM size depends on
// the operating system and the performance requirements of an application.
// The best performance is achieved when all VM memory can be stored
// comfortably within the the available system RAM.  If all VM memory
// will not fit in the system RAM, the operating system virtual memory
// manager will be used to swap memory to the operations systems virtual
// memory paging file.  Note that the operating system virtual memory
// manager is much slower than the manager used by Geosoft when working with
// very large arrays in a VV.
// 
// See VV for methods to move data between a VM and a VV.
// 
//
//-----------------------------------------------------------------------------------------------------------



#ifndef VM_GXH_DEFINED
#define VM_GXH_DEFINED

//-----------------------------------------------------------------------------------------------------------
// Create_VM   Create a VM.
//
// Returns     VM Object
//
// Notes       The VM elements are initialized to dummies.
//
// Available   5.0.0
//

[_public] VM
Create_VM (
           int,  // <define>GEO_VAR</define>
           int   // VM length (less than 16777215)
           );


//-----------------------------------------------------------------------------------------------------------
// CreateExt_VM   Create a VM, using one of the <define>GS_TYPES</define> special data types.
//
// Returns        VM Object
//
// Notes          The VM elements are initialized to dummies.
//
// Available      6.4.2
//

[_public] VM
CreateExt_VM (
              int,  // <define>GS_TYPES</define>
              int   // VM length (less than 16777215)
              );


//-----------------------------------------------------------------------------------------------------------
// Destroy_VM   Destroy a VM.
//
// Returns      Nothing
//
// Available    5.0.0
//

[_public] void
Destroy_VM (
            VM   // VM to destroy.
            );


//-----------------------------------------------------------------------------------------------------------
// iGetInt_VM   Get an integer element from a VM.
//
// Returns      
//              Element wanted, or iDUMMY
//              if the value is dummy or outside of the range of data.
//              
//
// Available    5.0.0
//

[_public] int
iGetInt_VM (
            VM,   // VM
            int   // element wanted
            );


//-----------------------------------------------------------------------------------------------------------
// IGetString_VM   Get a string element from a VM.
//
// Returns         Nothing
//
// Notes           
//                 Returns element wanted, or blank string
//                 if the value is dummy or outside of the range of data.
//                 
//                 Type conversions are performed if necessary.  Dummy values
//                 are converted to "*" string.
//                 
//
// Available       5.0.0
//

[_public] void
IGetString_VM (
               VM,          // VM
               int,         // element wanted
               var string,  // string in which to place element
               int          // maximum length of the string
               );

#define GetString_VM(A, B, C) IGetString_VM(A, B, C, sizeof(C))


//-----------------------------------------------------------------------------------------------------------
// iLength_VM   Returns current VM length.
//
// Returns      # of elements in the VM.
//
// Available    5.0.0
//

[_public] int
iLength_VM (
            VM   // VM
            );


//-----------------------------------------------------------------------------------------------------------
// ReSize_VM   Re-set the size of a VM.
//
// Returns     Nothing
//
// Notes       If increasing the VM size, new elements are set to dummies.
//
// Available   5.0.0
//

[_public] void
ReSize_VM (
           VM,   // VM to resize
           int   // new size (number of elements)
           );


//-----------------------------------------------------------------------------------------------------------
// rGetReal_VM   Get a real element from a VM.
//
// Returns       
//               Element wanted, or rDUMMY
//               if the value is dummy or outside of the range of data.
//               
//
// Available     5.0.0
//

[_public] real
rGetReal_VM (
             VM,   // VM
             int   // element wanted
             );


//-----------------------------------------------------------------------------------------------------------
// SetInt_VM   Set an integer element in a VM.
//
// Returns     Nothing
//
// Notes       
//             Element being set cannot be < 0.
//             
//             If the element is > current VM length, the VM length is
//             increased.  Reallocating VM lengths can lead to fragmented
//             memory and should be avoided if possible.
//             
//
// Available   5.0.0
//

[_public] void
SetInt_VM (
           VM,   // VM
           int,  // element to set
           int   // value to set
           );


//-----------------------------------------------------------------------------------------------------------
// SetReal_VM   Set a real element in a VM.
//
// Returns      Nothing
//
// Notes        
//              Element being set cannot be < 0.
//              
//              If the element is > current VM length, the VM length is
//              increased.  Reallocating VM lengths can lead to fragmented
//              memory and should be avoided if possible.
//              
//
// Available    5.0.0
//

[_public] void
SetReal_VM (
            VM,    // VM
            int,   // element to set
            real   // value to set
            );


//-----------------------------------------------------------------------------------------------------------
// SetString_VM   Set a string element in a VM.
//
// Returns        Nothing
//
// Notes          
//                Element being set cannot be < 0.
//                
//                If the element is > current VM length, the VM length is
//                increased.  Reallocating VM lengths can lead to fragmented
//                memory and should be avoided if possible.
//                
//
// Available      5.0.0
//

[_public] void
SetString_VM (
              VM,      // VM
              int,     // element to set
              string   // string to set
              );





#endif

