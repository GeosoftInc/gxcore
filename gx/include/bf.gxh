//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// 
// The BF class is used to access (or create) Binary files and remove
// (or destroy) files from use. You can also perform a variety of
// additional tasks, such as positioning within files, reading from
// files and writing to files.
// 
//
//-----------------------------------------------------------------------------------------------------------



#ifndef BF_GXH_DEFINED
#define BF_GXH_DEFINED

//===========================================================================================================
//
// Define	BF_BYTEORDER
//
// Byte order for read/write
//
// BF_BYTEORDER_LSB   Least significant byte first (Intel, Windows)
// BF_BYTEORDER_MSB   Most significant byte first (Mororola, Sun)
//
//===========================================================================================================

#define BF_BYTEORDER_LSB    256
#define BF_BYTEORDER_MSB    512


//===========================================================================================================
//
// Define	BF_CLOSE
//
// Close Flags
//
// BF_KEEP
// BF_DELETE
//
//===========================================================================================================

#define BF_KEEP      0
#define BF_DELETE    1


//===========================================================================================================
//
// Define	BF_ENCODE
//
// The way a string is encoded
//
// BF_ENCODE_ANSI   String is stored as ANSI code page
// BF_ENCODE_UTF8   String is stored as UTF8
//
//===========================================================================================================

#define BF_ENCODE_ANSI    0
#define BF_ENCODE_UTF8    1


//===========================================================================================================
//
// Define	BF_OPEN_MODE
//
// Open Status
//
// BF_READ            Read only
// BF_READWRITE_NEW   erases existing file
// BF_READWRITE_OLD   file must pre-exist
// BF_READWRITE_APP   open and append onto pre-existing file (cannot be read from)
//
//===========================================================================================================

#define BF_READ             0
#define BF_READWRITE_NEW    1
#define BF_READWRITE_OLD    2
#define BF_READWRITE_APP    4


//===========================================================================================================
//
// Define	BF_SEEK
//
// Seek Location
//
// BF_SEEK_START
// BF_SEEK_CURRENT
// BF_SEEK_EOF
//
//===========================================================================================================

#define BF_SEEK_START      0
#define BF_SEEK_CURRENT    1
#define BF_SEEK_EOF        2


//-----------------------------------------------------------------------------------------------------------
// _ChSize_BF   Changes the size of a file
//
// Returns      Nothing
//
// Available    5.0.0
//

[_public] void
_ChSize_BF (
            BF,   // BF handle
            int   // new length in bytes
            );
#define ChSize_BF _ChSize_BF

//-----------------------------------------------------------------------------------------------------------
// _Seek_BF   Moves file position
//
// Returns    Nothing
//
// Notes      
//            Terminates if attempt to move past the end of
//            a read-only file.
//            
//
// Available  5.0.0
//

[_public] void
_Seek_BF (
          BF,   // BF handle
          int,  // number of bytes from reference point
          int   // <define>BF_SEEK</define>
          );
#define Seek_BF _Seek_BF

//-----------------------------------------------------------------------------------------------------------
// Copy_BF   Copy entire contents of a source BF to a destination BF
//
// Returns   Nothing
//
// Available 5.0.0
//

[_public] void
Copy_BF (
         BF,  // Source BF
         BF   // Destination BF
         );


//-----------------------------------------------------------------------------------------------------------
// CRC_BF   Compute CRC of a file.
//
// Returns  CRC Value
//
// Available5.0.0
//

[_public] CRC
CRC_BF (
        BF,   // BF handle
        int,  // number of bytes to CRC
        CRC   // CRC start (use <define>CRC_INIT_VALUE</define> for new)
        );


//-----------------------------------------------------------------------------------------------------------
// Create_BF   Create BF object.
//
// Returns     BF Object
//
// Notes       
//             Run-time specific directory paths may be added the the front of file names
//             as follows:
//             
//             <geosoft>      the main Geosoft installation directory
//             <geosoft2>     the secondary Geosoft installation directory
//             <geotemp>      the Geosoft temporary file directory
//             <windows>      the operating system Windows directory
//             <system>       the operating system system directory
//             <other>        other environment variables
//             
//             For example "<geosoft>/user/csv/datum.csv"
//             
//
// Available   5.0.0
//

[_public] BF
Create_BF (
           string,  // file name to open ("" is a temporary file)
           int      // <define>BF_OPEN_MODE</define>
           );


//-----------------------------------------------------------------------------------------------------------
// CreateSBF_BF   Create BF object inside an SBF.
//
// Returns        BF Object
//
// Notes          see sbf.gxh
//
// Available      5.0.0
//

[_public] BF
CreateSBF_BF (
              SBF,     // Storage
              string,  // file name to open ("" is a temporary file)
              int      // <define>BF_OPEN_MODE</define>
              );


//-----------------------------------------------------------------------------------------------------------
// Destroy_BF   Destroy BF handle.
//
// Returns      nothing
//
// Notes        The DestroyEx call implies BF_KEEP
//
// Available    5.0.0
//

[_public] void
Destroy_BF (
            BF,   // BF handle
            int   // BF_?
            );


//-----------------------------------------------------------------------------------------------------------
// DestroyEx_BF   Destroy BF handle.
//
// Returns        Nothing
//
// Available      6.0.0
//

[_public] void
DestroyEx_BF (
              BF   // BF handle
              );


//-----------------------------------------------------------------------------------------------------------
// iEOF_BF   Returns 1 if at the end of the file
//
// Returns   
//           1 if at the end of the file,
//           0 if not at the end of the file
//           
//
// Available 5.0.0
//

[_public] int
iEOF_BF (
         BF   // BF handle
         );


//-----------------------------------------------------------------------------------------------------------
// iQueryWrite_BF   Check if you can write to the BF.
//
// Returns          
//                  0 - No
//                  1 - Yes
//                  
//
// Available        5.1.1
//

[_public] int
iQueryWrite_BF (
                BF   // BF handle
                );


//-----------------------------------------------------------------------------------------------------------
// IReadBinaryString_BF   Reads string data from current position in BF
//
// Returns                Nothing
//
// Available              6.3.0
//

[_public] void
IReadBinaryString_BF (
                      BF,          // BF handle
                      int,         // Number of bytes to read
                      int,         // <define>BF_ENCODE</define>
                      var string,  // data
                      int          // Length of the string buffer
                      );

#define ReadBinaryString_BF(A, B, C, D) IReadBinaryString_BF(A, B, C, D, sizeof(D))


//-----------------------------------------------------------------------------------------------------------
// iSize_BF   Returns the file length
//
// Returns    File size in bytes.
//
// Available  5.0.0
//

[_public] int
iSize_BF (
          BF   // BF handle
          );


//-----------------------------------------------------------------------------------------------------------
// iTell_BF   Returns current position of file pointer in bytes
//
// Returns    Current file pointer location
//
// Available  5.0.0
//

[_public] int
iTell_BF (
          BF   // BF handle
          );


//-----------------------------------------------------------------------------------------------------------
// ReadInt_BF   Reads int data from current position in BF
//
// Returns      Nothing
//
// Notes        
//              If the data source may be in byte order different from that
//              required by the reader, you can add the source byte-order
//              to the BF elelment type.  The byte order will be swapped
//              if required.  For example, to write out a real number 3.5
//              with Most-Significant_Byte first (Mortorola) convention:
//              
//              WriteReal_BF(hBF,BF_BYTEORDER_MSB+GS_REAL,3.5).
//              
//              If a byte order is not specified, the source is assumed to be
//              in the native byte order of the reading/writing computer.
//              
//
// Available    5.0.0
//

[_public] void
ReadInt_BF (
            BF,       // BF handle
            int,      // <define>GS_TYPES</define> and <define>BF_BYTEORDER</define>
            var int   // data
            );


//-----------------------------------------------------------------------------------------------------------
// ReadReal_BF   Reads real data from current position in BF
//
// Returns       Nothing
//
// Notes         
//               If the data source may be in byte order different from that
//               required by the reader, you can add the source byte-order
//               to the BF elelment type.  The byte order will be swapped
//               if required.  For example, to write out a real number 3.5
//               with Most-Significant_Byte first (Mortorola) convention:
//               
//               WriteReal_BF(hBF,BF_BYTEORDER_MSB+GS_REAL,3.5).
//               
//               If a byte order is not specified, the source is assumed to be
//               in the native byte order of the reading/writing computer.
//               
//
// Available     5.0.0
//

[_public] void
ReadReal_BF (
             BF,        // BF handle
             int,       // <define>GS_TYPES</define> and <define>BF_BYTEORDER</define>
             var real   // data
             );


//-----------------------------------------------------------------------------------------------------------
// ReadVM_BF   Read data to a VM from current position in BF
//
// Returns     Nothing
//
// Notes       
//             If the data source may be in byte order different from that
//             required by the reader, you can add the source byte-order
//             to the BF elelment type.  The byte order will be swapped
//             if required.  For example, to write out a real number 3.5
//             with Most-Significant_Byte first (Mortorola) convention:
//             
//             WriteReal_BF(hBF,BF_BYTEORDER_MSB+GS_REAL,3.5).
//             
//             If a byte order is not specified, the source is assumed to be
//             in the native byte order of the reading/writing computer.
//             
//
// Available   5.0.0
//

[_public] void
ReadVM_BF (
           BF,   // BF handle
           int,  // <define>GS_TYPES</define> and <define>BF_BYTEORDER</define>
           VM    // VM data to read, VM length is read
           );


//-----------------------------------------------------------------------------------------------------------
// ReadVV_BF   Read data to a VV from current position in BF
//
// Returns     Nothing
//
// Notes       
//             If the data source may be in byte order different from that
//             required by the reader, you can add the source byte-order
//             to the BF elelment type.  The byte order will be swapped
//             if required.  For example, to write out a real number 3.5
//             with Most-Significant_Byte first (Mortorola) convention:
//             
//             WriteReal_BF(hBF,BF_BYTEORDER_MSB+GS_REAL,3.5).
//             
//             If a byte order is not specified, the source is assumed to be
//             in the native byte order of the reading/writing computer.
//             
//
// Available   5.0.0
//

[_public] void
ReadVV_BF (
           BF,   // BF handle
           int,  // <define>GS_TYPES</define> and <define>BF_BYTEORDER</define>
           VV    // VV data to read, VV length is read
           );


//-----------------------------------------------------------------------------------------------------------
// SetDestroyStatus_BF   Set the flag to delete the file on close
//
// Returns               Nothing
//
// Available             6.0.0
//

[_public] void
SetDestroyStatus_BF (
                     BF,   // BF handle
                     int   // <define>BF_CLOSE</define>
                     );


//-----------------------------------------------------------------------------------------------------------
// WriteBinaryString_BF   Write a binary string to a BF
//
// Returns                Nothing
//
// Available              6.3.0
//

[_public] void
WriteBinaryString_BF (
                      BF,      // BF handle
                      int,     // <define>BF_ENCODE</define>
                      string   // string to write out
                      );


//-----------------------------------------------------------------------------------------------------------
// WriteDataNull_BF   Writes a null byte (0) to BF
//
// Returns            Nothing
//
// Available          5.0.0
//

[_public] void
WriteDataNull_BF (
                  BF   // BF handle
                  );


//-----------------------------------------------------------------------------------------------------------
// WriteInt_BF   Writes int to the BF
//
// Returns       Nothing
//
// Notes         
//               See comments on byte order for the Read.. functions if you
//               want to enforce a certain byte order.
//               
//               If a byte order is not specified, the data is written
//               in the native byte order of the writing computer.
//               
//
// Available     5.0.0
//

[_public] void
WriteInt_BF (
             BF,   // BF handle
             int,  // <define>GS_TYPES</define> and <define>BF_BYTEORDER</define>
             int   // data
             );


//-----------------------------------------------------------------------------------------------------------
// WriteReal_BF   Writes real to the BF
//
// Returns        Nothing
//
// Notes          
//                See comments on byte order for the Read.. functions if you
//                want to enforce a certain byte order.
//                
//                If a byte order is not specified, the data is written
//                in the native byte order of the writing computer.
//                
//
// Available      5.0.0
//

[_public] void
WriteReal_BF (
              BF,    // BF handle
              int,   // <define>GS_TYPES</define> and <define>BF_BYTEORDER</define>
              real   // data
              );


//-----------------------------------------------------------------------------------------------------------
// WriteVM_BF   Writes VM to the BF
//
// Returns      Nothing
//
// Notes        
//              See comments on byte order for the Read.. functions if you
//              want to enforce a certain byte order.
//              
//              If a byte order is not specified, the data is written
//              in the native byte order of the writing computer.
//              
//
// Available    5.0.0
//

[_public] void
WriteVM_BF (
            BF,   // BF handle
            int,  // <define>GS_TYPES</define> and <define>BF_BYTEORDER</define>
            VM    // data
            );


//-----------------------------------------------------------------------------------------------------------
// WriteVV_BF   Writes VV to the BF
//
// Returns      Nothing
//
// Notes        
//              See comments on byte order for the Read.. functions if you
//              want to enforce a certain byte order.
//              
//              If a byte order is not specified, the data is written
//              in the native byte order of the writing computer.
//              
//
// Available    5.0.0
//

[_public] void
WriteVV_BF (
            BF,   // BF handle
            int,  // <define>GS_TYPES</define> and <define>BF_BYTEORDER</define>
            VV    // data
            );





#endif

