//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// A collection of methods applied to PG objects, including
// fills, trending and 2-D FFT operations.
//
//-----------------------------------------------------------------------------------------------------------



#ifndef PGU_GXH_DEFINED
#define PGU_GXH_DEFINED

//===========================================================================================================
//
// Define	BLAKEY_TEST
//
// Types of BLAKEY tests
//
// BLAKEY_TEST_ONESIDE
// BLAKEY_TEST_TWOSIDE
// BLAKEY_TEST_THREESIDE
// BLAKEY_TEST_FOURSIDE
//
//===========================================================================================================

#define BLAKEY_TEST_ONESIDE      1
#define BLAKEY_TEST_TWOSIDE      2
#define BLAKEY_TEST_THREESIDE    3
#define BLAKEY_TEST_FOURSIDE     4


//===========================================================================================================
//
// Define	PGU_CORR
//
// Correlation (must be synchronized with <define>ST2_CORRELATION</define>)
//
// PGU_CORR_SIMPLE    Simple correlation
// PGU_CORR_PEARSON   Pearson's correlation (normalized to standard deviations)
//
//===========================================================================================================

#define PGU_CORR_SIMPLE     0
#define PGU_CORR_PEARSON    1


//===========================================================================================================
//
// Define	PGU_DIRECTGRID
//
// Type of statistic to use on the data points in each cell.
//
// PGU_DIRECTGRID_MINIMUM   Select the minimum value found in each cell
// PGU_DIRECTGRID_MAXIMUM   Select the maximum value found in each cell
// PGU_DIRECTGRID_MEAN      Select the mean of all values found in each cell
// PGU_DIRECTGRID_ITEMS     The number of valid (non-dummy) items found in each cell
//
//===========================================================================================================

#define PGU_DIRECTGRID_MINIMUM    0
#define PGU_DIRECTGRID_MAXIMUM    1
#define PGU_DIRECTGRID_MEAN       2
#define PGU_DIRECTGRID_ITEMS      3


//===========================================================================================================
//
// Define	PGU_DIRECTION
//
// Direction
//
// PGU_FORWARD    Forward direction: Removes mean and standard deviation,
//                storing the values in the VVs.
// PGU_BACKWARD   Backward direction: Applies mean and standard deviation
//                values in the VVs to the data.
//
//===========================================================================================================

#define PGU_FORWARD     0
#define PGU_BACKWARD    1


//===========================================================================================================
//
// Define	PGU_TRANS
//
// transform methods for the columns
//
// PGU_TRANS_NONE
// PGU_TRANS_LOG
//
//===========================================================================================================

#define PGU_TRANS_NONE    0
#define PGU_TRANS_LOG     1


//===========================================================================================================
//
// Define	PGU_INTERP_ORDER
//
// interpolation direction order
//
// PGU_INTERP_ORDER_XYZ
// PGU_INTERP_ORDER_XZY
// PGU_INTERP_ORDER_YXZ
// PGU_INTERP_ORDER_YZX
// PGU_INTERP_ORDER_ZXY
// PGU_INTERP_ORDER_ZYX
//
//===========================================================================================================

#define PGU_INTERP_ORDER_XYZ    0
#define PGU_INTERP_ORDER_XZY    1
#define PGU_INTERP_ORDER_YXZ    2
#define PGU_INTERP_ORDER_YZX    3
#define PGU_INTERP_ORDER_ZXY    4
#define PGU_INTERP_ORDER_ZYX    5


//===========================================================================================================
// Group General
//===========================================================================================================

//-----------------------------------------------------------------------------------------------------------
// Bool_PGU   Apply reference file boolean mask to pager
//
// Returns    Nothing
//
// Available  5.0.0
//

[_licensed] void
Bool_PGU (
          PG,      // pager obj
          string   // sRefFil - reference file for boolean mask flag.
          );


//-----------------------------------------------------------------------------------------------------------
// DirectGriddingDAT_PGU   Direct-gridding method, DAT version.
//
// Returns                 Nothing
//
// Notes                   Grid cells take on the specified statistic of the values inside the
//                         cell area. Grid cells containing no data values are set to dummy.
//
// Available               7.3.0
//

[_licensed] void
DirectGriddingDAT_PGU (
                       PG,    // input grid
                       real,  // X origin of grid
                       real,  // Y origin of grid
                       real,  // X cell size
                       real,  // Y cell size
                       real,  // rotation angle (degrees CCW).
                       DAT,   // DAT source
                       int    // <define>PGU_DIRECTGRID</define>
                       );


//-----------------------------------------------------------------------------------------------------------
// DirectGriddingDAT3D_PGU   Direct-gridding method, DAT version, 3D.
//
// Returns                   Nothing
//
// Notes                     3D grid cells take on the specified statistic of the values inside the
//                           cell area. Grid cells containing no data values are set to dummy.
//
// Available                 8.0.0
//

[_licensed] void
DirectGriddingDAT3D_PGU (
                         PG,    // input 3D PG
                         real,  // X origin of 3D grid
                         real,  // Y origin of 3D grid
                         real,  // Z origin of 3D grid
                         real,  // X cell size
                         real,  // Y cell size
                         real,  // Z cell size
                         real,  // rotation angle (degrees CCW, vertical axis only).
                         DAT,   // 3D DAT source
                         int    // <define>PGU_DIRECTGRID</define>
                         );


//-----------------------------------------------------------------------------------------------------------
// DirectGriddingDB_PGU   Direct-gridding method, DB version.
//
// Returns                Nothing
//
// Notes                  Grid cells take on the specified statistic of the values inside the
//                        cell area. Grid cells containing no data values are set to dummy.
//
// Available              7.3.0
//

[_licensed] void
DirectGriddingDB_PGU (
                      PG,       // input grid
                      real,     // X origin of grid
                      real,     // Y origin of grid
                      real,     // X cell size
                      real,     // Y cell size
                      real,     // rotation angle (degrees CCW).
                      DB,       // Database
                      DB_SYMB,  // X Channel [READONLY]
                      DB_SYMB,  // Y Channel [READONLY]
                      DB_SYMB,  // Data Channel [READONLY]
                      int       // <define>PGU_DIRECTGRID</define>
                      );


//-----------------------------------------------------------------------------------------------------------
// DirectGriddingDB3D_PGU   Direct-gridding method, DB version, 3D.
//
// Returns                  Nothing
//
// Notes                    3D grid cells take on the specified statistic of the values inside the
//                          cell area. Grid cells containing no data values are set to dummy.
//
// Available                8.0.0
//

[_licensed] void
DirectGriddingDB3D_PGU (
                        PG,       // input 3D PG
                        real,     // X origin of 3D grid
                        real,     // Y origin of 3D grid
                        real,     // Z origin of 3D grid
                        real,     // X cell size
                        real,     // Y cell size
                        real,     // Z cell size
                        real,     // rotation angle (degrees CCW, vertical axis only).
                        DB,       // Database
                        DB_SYMB,  // X Channel [READONLY]
                        DB_SYMB,  // Y Channel [READONLY]
                        DB_SYMB,  // Z Channel [READONLY]
                        DB_SYMB,  // Data Channel [READONLY]
                        int       // <define>PGU_DIRECTGRID</define>
                        );


//-----------------------------------------------------------------------------------------------------------
// DirectGriddingVV_PGU   Direct-gridding method, VV version.
//
// Returns                Nothing
//
// Notes                  Grid cells take on the specified statistic of the values inside the
//                        cell area. Grid cells containing no data values are set to dummy.
//
// Available              7.3.0
//

[_licensed] void
DirectGriddingVV_PGU (
                      PG,    // input grid
                      real,  // X origin of grid
                      real,  // Y origin of grid
                      real,  // X cell size
                      real,  // Y cell size
                      real,  // rotation angle (degrees CCW).
                      VV,    // X locations of values
                      VV,    // Y locations of values
                      VV,    // Z values to grid
                      int    // <define>PGU_DIRECTGRID</define>
                      );


//-----------------------------------------------------------------------------------------------------------
// Expand_PGU   Expand a pager by filling the dummies for expanded edges
//
// Returns      Nothing
//
// Notes        3D pagers are expanded in X,Y direction the number of slices(Z) is unchanged .
//
// Available    5.0.0
//

[_licensed] void
Expand_PGU (
            PG,    // original pager obj
            PG,    // expanded pager obj
            real,  // % expansion
            int,   // option  0 - rectangular, 1 - square
            int,   // X dimension to expand to (0 for expansion to FFT2D legal dimension)
            int    // Y dimension to expand to (0 for expansion to FFT2D legal dimension)
            );


//-----------------------------------------------------------------------------------------------------------
// Fill_PGU   Replace all dummies in a pager by predict values.
//
// Returns    Nothing
//
// Available  5.0.0
//

[_licensed] void
Fill_PGU (
          PG,      // pager obj
          int,     // Roll off weighting option: 1 - linear, 2 - square
          real,    // dRollBase - the value to roll off to, GS_R8DM for roll off to mean value line by line.
          int,     // lRollDist - (at unit of cell dist.) for roll-off. 0 for no roll of, -1 for the default: 2 times of min. dummy edge dim.
          int,     // lMxf - max. filter length.  -1 for no max. entropy. 0 for the default of MIN(minimum dummy edge dim, 32).
          int,     // lMxp - max. pred. sample 0 for the default of 2*lMxf.
          real,    // dAmpLmt - limit (abs. value) amplitudes to this level. Amplitudes are limited starting at half this value. <=0.0 for no amp limit.
          real,    // dEdgeLmt - limit edge (abs. value) amplitudes to this level. <0.0 for no edge limit.
          int,     // lEdgeWidth - within this dist. (at unit of cell size) for amp. limited. -1 for no edge limit. 0 for the default of minimum dummy edge dim.
          int,     // iNPass - number of time to pass smooth filter
          string   // sRefFil - reference file for smooth filter flag.
          );


//-----------------------------------------------------------------------------------------------------------
// FillValue_PGU   Set all values in a pager to a single value.
//
// Returns         Nothing
//
// Available       5.0.8
//

[_licensed] void
FillValue_PGU (
               PG,    // pager obj
               real   // Value to set in pager
               );


//-----------------------------------------------------------------------------------------------------------
// FiltSym_PGU   Apply 5x5, 7x7 or 9X9 symmetric convolution filter to a PG.
//
// Returns       Nothing
//
// Available     5.1.5
//

[_licensed] void
FiltSym_PGU (
             PG,      // pager obj
             int,     // number of time to pass smooth filter
             int,     // flag to use filter file
             string,  // file for filter values
             int,     // size of filter window, 5/7/9
             VV       // array of 6/10/15 filter coefficients
             );


//-----------------------------------------------------------------------------------------------------------
// FiltSym5_PGU   Apply 5x5 symmetric convolution filter to a PG.
//
// Returns        Nothing
//
// Available      5.0.0
//

[_licensed] void
FiltSym5_PGU (
              PG,      // pager obj
              int,     // number of time to pass smooth filter
              int,     // flag to use filter file
              string,  // file for filter values
              VV       // array of 6 filter coefficients at position 00, 10, 11, 20, 21, 22. Symmetric filters look like : 22 21 20 21 22 21 11 10 11 21 20 10 00 10 20 21 11 10 11 21 22 21 20 21 22
              );


//-----------------------------------------------------------------------------------------------------------
// GridPeak_PGU   Pick grid peaks.
//
// Returns        Nothing
//
// Notes          Blakey test limit defines how grid peaks are to be found.
//                For example, with the BLAKEY_TEST_ONESIDE, a grid
//                point will be picked if its grid value is greater than
//                the value of one or more of its four neighouring points.
//
// Available      5.0.0
//

[_licensed] void
GridPeak_PGU (
              string,  // Grid file name
              int,     // <define>BLAKEY_TEST</define>
              VV,      // X of found peaks
              VV,      // Y of found peaks
              VV       // Z values of found peaks
              );


//-----------------------------------------------------------------------------------------------------------
// IDWGriddingDAT_PGU   IDWGriddingDAT_PGU     Inverse-distance weighting gridding method, DAT version.
//
// Returns              Nothing
//
// Notes                See the notes for IDWGriddingDB_PGU.
//
// Available            7.3.0
//

[_licensed] void
IDWGriddingDAT_PGU (
                    PG,   // input grid
                    DAT,  // DAT source
                    REG   // Parameters (see above)
                    );


//-----------------------------------------------------------------------------------------------------------
// IDWGriddingDAT3D_PGU   IDWGriddingDAT3D_PGU     Inverse-distance weighting gridding method, DAT version, 3D.
//
// Returns                Nothing
//
// Notes                  See the notes for IDWGriddingDB3D_PGU.
//
// Available              8.0.0
//

[_licensed] void
IDWGriddingDAT3D_PGU (
                      PG,   // input 3D PG
                      DAT,  // DAT source
                      REG   // Parameters (see above)
                      );


//-----------------------------------------------------------------------------------------------------------
// IDWGriddingDB_PGU   IDWGriddingDB_PGU     Inverse-distance weighting gridding method, DB version.
//
// Returns             Nothing
//
// Notes               Grid cells take on the averaged values within a search radius, weighted inversely by distance.
//                     
//                     Weighting can be controlled using the power and slope properties;
//                     
//                     weighting = 1 / (distance^wtpower + 1/slope) where distance is in
//                     units of grid cells (X dimenstion). Default is 0.0,
//                     
//                     If the blanking distance is set, all cells whose center point is not within the blanking distance of
//                     at least one data point are set to dummy.
//                     
//                     REG Parameters:
//                     
//                     X0, Y0, DX, DY: Grid origin, and cell sizes (required)
//                     WT_POWER (default=2), WT_SLOPE (default=1) Weighting function parameters
//                     SEARCH_RADIUS: Distance weighting limit (default = 4 * SQRT(DX*DY))
//                     BLANKING_DISTANCE: Dummy values farther from data than this distance. (default = 4 * SQRT(DX*DY))
//                     LOG: Apply log transform to input data before gridding (0:No (default), 1:Yes)?
//                     LOG_BASE: One of VV_LOG_BASE_10 (default) or VV_LOG_BASE_E
//                     LOG_NEGATIVE: One of VV_LOG_NEGATIVE_NO (default) or VV_LOG_NEGATIVE_YES
//
// Available           7.3.0
//

[_licensed] void
IDWGriddingDB_PGU (
                   PG,       // input grid
                   DB,       // Database
                   DB_SYMB,  // X Channel [READONLY]
                   DB_SYMB,  // Y Channel [READONLY]
                   DB_SYMB,  // Data Channel [READONLY]
                   REG       // Parameters (see above)
                   );


//-----------------------------------------------------------------------------------------------------------
// IDWGriddingDB3D_PGU   IDWGriddingDB3D_PGU     Inverse-distance weighting gridding method, DB version, 3D.
//
// Returns               Nothing
//
// Notes                 3D cells take on the averaged values within a search radius, weighted inversely by distance.
//                       
//                       Weighting can be controlled using the power and slope properties;
//                       
//                       weighting = 1 / (distance^wtpower + 1/slope) where distance is in
//                       units of grid cells (X dimenstion). Default is 0.0,
//                       
//                       If the blanking distance is set, all cells whose center point is not within the blanking distance of
//                       at least one data point are set to dummy.
//                       
//                       REG Parameters:
//                       
//                       X0, Y0, Z0, DX, DY, DZ: Grid origin, and cell sizes (required)
//                       WT_POWER (default=2), WT_SLOPE (default=1) Weighting function parameters
//                       SEARCH_RADIUS: Distance weighting limit (default = 4 * CUBE_ROOT(DX*DY*DZ))
//                       BLANKING_DISTANCE: Dummy values farther from data than this distance. (default = 4 * CUBE_ROOT(DX*DY*DZ))
//                       LOG: Apply log transform to input data before gridding (0:No (default), 1:Yes)?
//                       LOG_BASE: One of VV_LOG_BASE_10 (default) or VV_LOG_BASE_E
//                       LOG_NEGATIVE: One of VV_LOG_NEGATIVE_NO (default) or VV_LOG_NEGATIVE_YES
//
// Available             8.0.0
//

[_licensed] void
IDWGriddingDB3D_PGU (
                     PG,       // input 3D PG
                     DB,       // Database
                     DB_SYMB,  // X Channel [READONLY]
                     DB_SYMB,  // Y Channel [READONLY]
                     DB_SYMB,  // Z Channel [READONLY]
                     DB_SYMB,  // Data Channel [READONLY]
                     REG       // Parameters (see above)
                     );


//-----------------------------------------------------------------------------------------------------------
// IDWGriddingVV_PGU   IDWGriddingVV_PGU     Inverse-distance weighting gridding method, VV version.
//
// Returns             Nothing
//
// Notes               See the notes for IDWGriddingDB_PGU.
//
// Available           7.3.0
//

[_licensed] void
IDWGriddingVV_PGU (
                   PG,   // input grid
                   VV,   // X locations
                   VV,   // Y locations
                   VV,   // Data values to grid
                   REG   // Parameters (see above)
                   );


//-----------------------------------------------------------------------------------------------------------
// NumericToThematic_PGU   NumericToThematic_PGU    Set index values in a pager based on a numeric pager with translation VV.
//                         
//                         Returns			  Nothing
//
// Returns
//
// Notes                   The values in the input data VV represent the center-of-range
//                         values of unique properties with indices 0 to N-1, where N
//                         is the number of items in the input VV.
//                         
//                         This VV is sorted from smallest to largest, and each value in
//                         in the input numeric PG is tested to see into which range it goes.
//                         The closest range value for each item is used, so the half-way point
//                         is the dividing point. The top and bottom-most range widths are determined
//                         by the "inside half-width" to the nearest range.
//                         
//                         The INDEX of the closest range is then inserted into the output PG, so
//                         it can be used in a thematic voxel (for instance).
//
// Available               7.3.0
//

[_licensed] void
NumericToThematic_PGU (
                       PG,  // Input numeric PG
                       VV,  // Translation VV (see notes above)
                       PG   // Output thematic PG
                       );


//-----------------------------------------------------------------------------------------------------------
// Peakedness_PGU   Find all peaks in peakedneess grid pager
//
// Returns          Nothing
//
// Available        5.0.8
//

[_licensed] void
Peakedness_PGU (
                string,  // Grid file name
                int,     // Cutoff limit for finding peaks
                VV,      // X of found peaks
                VV,      // Y of found peaks
                VV       // Z values of found peaks
                );


//-----------------------------------------------------------------------------------------------------------
// PeakednessGrid_PGU   Create peakedneess grid from input grid.
//
// Returns              Nothing
//
// Notes                This function creates a peakedneess grid from input grid.
//                      Radius, is the maximum radius at which the value of the parent pixel is compared to
//                      the value of surrounding pixels.
//                      PercentLesser, is used to indicate the percentage of pixels at each radii smaller than
//                      or equal to Radius that must have value lower than the parent pixel in order to call
//                      that radius true or equal to 1.
//                      Description:  For each pixel in the grid a series of radii are evaluated from 1 to Radius.
//                      If the percentage of pixels for a given radius is less than PercentLesser the parent pixel
//                      receives an additional 1.
//                      For examples if the Radius is set to 5 and the PercentLesser is set to 70%.
//                      And radius 1 = 90%, radius 2 = 85%, radius 3 = 75%, radius 4 = 70% and radius 5 = 65%
//                      then the parent pixel would receive 1+1+1+1+0 = 4.
//                      Use:  This function is useful in isolating the anomaly peaks in data that has a large
//                      value range for anomalies. For example the 1 mV anomaly could quite possibly have
//                      the same representation as the 100 mV anomaly using this function.
//
// Available            5.0.8
//

[_licensed] void
PeakednessGrid_PGU (
                    string,  // Input grid file name
                    string,  // Output grid (peakedness) file name
                    int,     // Radius
                    real     // PercentLess
                    );


//-----------------------------------------------------------------------------------------------------------
// RefFile_PGU   Create a reference file (boolean mask flag) from pager.
//
// Returns       Nothing
//
// Notes         A reference file is a binary file with the following format:
//               
//               The first 8 bytes are the pager dimensions NX and NY as longs.
//               The remaining bits, one bit per pager cell - (NX * NY)/8 bytes
//               are zero where the pager is dummy, and 1 where the pager is defined.
//               
//               The reference file is used in various operations where it is
//               necessary to mask some output to the original defined cells.
//
// Available     5.0.0
//

[_licensed] void
RefFile_PGU (
             PG,      // PG object
             string   // Reference file name
             );


//-----------------------------------------------------------------------------------------------------------
// SaveFile_PGU   Writes a PG to an image file.
//
// Returns        Nothing
//
// Notes          The trend object and projection are optional.
//
// Available      5.0.0
//

[_licensed] void
SaveFile_PGU (
              PG,      // input PG object
              real,    // X origin
              real,    // Y origin
              real,    // DX
              real,    // DY
              real,    // rotation angle
              TR,      // Trend information or NULL
              IPJ,     // Projection or NULL
              string   // Output file name
              );


//-----------------------------------------------------------------------------------------------------------
// ThematicToNumeric_PGU   Set numeric values in a pager based on an index pager with translation VV.
//                         
//                         Returns			  Nothing
//
// Returns
//
// Notes                   The items in the input data VV are inserted into
//                         the output PG using the indices in the index PG.
//                         
//                         This function is useful when converting a thematic voxel, which is
//                         type GS_LONG and contains indices into its own internal TPAT
//                         object, and you provide a numeric mapping VV, calculated using
//                         SetupTranslateToNumericVV_TPAT.
//
// Available               7.3.0
//

[_licensed] void
ThematicToNumeric_PGU (
                       PG,  // Input Index PG
                       VV,  // Translation VV
                       PG   // Output Data PG
                       );


//-----------------------------------------------------------------------------------------------------------
// Trend_PGU   Trend remove or replace back in pager
//
// Returns     Nothing
//
// Available   5.0.0
//

[_licensed] void
Trend_PGU (
           PG,    // original pager obj
           PG,    // trended pager obj
           TR,    // trend obj
           int,   // option  0 - calculate, 1 - given in TR, 2 - replace back from TR
           int,   // trend base on: 0 - all points, 1 - edge points
           real,  // trend orogin  rXo,
           real,  // trend orogin  rYo,
           real,  // inclrement in X directon  rDx,
           real   // inclrement in Y directon  rDy
           );




//===========================================================================================================
// Group Math Operations
//===========================================================================================================

//-----------------------------------------------------------------------------------------------------------
// AddScalar_PGU   Add a scalar value to a pager
//
// Returns         Nothing
//
// Notes           Only available for FLOAT or DOUBLE pagers
//
// Available       7.1.0
//

[_licensed] void
AddScalar_PGU (
               PG,    // Pager
               real   // Scalar Value
               );


//-----------------------------------------------------------------------------------------------------------
// MultiplyScalar_PGU   Multiply a scalar value and a pager
//
// Returns              Nothing
//
// Notes                Only available for FLOAT or DOUBLE pagers
//
// Available            7.1.0
//

[_licensed] void
MultiplyScalar_PGU (
                    PG,    // Pager
                    real   // Scalar Value
                    );




//===========================================================================================================
// Group Matrix Operation
//===========================================================================================================

//-----------------------------------------------------------------------------------------------------------
// CorrelationMatrix_PGU   Find the correlations between columns in a matrix
//
// Returns                 Nothing
//
// Notes                   The input matrix is M rows by N columns. The returned matrix
//                         is a symmetric N by N matrix whose elements are the normalized
//                         dot products of the columns of the input matrix with themselves.
//                         The elements take on values from 0 (orthogonal) to 1 (parallel).
//
// Available               5.0.0
//

[_licensed] void
CorrelationMatrix_PGU (
                       PG,  // input matrix
                       PG   // returned correlation matrix
                       );


//-----------------------------------------------------------------------------------------------------------
// CorrelationMatrix2_PGU   Same as CorrelationMatrix_PGU, but select correlation type.
//
// Returns                  Nothing
//
// Available                5.1.8
//

[_licensed] void
CorrelationMatrix2_PGU (
                        PG,   // input matrix
                        int,  // <define>PGU_CORR</define>
                        PG    // returned correlation matrix
                        );


//-----------------------------------------------------------------------------------------------------------
// InvertMatrix_PGU   Inverts a square matrix using LU decomp. and back-substitution
//
// Returns            Nothing
//
// Notes              This is an "in-place" operation, and set up so that the input and
//                    output pagers may be the same handle. (If they are different, the
//                    input pager remains unchanged).
//                    Pagers and VVs must be type REAL.
//
// Available          5.0.0
//

[_licensed] void
InvertMatrix_PGU (
                  PG,  // Input matrix
                  PG   // Output inverted matrix (can be same as input).
                  );


//-----------------------------------------------------------------------------------------------------------
// Jacobi_PGU   Find eigenvalues, eigenvectors of a real symmetric matrix.
//
// Returns      Nothing
//
// Notes        The number of rows must equal the number of columns.
//              Eienvalues, vectors are sorted in descending order.
//
// Available    5.0.0
//

[_licensed] void
Jacobi_PGU (
            PG,  // Input Pager
            VV,  // Eigenvalues (returned)
            PG   // Eigenvectors (returned)
            );


//-----------------------------------------------------------------------------------------------------------
// LUBackSub_PGU   Solve a linear system using LU decomposition and back-substitution.
//
// Returns         Nothing
//
// Notes           Solves the system Ax = b for a given b, using the LU decomposition
//                 of the matrix a
//                 The LU decomposition and the permutation vector are obtained
//                 from LUBackSub_PGU.
//                 Pagers and VVs must be type REAL except for the permutation vector,
//                 which should be INT
//
// Available       5.0.0
//

[_licensed] void
LUBackSub_PGU (
               PG,  // LU decomposition of A
               VV,  // permutation vector (type INT)
               VV,  // right hand side vector B (input)
               VV   // solution vector (output)
               );


//-----------------------------------------------------------------------------------------------------------
// LUDecomp_PGU   Perform an LU decomposition on a square pager.
//
// Returns        Nothing
//
// Notes          The L and U matrix are both contained in the returned pager; The
//                "L" matrix is composed of the sub-diagonal elements of the output
//                pager, as well as "1" values on the diagonal. The "U" matrix is
//                composed of the diagonal elements (sub-diagonal elements set to 0).
//                This is an "in-place" operation, and set up so that the input and
//                output pagers may be the same handle. (If they are different, the
//                input pager remains unchanged).
//                The LU decomposition, and the permutation vector are used for
//                LUBackSub_PGU.
//                Pagers must be type REAL and the permutation vector type INT
//
// Available      5.0.0
//

[_licensed] void
LUDecomp_PGU (
              PG,  // input
              PG,  // LU decomposition (may be same pager as input)
              VV   // permutation vector (type INT)
              );


//-----------------------------------------------------------------------------------------------------------
// MatrixMult_PGU   Multiply two pagers as if they were matrices.
//
// Returns          Nothing
//
// Notes            The matrices must be correctly dimensioned, taking into
//                  account whether transposition should occur before
//                  multiplication. The input matrices are not altered on output (even
//                  if transposition is requested).
//                  Assertions if: Matrices are not expected sizes
//                  Dummies are treated as 0 values.
//
// Available        5.0.0
//

[_licensed] void
MatrixMult_PGU (
                PG,   // matrix U
                int,  // TRUE (1) if U should be transposed before multiplication
                PG,   // matrix V
                int,  // TRUE (1) if V should be transposed before multiplication
                PG    // returned matrix U*V
                );


//-----------------------------------------------------------------------------------------------------------
// MatrixVectorMult_PGU   Multiply a VV by a pager like a matrix*vector multiply.
//
// Returns                Nothing
//
// Notes                  The matrix is input as an M rows (data) by N columns (variables) PG.
//                        The vector must be of length N. The output VV is set to length M.
//                        The PG and VVs must be type GS_DOUBLE.
//                        Terminates if: Matrices, VV are not expected sizes (taken from U)
//                        PGs are not REAL.
//                        Dummies are treated as 0 values.
//
// Available              5.0.0
//

[_licensed] void
MatrixVectorMult_PGU (
                      PG,  // matrix U
                      VV,  // vector x
                      VV   // returned vector U*x
                      );


//-----------------------------------------------------------------------------------------------------------
// SVDecompose_PGU   Do a singular value decomposition on a matrix stored as a PG
//
// Returns           Nothing
//
// Notes             The matrix is input as an N rows (data) by M columns (variables) PG.
//                   On return, the matrix is decomposed to A = U * W * Vt.
//                   If M<N, then an error will be registered. In this case, augment the
//                   "A" PG with rows of zero values.
//                   The input matrices must be A[M,N], U[M.N] and V[N,N]. The length of the W VV
//                   is set by sSVD_PGU to N.
//                   The Pagers must be type REAL.
//                   Terminates if: U is not M by N. (Taken from size of A)
//                   V is not N by N. (Taken from #columns in A).
//                   PGs, VV are not REAL
//
// Available         5.0.0
//

[_licensed] void
SVDecompose_PGU (
                 PG,  // Input A matrix, M data (rows), N variables (columns)
                 PG,  // The returned U Matrix
                 VV,  // Returned weights (W)
                 PG   // Returned V matrix
                 );


//-----------------------------------------------------------------------------------------------------------
// SVRecompose_PGU   Reconstitute the original matrix from an SVD.
//
// Returns           Nothing
//
// Notes             The matrix is input as an N rows (data) by M columns (variables) PG.
//                   On return, the matrix is decomposed to A = U * W * Vt.
//                   If M<N, then an error will be registered. In this case, augment the
//                   "A" PG with rows of zero values.
//                   The input matrices must be A[M,N], U[M.N] and V[N,N]. The length of the W VV
//                   is set by sSVDecompose_PGU to N.
//                   The Pagers must be type GS_DOUBLE.
//                   Terminates if: U is not M by N. (Taken from size of A)
//                   V is not N by N. (Taken from #columns in A).
//                   PGs, VV are not REAL.
//                   Dummies are treated as 0 values.
//
// Available         5.0.0
//

[_licensed] void
SVRecompose_PGU (
                 PG,    // U matrix
                 VV,    // Weights (W)
                 PG,    // V matrix
                 real,  // Minimum weight to use (Dummy for all)
                 PG     // A matrix (returned)
                 );




//===========================================================================================================
// Group Principal Component Analysis
//===========================================================================================================

//-----------------------------------------------------------------------------------------------------------
// PCCommunality_PGU   Determines principal component communalities.
//
// Returns             Nothing
//
// Notes               Calculate communalities (sums of the squares of the column
//                     values in each row)
//                     Pagers and VVs must be type GS_DOUBLE.
//
// Available           5.0.0
//

[_licensed] void
PCCommunality_PGU (
                   PG,  // Input pager of the principal components
                   VV   // returned communality values
                   );


//-----------------------------------------------------------------------------------------------------------
// PCLoadings_PGU   Compute the principal component loadings from the standardized data.
//
// Returns          Nothing
//
// Notes            Works on columns of the PG.
//                  Calculates the correlation matrix from the columns of the
//                  standardized data, then computes the eigen values and eigenvectors
//                  of the correlation matrix. The loadings are the eigenvectors, ordered
//                  by descending eigenvalues, scaled by the square root of the
//                  eigenvalues. The returned pager must be sized the same as the
//                  input pager.
//                  Correlations are performed using "PGU_CORR_SIMPLE", so if you want
//                  Pearson correlations, or wish to use a modified correlation matrix,
//                  use PCLoadings2_PGU and input the correlation matrix directly.
//
// Available        5.0.0
//

[_licensed] void
PCLoadings_PGU (
                PG,  // standardized data matrix (M by N)
                PG   // principal component loadings (N by N)
                );


//-----------------------------------------------------------------------------------------------------------
// PCLoadings2_PGU   Same as PCLoading_PGU, but input correlation matrix.
//
// Returns           Nothing
//
// Notes             See PCLoadings_PGU.
//
// Available         5.1.8
//

[_licensed] void
PCLoadings2_PGU (
                 PG,  // correllation matrix (N by N)
                 PG   // principal component loadings (N by N)
                 );


//-----------------------------------------------------------------------------------------------------------
// PCScores_PGU   Compute the principal component scores from the standardized data.
//
// Returns        Nothing
//
// Notes          t  -1
//                Forms the product X Ap (Ap Ap),  where X is the
//                standardized data matrix, and Ap is the matrix of
//                principal component loadings (see PCLoadings_PGU).
//                The loadings must be input, and can be calculated by calling
//                PCLoadings_PGU.
//                Pagers and VVs must be type GS_DOUBLE.
//
// Available      5.0.0
//

[_licensed] void
PCScores_PGU (
              PG,  // standardized data matrix  (M by N)
              PG,  // principal component loadings (input) (N by L, L<=N)
              PG   // principal component scores (returned) (M by L, L<=N)
              );


//-----------------------------------------------------------------------------------------------------------
// PCStandardize_PGU   Remove/Replace mean and standard deviation
//
// Returns             Nothing
//
// Notes               Works on columns of the PG.
//
// Available           5.0.0
//

[_licensed] void
PCStandardize_PGU (
                   PG,   // matrix to standardize
                   VV,   // means
                   VV,   // standard deviations
                   int   // <define>PGU_DIRECTION</define>
                   );


//-----------------------------------------------------------------------------------------------------------
// PCStandardize2_PGU   Remove/Replace mean and standard deviation, subset values.
//
// Returns              Nothing
//
// Notes                Like PCStandardize_PGU, except that not all the values are
//                      included in the calculation of the means and standard
//                      deviations. The inclusion is controlled by a mask VV,
//                      The rows where the mask is dummy are not included
//                      in the calculation, but ALL the values are standardized.
//
// Available            5.1.8
//

[_licensed] void
PCStandardize2_PGU (
                    PG,   // matrix to standardize
                    VV,   // mask VV for data selection (forward only)
                    VV,   // means
                    VV,   // standard deviations
                    int   // forward or reverse
                    );


//-----------------------------------------------------------------------------------------------------------
// PCTransform_PGU   Transform/De-transform data.
//
// Returns           Nothing
//
// Notes             Works on columns of the PG.
//                   Forward direction: Applies the selected transform to the data.
//                   Backward direction: Applies the inverse transform to the data.
//                   The detection limits are input with a VV. In the forward
//                   transform, data values less than the detection limit are set
//                   to the limit.
//                   The factor limits are input with a VV. In the forward
//                   transform, data values greater than the maximum values are set
//                   to the maximum.
//
// Available         5.0.0
//

[_licensed] void
PCTransform_PGU (
                 PG,   // matrix to transform
                 VV,   // detection limits for the columns
                 VV,   // maximum values for the columns
                 VV,   // <define>PGU_TRANS</define>
                 int   // <define>PGU_DIRECTION</define>
                 );


//-----------------------------------------------------------------------------------------------------------
// PCVarimax_PGU   Perform the Kaiser Varimax transformation on pr. comp. loadings
//
// Returns         Nothing
//
// Notes           Rotates the principal components using the Kaiser's varimax
//                 scheme to move move each factor axis to positions so that
//                 projections from each variable on the factor axes are either
//                 near the extremities or near the origin.
//                 Pagers must be type GS_DOUBLE.
//
// Available       5.0.0
//

[_licensed] void
PCVarimax_PGU (
               PG,  // principal component loadings (input) (N by M, M<=N)
               PG   // rotated principal component loadings (returned) (N by L, L<=M)
               );




//===========================================================================================================
// Group Specialized Operations
//===========================================================================================================

//-----------------------------------------------------------------------------------------------------------
// rMaximumTerrainSteepness_PGU   Compute the Maximum Steepness of a topography Pager
//
// Returns                        Maximum Terrain Steepness Computation.
//
// Notes                          Calculates forward-looking slopes SX and SY in the X and Y directions
//                                using pager locations (ix, iy), (ix+size, iy), (ix, iy+isize)
//                                and returns SX*SX + SY*SY.
//                                The values in the last "size" rows and columns are not
//                                processed.
//                                The wrapper was created for testing and development purposes.
//
// Available                      7.1.0
//

[_licensed] real
rMaximumTerrainSteepness_PGU (
                              PG,   // Topography Pager
                              int   // Annular Size
                              );





#endif

