//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// 
// The TB class is a high-performance table class used to
// perform table-based processing, such as leveling data in
// an OASIS database. The LTB class is recommended for use
// with small tables produced from short lists such as the
// different geographic projections and their defining parameters.
// 
//
//-----------------------------------------------------------------------------------------------------------



#ifndef TB_GXH_DEFINED
#define TB_GXH_DEFINED

//===========================================================================================================
//
// Define	TB_SEARCH
//
// TB Searching mode
//
// TB_SEARCH_BINARY   Random searches in a table.
// TB_SEARCH_LINEAR   Linear searches up or down a table (Default).
//
//===========================================================================================================

#define TB_SEARCH_BINARY    0
#define TB_SEARCH_LINEAR    1


//-----------------------------------------------------------------------------------------------------------
// _SetSearchMode_TB   Set the search mode of a table.
//
// Returns             Nothing
//
// Notes               
//                     If performance is an issue, you may want to test which search
//                     mode provides the best performance with typical data.
//                     
//
// Available           5.0.0
//

[_public] void
_SetSearchMode_TB (
                   TB,   // Table
                   int   // <define>TB_SEARCH</define>
                   );
#define SetSearchMode_TB _SetSearchMode_TB

//-----------------------------------------------------------------------------------------------------------
// Create_TB   Loads a table into memory and return a table handle.
//
// Returns     TB Object
//
// Notes       
//             If the table contains fewer data columns than are defined by the
//             the table header, the TB object will read in the table and dummy
//             the elements of the missing data columns.
//             
//
// Available   5.0.0
//

[_public] TB
Create_TB (
           string   // Name of the table file to load
           );


//-----------------------------------------------------------------------------------------------------------
// CreateDB_TB   Create a table from a database.
//
// Returns       TB Object
//
// Notes         
//               The table will contain fields for all channels in
//               the database.
//               
//               The database is not loaded with data.  Use the LoadDB_TB
//               function to load data into the table.
//               
//
// Available     5.0.0
//

[_public] TB
CreateDB_TB (
             DB   // Database
             );


//-----------------------------------------------------------------------------------------------------------
// CreateLTB_TB   Create a table from an LTB database.
//
// Returns        TB Object
//
// Available      5.0.0
//

[_public] TB
CreateLTB_TB (
              LTB   // LTB object
              );


//-----------------------------------------------------------------------------------------------------------
// Destroy_TB   This method destroys a table resource.
//
// Returns      Nothing
//
// Available    5.0.0
//

[_public] void
Destroy_TB (
            TB   // Table Object to Destroy
            );


//-----------------------------------------------------------------------------------------------------------
// Field_TB   Get a field handle.
//
// Returns    The handle to the field (must be present)
//
// Available  5.0.0
//

[_public] TB_FIELD
Field_TB (
          TB,      // Table
          string   // Field name
          );


//-----------------------------------------------------------------------------------------------------------
// GetString_TB   Gets a string value from a table element.
//
// Returns        Nothing
//
// Available      5.0.0
//

[_public] void
GetString_TB (
              TB,          // Table handle
              int,         // Row of element to Get
              int,         // Column of element to Get
              var string,  // returned string
              int          // maximum string size
              );

#define _GetString_TB(A, B, C, D) GetString_TB(A, B, C, D, sizeof(D))


//-----------------------------------------------------------------------------------------------------------
// iDataType_TB   Returns the data type for the specified column.
//
// Returns        <define>DB_CATEGORY_CHAN</define>
//
// Available      5.0.1
//

[_public] int
iDataType_TB (
              TB,   // Table handle
              int   // Column of element to Get
              );


//-----------------------------------------------------------------------------------------------------------
// IFindColByIndex_TB   Finds a column's name by its index.
//
// Returns              Nothing
//
// Available            5.1.6
//

[_public] void
IFindColByIndex_TB (
                    TB,          // Table handle
                    int,         // Index of column to find
                    var string,  // Buffer for column name
                    int          // Size of buffer
                    );

#define FindColByIndex_TB(A, B, C) IFindColByIndex_TB(A, B, C, sizeof(C))


//-----------------------------------------------------------------------------------------------------------
// iFindColByName_TB   Finds a column's index by its name.
//
// Returns             
//                     Index of column.
//                     -1 if not found.
//                     
//
// Available           5.0.0
//

[_public] int
iFindColByName_TB (
                   TB,      // Table handle
                   string   // Name of column to find
                   );


//-----------------------------------------------------------------------------------------------------------
// iFormat_TB   Returns the channel format for the specified column.
//
// Returns      <define>DB_CHAN_FORMAT</define>
//
// Available    5.0.1
//

[_public] int
iFormat_TB (
            TB,   // Table handle
            int   // Column of element to Get
            );


//-----------------------------------------------------------------------------------------------------------
// iGetInt_TB   Gets an integer value from a table element.
//
// Returns      Value
//
// Available    5.0.0
//

[_public] int
iGetInt_TB (
            TB,   // Table handle
            int,  // Row of element to Get
            int   // Column of element to Get
            );


//-----------------------------------------------------------------------------------------------------------
// iNumColumns_TB   Gets the number of data fields (columns) in a table.
//
// Returns          Number of columns
//
// Available        5.0.0
//

[_public] int
iNumColumns_TB (
                TB   // Table handle
                );


//-----------------------------------------------------------------------------------------------------------
// iNumRows_TB   Gets the number of data rows in a table.
//
// Returns       Number of rows
//
// Available     5.0.0
//

[_public] int
iNumRows_TB (
             TB   // Table handle
             );


//-----------------------------------------------------------------------------------------------------------
// LoadDB_TB   Load a database into a TB
//
// Returns     Nothing
//
// Notes       The line is appended to the data already in the table.
//
// Available   5.0.0
//

[_public] void
LoadDB_TB (
           TB,       // table
           DB,       // database
           DB_SYMB   // line
           );


//-----------------------------------------------------------------------------------------------------------
// rGetReal_TB   Gets an real value from a table element.
//
// Returns       Value
//
// Available     5.0.0
//

[_public] real
rGetReal_TB (
             TB,   // Table handle
             int,  // Row of element to Get
             int   // Column of element to Get
             );


//-----------------------------------------------------------------------------------------------------------
// Save_TB   
//           Saves the data in a table to a file. The table header will be
//           in ASCII and the data will be in BINARY format.
//           
//
// Returns   Nothing
//
// Available 5.0.0
//

[_public] void
Save_TB (
         TB,      // Table handle
         string   // Name of File to save table into
         );


//-----------------------------------------------------------------------------------------------------------
// SaveDB_TB   Save a TB in a database line
//
// Returns     Nothing
//
// Notes       
//             Missing channels are created.
//             Data in existing channels on the line will be replaced.
//             
//
// Available   5.0.0
//

[_public] void
SaveDB_TB (
           TB,       // table
           DB,       // database
           DB_SYMB   // line
           );


//-----------------------------------------------------------------------------------------------------------
// SaveToAscii_TB   
//                  Saves the data in a table to a file. The table header will be
//                  in ASCII and the data will be in ASCII format.
//                  
//
// Returns          Nothing
//
// Available        5.0.0
//

[_public] void
SaveToAscii_TB (
                TB,      // Table handle
                string   // Name of File to save table into
                );


//-----------------------------------------------------------------------------------------------------------
// SetInt_TB   Sets an integer value into a table element.
//
// Returns     Nothing
//
// Notes       
//             The table field containing the element to be set MUST be
//             of type GS_BYTE, GS_USHORT, GS_SHORT, or GS_LONG.
//             If the field is GS_BYTE, GS_USHORT, or GS_LONG, the new data
//             value will cause an overflow if the value is out of range of
//             the data type. The new element value will then be invalid.
//             
//             If the row of the new element exceeds the number of rows in
//             the table, then the table will AUTOMATICALLY be EXPANDED to
//             exactly as many rows needed to hold the new element. The new
//             element is placed in the proper field of the last row, and
//             all other field elements have invalid data. All fields of
//             the new rows up to the new element's row will also contain
//             invalid data.
//             
//
// Available   5.0.0
//

[_public] void
SetInt_TB (
           TB,   // Table handle
           int,  // Row of element to set
           int,  // Column of element to set
           int   // Value to set
           );


//-----------------------------------------------------------------------------------------------------------
// SetReal_TB   Sets an real value into a table element.
//
// Returns      Nothing
//
// Notes        
//              The table field containing the element to be set MUST be
//              of type GS_FLOAT or GS_DOUBLE.
//              If the field is GS_FLOAT the new data value will cause an
//              overflow if the value is out of range of the data type.
//              The new element value will then be invalid.
//              
//              If the row of the new element exceeds the number of rows in
//              the table, then the table will AUTOMATICALLY be EXPANDED to
//              exactly as many rows needed to hold the new element. The new
//              element is placed in the proper field of the last row, and
//              all other field elements have invalid data. All fields of
//              the new rows up to the new element's row will also contain
//              invalid data.
//              
//
// Available    5.0.0
//

[_public] void
SetReal_TB (
            TB,    // Table handle
            int,   // Row of element to set
            int,   // Column of element to set
            real   // Value to set
            );


//-----------------------------------------------------------------------------------------------------------
// SetString_TB   Sets a string value into a table element.
//
// Returns        Nothing
//
// Notes          
//                The table field containing the element to be set MUST be
//                of 'string'.
//                
//                If the row of the new element exceeds the number of rows in
//                the table, then the table will AUTOMATICALLY be EXPANDED to
//                exactly as many rows needed to hold the new element. The new
//                element is placed in the proper field of the last row, and
//                all other field elements have invalid data. All fields of
//                the new rows up to the new element's row will also contain
//                invalid data.
//                
//
// Available      5.0.0
//

[_public] void
SetString_TB (
              TB,      // Table handle
              int,     // Row of element to set
              int,     // Column of element to set
              string   // Value to set
              );


//-----------------------------------------------------------------------------------------------------------
// Sort_TB   Sorts a table by a specified column.
//
// Returns   Nothing
//
// Notes     
//           If the column to sort by contains duplicated values, the
//           sorted table is NOT guaranteed to retain the ordering of
//           the duplicated values/
//           E.g. Given 2 rows of values:   xx   yy   1
//           bb   aa   1
//           If the table is sorted on column 3, the second row
//           may or may not come after the first row in the sorted
//           table.
//           
//
// Available 5.0.0
//

[_public] void
Sort_TB (
         TB,   // TB handle
         int   // Index of data Column to sort table by
         );





#endif

