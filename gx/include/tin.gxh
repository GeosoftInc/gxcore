//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// The TIN class calculates the Delaunay triangulation of the
// positions in a database. This is the "best" set of triangles
// that can be formed from irregularly distributed points. The
// serialized TIN files can be used for gridding using the
// Tin-based Nearest Neighbour Algorithm, or for plotting the
// Delaunay triangles or Voronoi cells to a map.
//
//-----------------------------------------------------------------------------------------------------------



#ifndef TIN_GXH_DEFINED
#define TIN_GXH_DEFINED

//-----------------------------------------------------------------------------------------------------------
// Copy_TIN   Copy TIN
//
// Returns    Nothing
//
// Available  5.0.0
//

[_licensed] void
Copy_TIN (
          TIN,  // destination TIN
          TIN   // source TIN
          );


//-----------------------------------------------------------------------------------------------------------
// Create_TIN   This method creates a TIN object.
//
// Returns      TIN Object
//
// Notes        CreateTIN does the TIN calculation.
//              The Z values are not required, and a 0-length VV can be used to indicate
//              the values are not to be used.
//
// Available    5.0.0
//

[_licensed] TIN
Create_TIN (
            VV,  // X positions
            VV,  // Y positions
            VV   // Z values (optional)
            );


//-----------------------------------------------------------------------------------------------------------
// CreateS_TIN   Create TIN from a serialized source
//
// Returns       TIN Object
//
// Available     5.0.0
//

[_licensed] TIN
CreateS_TIN (
             BF   // BF from which to read TIN
             );


//-----------------------------------------------------------------------------------------------------------
// Destroy_TIN   Destroys the TIN object.
//
// Returns       Nothing
//
// Available     5.0.0
//

[_public] void
Destroy_TIN (
             TIN   // TIN Handle
             );


//-----------------------------------------------------------------------------------------------------------
// ExportXML_TIN   Export a TIN object as XML
//
// Returns         Nothing
//
// Available       6.0.1
//

[_licensed] void
ExportXML_TIN (
               string,   // TIN file
               var CRC,  // CRC returned (Currently this is not implemented)
               string    // Output XML file
               );


//-----------------------------------------------------------------------------------------------------------
// GetConvexHull_TIN   Get the convex hull of the TIN.
//
// Returns             Nothing
//
// Notes               The convex hull is the outside boundary of the
//                     triangulated region.
//
// Available           5.0.0
//

[_licensed] void
GetConvexHull_TIN (
                   TIN,  // TIN object
                   PLY   // PLY object
                   );


//-----------------------------------------------------------------------------------------------------------
// GetIPJ_TIN   Get the projection.
//
// Returns      Nothing
//
// Available    5.0.3
//

[_licensed] void
GetIPJ_TIN (
            TIN,  // TIN object
            IPJ   // IPJ in which to place the TIN projection
            );


//-----------------------------------------------------------------------------------------------------------
// GetJoins_TIN   Get joins from a TIN mesh.
//
// Returns        Nothing
//
// Notes          The join information is returned in three VVs.
//                - The joins VV is a list off the adjacent nodes for
//                each node, arranged for 1st node, 2nd node etc.
//                - The index VV gives the starting index in the
//                joins VV for the adjacent nodes to each node.
//                - The number VV gives the number of adjacent nodes
//                for each node.
//                All VVs must be type GS_LONG.
//
// Available      5.0.0
//

[_licensed] void
GetJoins_TIN (
              TIN,  // TIN object
              VV,   // Joins VV (adjacent nodes)
              VV,   // Index VV
              VV    // Number VV
              );


//-----------------------------------------------------------------------------------------------------------
// GetMesh_TIN   Get lines from a TIN mesh.
//
// Returns       Nothing
//
// Available     5.0.0
//

[_licensed] void
GetMesh_TIN (
             TIN,  // TIN object
             VV    // VV of type GS_D2LINE (returned)
             );


//-----------------------------------------------------------------------------------------------------------
// GetNodes_TIN   Get the X,Y locations and Z values of the TIN nodes.
//
// Returns        Nothing
//
// Notes          If this is not a Z-valued TIN, the Z values will
//                be dummies.
//
// Available      5.0.0
//

[_licensed] void
GetNodes_TIN (
              TIN,  // TIN object
              VV,   // X VV
              VV,   // Y VV
              VV    // Z VV
              );


//-----------------------------------------------------------------------------------------------------------
// GetTriangles_TIN   Get the triangle nodes.
//
// Returns            Nothing
//
// Available          8.4.0
//

[_licensed] void
GetTriangles_TIN (
                  TIN,  // TIN object
                  VV,   // Node 1 VV
                  VV,   // Node 2 VV
                  VV    // Node3 VV
                  );


//-----------------------------------------------------------------------------------------------------------
// GetTriangle_TIN   Get the locations of the vertices of a specific triangle
//
// Returns           Nothing
//
// Available         5.0.0
//

[_licensed] void
GetTriangle_TIN (
                 TIN,       // TIN object
                 int,       // triangle index [0...N-1]
                 var real,  // X0
                 var real,  // Y0
                 var real,  // X1
                 var real,  // Y1
                 var real,  // X2
                 var real   // Y2
                 );


//-----------------------------------------------------------------------------------------------------------
// GetVoronoiEdges_TIN   Get line segments defining Voronoi cells.
//
// Returns               Nothing
//
// Available             5.0.0
//

[_licensed] void
GetVoronoiEdges_TIN (
                     TIN,  // TIN object
                     VV    // VV of GS_D2LINE type (create with type -32)
                     );


//-----------------------------------------------------------------------------------------------------------
// iIsZValued_TIN   Does the TIN contain Z values with each X,Y?
//
// Returns          Returns GS_TRUE if Z values are defined in the TIN
//
// Available        5.0.0
//

[_licensed] int
iIsZValued_TIN (
                TIN   // TIN object
                );


//-----------------------------------------------------------------------------------------------------------
// iLocateTriangle_TIN   Get the index of the triangle containing X, Y.
//
// Returns               The index of the triangle containing X, Y.
//
// Notes                 Index returned begins at 0, but could be negative.
//                       -1 If X,Y is not contained in a triangle (or triangle not found)
//                       -2 If the location is on an edge
//                       This is for "fall-back" purposes only.
//                       Frequently edge positions are located as being part of
//                       a triangle, so do not rely on this result to determine
//                       if a node position is on an edge.
//                       -3 If the location is a vertex.
//                       This is for "fall-back" purposes only in the code.
//                       Normal operation is to include a node position
//                       inside a triangle, so do not rely on this result to determine
//                       if a node position is input.
//                       
//
// Available             5.0.0
//

[_licensed] int
iLocateTriangle_TIN (
                     TIN,   // TIN object
                     int,   // seed triangle (can be iDummy or <0)
                     real,  // target X location
                     real   // target Y location
                     );


//-----------------------------------------------------------------------------------------------------------
// iNodes_TIN   Returns the number of nodes in the TIN
//
// Returns      The number of nodes in the TIN
//
// Available    5.0.0
//

[_licensed] int
iNodes_TIN (
            TIN   // TIN object
            );


//-----------------------------------------------------------------------------------------------------------
// InterpVV_TIN   Interp TINned values using the natural neighbour method.
//
// Returns        Nothing
//
// Notes          The TIN have been created using max length = rDUMMY to
//                ensure that the TIN has a convex hull (otherwise the
//                routine that locates the triangle for a given location may fail).
//                The TIN must also have been created using the Z values.
//                Values located outside the convex hull are set to rDUMMY.
//                The method is based on the following paper:
//                
//                Sambridge, M., Braun, J., and McQueen, H., 1995,
//                Geophysical parameterization and interpolation of irregular
//                data using natural neighbours:
//                Geophysical Journal International, 122 p. 837-857.
//
// Available      5.0.0
//

[_licensed] void
InterpVV_TIN (
              TIN,  // TIN object
              VV,   // VV X locations to interpolate (GS_DOUBLE)
              VV,   // VV Y locations to interpolate (GS_DOUBLE)
              VV    // VV Interpolated Z values (GS_DOUBLE)
              );


//-----------------------------------------------------------------------------------------------------------
// iTriangles_TIN   Returns the number of triangles in the TIN.
//
// Returns          The number of triangles in the TIN
//
// Available        5.0.0
//

[_licensed] int
iTriangles_TIN (
                TIN   // TIN object
                );


//-----------------------------------------------------------------------------------------------------------
// LinearInterpVV_TIN   Interp TINned values using the linear interpolation
//
// Returns              Nothing
//
// Notes                The TIN have been created using max length = rDUMMY to
//                      ensure that the TIN has a convex hull (otherwise the
//                      routine that locates the triangle for a given location may fail).
//                      The TIN must also have been created using the Z values.
//                      Values located outside the convex hull are set to rDUMMY.
//                      
//                      The values are set assuming that each TIN triangle defines a
//                      plane.
//
// Available            5.1.4
//

[_licensed] void
LinearInterpVV_TIN (
                    TIN,  // TIN object
                    VV,   // VV X locations to interpolate (GS_DOUBLE)
                    VV,   // VV Y locations to interpolate (GS_DOUBLE)
                    VV    // VV Interpolated Z values (GS_DOUBLE)
                    );


//-----------------------------------------------------------------------------------------------------------
// NearestVV_TIN   Interp TINned values using the nearest neighbour.
//
// Returns         Nothing
//
// Notes           The TIN have been created using max length = rDUMMY to
//                 ensure that the TIN has a convex hull (otherwise the
//                 routine that locates the triangle for a given location may fail).
//                 The TIN must also have been created using the Z values.
//                 Values located outside the convex hull are set to rDUMMY.
//                 
//                 Within each voronoi triangle, the Z value of node closest to the input
//                 X,Y location is returned.
//
// Available       6.0.0
//

[_licensed] void
NearestVV_TIN (
               TIN,  // TIN object
               VV,   // VV X locations to interpolate (GS_DOUBLE)
               VV,   // VV Y locations to interpolate (GS_DOUBLE)
               VV    // VV Interpolated Z values (GS_DOUBLE)
               );


//-----------------------------------------------------------------------------------------------------------
// RangeXY_TIN   Find the range in X and Y of the TINned region.
//
// Returns       Nothing
//
// Notes         The TINned range is the range of X and Y covered by
//               the TIN triangles. It can thus be less than the full
//               X and Y range of the nodes themselves, if a full
//               convex hull is not calculated.
//
// Available     5.0.0
//

[_licensed] void
RangeXY_TIN (
             TIN,       // TIN object
             var real,  // Min X  (returned)
             var real,  // Min Y
             var real,  // Max X
             var real   // Max Y
             );


//-----------------------------------------------------------------------------------------------------------
// Serial_TIN   Serialize TIN
//
// Returns      Nothing
//
// Available    5.0.0
//

[_licensed] void
Serial_TIN (
            TIN,  // TIN
            BF    // BF in which to write TIN
            );


//-----------------------------------------------------------------------------------------------------------
// SetIPJ_TIN   Set the projection.
//
// Returns      Nothing
//
// Available    5.0.3
//

[_licensed] void
SetIPJ_TIN (
            TIN,  // TIN object
            IPJ   // IPJ to place in the TIN
            );





#endif

