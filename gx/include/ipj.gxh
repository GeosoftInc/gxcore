//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// 
// The IPJ class describes a single spatial reference in the world,
// defined under a coordinate system, an orientation,
// and a warp (which can be used to distort the projected object
// to a particular shape or boundary).
// 
//
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
// Notes
//
// 
// IPJ objects may be attached to channels or views. Two IPJs taken
// together are used to create a PJ object, which allows for the
// conversion of positions from one projection to the other.
// See also the LL2 class, which creates Datum correction lookups.
// 
// See also          PJ    Converts coordinates between projections
// LL2   Creates Datum correction lookups.
// 
//
//-----------------------------------------------------------------------------------------------------------



#ifndef IPJ_GXH_DEFINED
#define IPJ_GXH_DEFINED

//===========================================================================================================
//
// Define	IPJ_3D_FLAG
//
// 3D Flags
//
// IPJ_3D_FLAG_NONE             Standard
// IPJ_3D_FLAG_INVERTANGLES     Invert angle rotation during matrix creation
// IPJ_3D_FLAG_INVERTZ          Invert the Z plane to make up down.
// IPJ_3D_FLAG_ORDER_ROTATION   Apply rotations in a specific order, determined by pdParm[7]
//
//===========================================================================================================

#define IPJ_3D_FLAG_NONE              0
#define IPJ_3D_FLAG_INVERTANGLES      1
#define IPJ_3D_FLAG_INVERTZ           2
#define IPJ_3D_FLAG_ORDER_ROTATION    4


//===========================================================================================================
//
// Define	IPJ_3D_ROTATE
//
// 3D Rotation Mode
//
// IPJ_3D_ROTATE_DEFAULT
// IPJ_3D_ROTATE_XYZ
// IPJ_3D_ROTATE_XZY
// IPJ_3D_ROTATE_YXZ
// IPJ_3D_ROTATE_YZX
// IPJ_3D_ROTATE_ZXY
// IPJ_3D_ROTATE_ZYX
//
//===========================================================================================================

#define IPJ_3D_ROTATE_DEFAULT    0
#define IPJ_3D_ROTATE_XYZ        1
#define IPJ_3D_ROTATE_XZY        2
#define IPJ_3D_ROTATE_YXZ        3
#define IPJ_3D_ROTATE_YZX        4
#define IPJ_3D_ROTATE_ZXY        5
#define IPJ_3D_ROTATE_ZYX        6


//===========================================================================================================
//
// Define	IPJ_CSP
//
// Projection Setting
//
// IPJ_CSP_SCALE
// IPJ_CSP_FALSEEAST
// IPJ_CSP_FALSENORTH
// IPJ_CSP_LATORIGIN
// IPJ_CSP_LONORIGIN
// IPJ_CSP_PARALLEL_1
// IPJ_CSP_PARALLEL_2
// IPJ_CSP_AZIMUTH
// IPJ_CSP_ANGLE
// IPJ_CSP_POINTLAT_1
// IPJ_CSP_POINTLON_1
// IPJ_CSP_POINTLAT_2
// IPJ_CSP_POINTLON_2
//
//===========================================================================================================

#define IPJ_CSP_SCALE         0
#define IPJ_CSP_FALSEEAST     1
#define IPJ_CSP_FALSENORTH    2
#define IPJ_CSP_LATORIGIN     3
#define IPJ_CSP_LONORIGIN     4
#define IPJ_CSP_PARALLEL_1    5
#define IPJ_CSP_PARALLEL_2    6
#define IPJ_CSP_AZIMUTH       7
#define IPJ_CSP_ANGLE         8
#define IPJ_CSP_POINTLAT_1    9
#define IPJ_CSP_POINTLON_1    10
#define IPJ_CSP_POINTLAT_2    11
#define IPJ_CSP_POINTLON_2    12


//===========================================================================================================
//
// Define	IPJ_NAME
//
// Project Name
//
// IPJ_NAME_PCS                   Projected coordinate system name
// IPJ_NAME_PROJECTION            Projection name
// IPJ_NAME_METHOD                Projection method name
// IPJ_NAME_DATUM                 Datum name
// IPJ_NAME_ELLIPSOID             Ellipsoid name
// IPJ_NAME_LDATUM                Local datum name
// IPJ_NAME_UNIT_ABBR             Unit abbreviation
// IPJ_NAME_UNIT_FULL             Full unit name
// IPJ_NAME_TYPE                  Projection type description
// IPJ_NAME_LLDATUM               Datum transform table name
// IPJ_NAME_METHOD_PARMS          Projection method parameters in GXF order
// IPJ_NAME_METHOD_LABEL          Projection method parameters labels
// IPJ_NAME_DATUM_PARMS           Datum parameters (major axis, flattening, prime meridian)
// IPJ_NAME_LDATUM_PARMS          
//                                local datum parameters (dX,dY,dZ,rX,rY,rZ,scale)
//                                See GXF revision 3 for parameter list order and
//                                specifications.
//                                
// IPJ_NAME_GEOID                 Geoid name if known
// IPJ_NAME_LDATUMDESCRIPTION     Local datum description
// IPJ_NAME_METHOD_PARMS_NATIVE   Projection method parameters in GXF order (Native units for eastings/northings)
// IPJ_NAME_ORIENTATION_PARMS     Orientation parameters
//
//===========================================================================================================

#define IPJ_NAME_PCS                    0
#define IPJ_NAME_PROJECTION             1
#define IPJ_NAME_METHOD                 2
#define IPJ_NAME_DATUM                  3
#define IPJ_NAME_ELLIPSOID              4
#define IPJ_NAME_LDATUM                 5
#define IPJ_NAME_UNIT_ABBR              6
#define IPJ_NAME_UNIT_FULL              7
#define IPJ_NAME_TYPE                   8
#define IPJ_NAME_LLDATUM                9
#define IPJ_NAME_METHOD_PARMS           10
#define IPJ_NAME_METHOD_LABEL           11
#define IPJ_NAME_DATUM_PARMS            12
#define IPJ_NAME_LDATUM_PARMS           13
#define IPJ_NAME_GEOID                  14
#define IPJ_NAME_LDATUMDESCRIPTION      15
#define IPJ_NAME_METHOD_PARMS_NATIVE    16
#define IPJ_NAME_ORIENTATION_PARMS      17


//===========================================================================================================
//
// Define	IPJ_ORIENT
//
// Projection Orientation
//
// IPJ_ORIENT_DEFAULT           
//                              no special orientation - plan view. All views in maps
//                              created before v5.1.3 will return this value.
//                              
// IPJ_ORIENT_PLAN              
//                              A plan view with a reference elevation and
//                              optional rotation.
//                              
// IPJ_ORIENT_SECTION           
//                              Has an azimuth and swing.
//                              The section view projects all plotted objects
//                              HORIZONTALLY onto the viewing plan in order to
//                              preserve elevations, even if the section has a swing.
//                              
// IPJ_ORIENT_SECTION_NORMAL    
//                              Same as IPJ_ORIENT_SECTION, but the projection is perpendicular
//                              to the section, not horizonatl, so elevatins are not preserved
//                              on swung sections.
//                              
// IPJ_ORIENT_DEPTH_SECTION     
//                              This simple section has no azimuth or swing defined;
//                              only the depth is of importance, and it is output as
//                              the Y parameter, increasing downward. Used (for instance)
//                              for strip logs in Wholeplot.
//                              
// IPJ_ORIENT_3D                A 3D rotation/scaling/translation orientation
// IPJ_ORIENT_3D_MATRIX         A 3D matrix orientation
// IPJ_ORIENT_SECTION_CROOKED   
//                              This is a vertical section that follows a
//                              curving path, like a river or survey traverse.
//                              The horizontal section location is the distance along
//                              the path, while the vertical axis gives the elevation.
//                              
//
//===========================================================================================================

#define IPJ_ORIENT_DEFAULT            0
#define IPJ_ORIENT_PLAN               1
#define IPJ_ORIENT_SECTION            2
#define IPJ_ORIENT_SECTION_NORMAL     5
#define IPJ_ORIENT_DEPTH_SECTION      3
#define IPJ_ORIENT_3D                 4
#define IPJ_ORIENT_3D_MATRIX          7
#define IPJ_ORIENT_SECTION_CROOKED    6


//===========================================================================================================
//
// Define	IPJ_PARM_LST
//
// Projection List
//
// IPJ_PARM_LST_COORDINATESYSTEM
// IPJ_PARM_LST_DATUM
// IPJ_PARM_LST_PROJECTION
// IPJ_PARM_LST_UNITS
// IPJ_PARM_LST_LOCALDATUMDESCRIPTION
// IPJ_PARM_LST_LOCALDATUMNAME
// IPJ_PARM_LST_UNITSDESCRIPTION
//
//===========================================================================================================

#define IPJ_PARM_LST_COORDINATESYSTEM         0
#define IPJ_PARM_LST_DATUM                    1
#define IPJ_PARM_LST_PROJECTION               2
#define IPJ_PARM_LST_UNITS                    3
#define IPJ_PARM_LST_LOCALDATUMDESCRIPTION    4
#define IPJ_PARM_LST_LOCALDATUMNAME           5
#define IPJ_PARM_LST_UNITSDESCRIPTION         6


//===========================================================================================================
//
// Define	IPJ_TYPE
//
// IPJ Types
//
// IPJ_TYPE_PRJ    
//                 Read from a PRJ file:
//                 string 1 - Source file name
//                 string 2 and 3 are not used.
//                 
// IPJ_TYPE_PCS    
//                 Projected coordinate system:
//                 string 1 - POSC PCS name
//                 string 2 - POSC Datum transform name
//                 string 3 - not used.
//                 
// IPJ_TYPE_GCS    
//                 Geographic coordinate system:
//                 string 1 - POSC Datum name
//                 string 2 - POSC Datum transform name
//                 string 3 - not used.
//                 
// IPJ_TYPE_ANY    
//                 Custom projection
//                 string 1 - POSC Datum name
//                 string 2 - POSC Datum transform name
//                 string 3 - POSC Transform, "" if geographic
//                 
// IPJ_TYPE_NONE   
//                 Not used for Read_IPJ.  This is used for
//                 iSourceType_IPJ to indicate no projection.
//                 
// IPJ_TYPE_WRP
// IPJ_TYPE_TEST   
//                 tests the projection tables for internal consistency
//                 and creates report files in the project directory.
//                 string 1 - outout report file name
//                 string 2 - ESRI coordinate strings file.  This contains one
//                 ESRI coordinate string per line.  Lines that
//                 start with '#' are skipped.
//                 string 3 - not currently used
//                 
//
//===========================================================================================================

#define IPJ_TYPE_PRJ     0
#define IPJ_TYPE_PCS     1
#define IPJ_TYPE_GCS     2
#define IPJ_TYPE_ANY     3
#define IPJ_TYPE_NONE    4
#define IPJ_TYPE_WRP     5
#define IPJ_TYPE_TEST    6


//===========================================================================================================
//
// Define	IPJ_UNIT
//
// Projection Unit Type
//
// IPJ_UNIT_ABBREVIATION
// IPJ_UNIT_FULLNAME
//
//===========================================================================================================

#define IPJ_UNIT_ABBREVIATION    0
#define IPJ_UNIT_FULLNAME        1


//===========================================================================================================
//
// Define	IPJ_WARP
//
// Warp (Transformation) type
//
// IPJ_WARP_MATRIX         Matrix Warp
// IPJ_WARP_NONE           No warp
// IPJ_WARP_TRANS1         Translate only (needs 1 point)
// IPJ_WARP_TRANS2         Translate, rotate, normal scale (needs 2 pts)
// IPJ_WARP_TRANS3         Translate, rotate, scale X and Y (needs 3 pts or more, least-square fit)
// IPJ_WARP_QUAD           Quadrilateral warp (needs 4 points)
// IPJ_WARP_MULTIPOINT     Multipoint warp (needs at least 3 points)
// IPJ_WARP_LOG            Convert from linear to log coords in X and/or Y
// IPJ_WARP_MULTIPOINT_Y   Multipoint warp in Y only (needs at least 3 points)
//
//===========================================================================================================

#define IPJ_WARP_MATRIX          -1
#define IPJ_WARP_NONE            0
#define IPJ_WARP_TRANS1          1
#define IPJ_WARP_TRANS2          2
#define IPJ_WARP_TRANS3          3
#define IPJ_WARP_QUAD            4
#define IPJ_WARP_MULTIPOINT      5
#define IPJ_WARP_LOG             6
#define IPJ_WARP_MULTIPOINT_Y    7


//-----------------------------------------------------------------------------------------------------------
// _ClearWarp_IPJ   Clear warp parameters (if any) from an IPJ.
//
// Returns          Nothing
//
// Available        5.0.0
//

[_public] void
_ClearWarp_IPJ (
                IPJ   // IPJ object
                );
#define ClearWarp_IPJ _ClearWarp_IPJ

//-----------------------------------------------------------------------------------------------------------
// _MakeGeographic_IPJ   Remove a projected coordinate system from an IPJ
//
// Returns               Nothing
//
// Notes                 This function does nothing if the IPJ is not a projected coordinate system.
//
// Available             5.1.5
//

[_public] void
_MakeGeographic_IPJ (
                     IPJ   // IPJ to modify
                     );
#define MakeGeographic_IPJ _MakeGeographic_IPJ

//-----------------------------------------------------------------------------------------------------------
// _MakeWGS84_IPJ   Make a WGS 84 geographic projection
//
// Returns          Nothing
//
// Available        5.1.8
//

[_public] void
_MakeWGS84_IPJ (
                IPJ   // IPJ object
                );
#define MakeWGS84_IPJ _MakeWGS84_IPJ

//-----------------------------------------------------------------------------------------------------------
// _SetUnits_IPJ   Set unit parameters
//
// Returns         Nothing
//
// Available       5.0.0
//

[_public] void
_SetUnits_IPJ (
               IPJ,     // IPJ
               real,    // Factor to meters, must be >= 0.0
               string   // Abbreviation, can be ""
               );
#define SetUnits_IPJ _SetUnits_IPJ

//-----------------------------------------------------------------------------------------------------------
// AddExaggWarp_IPJ   Add a warp to IPJ to exaggerate X, Y and Z.
//
// Returns            Nothing
//
// Available          5.0.0
//

[_public] void
AddExaggWarp_IPJ (
                  IPJ,   // IPJ object
                  real,  // X exaggeration, must be > 0.0
                  real,  // Y exaggeration, must be > 0.0
                  real,  // Z exaggeration, must be > 0.0
                  real,  // X reference origin
                  real,  // Y reference origin
                  real   // Z reference origin
                  );


//-----------------------------------------------------------------------------------------------------------
// AddLogWarp_IPJ   Add a warp to IPJ to log one or both coordinantes
//
// Returns          Nothing
//
// Available        7.0.0
//

[_public] void
AddLogWarp_IPJ (
                IPJ,  // IPJ object
                int,  // Log in X?
                int   // Log in Y?
                );


//-----------------------------------------------------------------------------------------------------------
// AddMatrixWarp_IPJ   Add a warp to IPJ using a matrix
//
// Returns             Nothing
//
// Available           7.0.0
//

[_public] void
AddMatrixWarp_IPJ (
                   IPJ,   // IPJ object
                   real,  // Row 0 Element 0
                   real,  // Row 0 Element 1
                   real,  // Row 0 Element 2
                   real,  // Row 0 Element 3
                   real,  // Row 1 Element 0
                   real,  // Row 1 Element 1
                   real,  // Row 1 Element 2
                   real,  // Row 1 Element 3
                   real,  // Row 2 Element 0
                   real,  // Row 2 Element 1
                   real,  // Row 2 Element 2
                   real,  // Row 2 Element 3
                   real,  // Row 3 Element 0
                   real,  // Row 3 Element 1
                   real,  // Row 3 Element 2
                   real   // Row 3 Element 3
                   );


//-----------------------------------------------------------------------------------------------------------
// AddWarp_IPJ   Add a warp to IPJ.
//
// Returns       Nothing
//
// Notes         
//               There must be at least "warp type" points in the
//               warp point VV's.
//               All point VV's must have the same number of points.
//               If there are more points than required by the warp,
//               the warp will be determined by least-square fitting
//               to the warp surface for all but the 4-point warp.
//               The 4-point ward requires exactly 4 points.
//               
//               Cannot be used with WARP_MATRIX or WARP_LOG
//               
//
// Available     5.0.0
//

[_public] void
AddWarp_IPJ (
             IPJ,  // IPJ object
             int,  // <define>IPJ_TYPE</define>
             VV,   // Old X VV (real)
             VV,   // Old Y VV (real)
             VV,   // New X VV (real)
             VV    // New Y VV (real)
             );


//-----------------------------------------------------------------------------------------------------------
// ClearCoordinateSystem_IPJ   Clear coordinate sytsem, except for units
//
// Returns                     Nothing
//
// Notes                       
//                             Clears the Datum, Local Datum and Projection info.
//                             Leaves units, any warp or orientation warp unchanged.
//                             
//
// Available                   7.2.0
//

[_public] void
ClearCoordinateSystem_IPJ (
                           IPJ   // IPJ
                           );


//-----------------------------------------------------------------------------------------------------------
// ClearOrientation_IPJ   Clear an orientation warp from an IPJ.
//
// Returns                Nothing
//
// Available              5.1.6
//

[_public] void
ClearOrientation_IPJ (
                      IPJ   // IPJ object
                      );


//-----------------------------------------------------------------------------------------------------------
// ConvertOrientationWarpVV_IPJ   Convert X,Y and Z VVs using the orientation warp from an IPJ.
//
// Returns                        Nothing
//
// Available                      6.4.0
//

[_public] void
ConvertOrientationWarpVV_IPJ (
                              IPJ,  // Grid file name
                              VV,   // X VV coordinates converted on output
                              VV,   // Y VV coordinates converted on output
                              VV,   // Z VV coordinates converted on output
                              int   // 1 -  Forward (raw -> coordinate) , 0 - (coordinate -> raw)
                              );


//-----------------------------------------------------------------------------------------------------------
// Copy_IPJ   Copy IPJs
//
// Returns    Nothing
//
// Available  5.0.0
//

[_public] void
Copy_IPJ (
          IPJ,  // Source IPJ
          IPJ   // Destination IPJ
          );


//-----------------------------------------------------------------------------------------------------------
// CopyProjection_IPJ   Copy the projection from one IPJ to another
//
// Returns              Nothing
//
// Notes                
//                      Copies the projection parameters, while leaving the rest
//                      (e.g. Datum, Local Datum Transform) unchanged.
//                      
//
// Available            7.0.0
//

[_public] void
CopyProjection_IPJ (
                    IPJ,  // Destination
                    IPJ   // Source
                    );


//-----------------------------------------------------------------------------------------------------------
// Create_IPJ   This method creates a projection object.
//
// Returns      IPJ Object
//
// Available    5.0.0
//

[_public] IPJ
Create_IPJ (
            );


//-----------------------------------------------------------------------------------------------------------
// CreateS_IPJ   Create IPJ from serialized source.
//
// Returns       IPJ Object
//
// Available     5.0.0
//

[_public] IPJ
CreateS_IPJ (
             BF   // BF
             );


//-----------------------------------------------------------------------------------------------------------
// CreateXML_IPJ   Create an IPJ from serialized Geosoft MetaData XML file
//
// Returns         IPJ Object
//
// Available       7.0.0
//

[_public] IPJ
CreateXML_IPJ (
               string   // File Name
               );


//-----------------------------------------------------------------------------------------------------------
// Destroy_IPJ   This method destroys a projection object.
//
// Returns       Nothing
//
// Available     5.0.0
//

[_public] void
Destroy_IPJ (
             IPJ   // Projection to Destroy
             );


//-----------------------------------------------------------------------------------------------------------
// Get3DView_IPJ   Get 3D orientation parameters
//
// Returns         Nothing
//
// Notes           The view must have a 3D orientation
//
// Available       6.3.0
//

[_public] void
Get3DView_IPJ (
               IPJ,       // IPJ object
               var real,  // X location of view origin
               var real,  // Y location of view origin
               var real,  // Z location of view origin
               var real,  // Rotation in X
               var real,  // Rotation in Y
               var real,  // Rotation in Z
               var real,  // Scaling in X
               var real,  // Scaling in Y
               var real   // Scaling in Z
               );


//-----------------------------------------------------------------------------------------------------------
// Get3DViewEx_IPJ   Get 3D orientation parameters with new flags
//
// Returns           Nothing
//
// Notes             The view must have a 3D orientation
//
// Available         7.0.0
//

[_public] void
Get3DViewEx_IPJ (
                 IPJ,       // IPJ object
                 var real,  // X location of view origin
                 var real,  // Y location of view origin
                 var real,  // Z location of view origin
                 var real,  // Rotation in X
                 var real,  // Rotation in Y
                 var real,  // Rotation in Z
                 var real,  // Scaling in X
                 var real,  // Scaling in Y
                 var real,  // Scaling in Z
                 var int,   // <define>IPJ_3D_ROTATE</define>
                 var int    // <define>IPJ_3D_FLAG</define>
                 );


//-----------------------------------------------------------------------------------------------------------
// GetCrookedSectionViewVVs_IPJ   Get the crooked section path.
//
// Returns                        Nothing
//
// Notes                          Returns the orignal VVs used to set up the crooked section path.
//
// Available                      7.2.0
//

[_public] void
GetCrookedSectionViewVVs_IPJ (
                              IPJ,      // IPJ object
                              VV,       // Section X locations (e.g. distance along the curve)
                              VV,       // True X
                              VV,       // True Y
                              var int   // Use logarithmic Y-axis (usually for data profiles) 0:No, 1:Yes
                              );


//-----------------------------------------------------------------------------------------------------------
// GetList_IPJ   Get a list of parameters.
//
// Returns       Nothing
//
// Notes         
//               The datum filter string, if specified, will limit the requested
//               list to those valid for the spacified datum.
//               
//
// Available     6.0.0
//

[_public] void
GetList_IPJ (
             int,     // <define>IPJ_PARM_LST</define>
             string,  // Datum filter, "" for no filter
             LST      // List returned
             );


//-----------------------------------------------------------------------------------------------------------
// GetOrientationInfo_IPJ   Get IPJ orientation parameters.
//
// Returns                  Nothing
//
// Notes                    
//                          IPJ_ORIENT_TYPE:
//                          IPJ_ORIENT_DEFAULT - no special orientation - plan view.
//                          This is equivalent to IPJ_ORIENT_PLAN with
//                          dXo = dYo = dZo = dRotation = 0.0.
//                          
//                          IPJ_ORIENT_PLAN      Azimuth = Rotation CCW degrees
//                          The plan differs from the default view in that
//                          a reference level is set, and the axes can be
//                          rotated and offset from the local X,Y.
//                          
//                          IPJ_ORIENT_SECTION   Azimuth - CW degrees from North
//                          -360 <= azimuth <= 360
//                          Swing - degrees bottom towards viewer
//                          -90 < swing < 90
//                          The section view projects all plotted objects
//                          HORIZONTALLY onto the viewing plan in order to
//                          preserve elevations, even if the section has a swing.
//                          
//
// Available                5.1.6
//

[_public] void
GetOrientationInfo_IPJ (
                        IPJ,       // IPJ handle
                        var real,  // Plane Origin X
                        var real,  // Plane Origin Y
                        var real,  // Plane Origin Z
                        var real,  // Plane Azimuth (section) or Rotation (plan)
                        var real   // Plane Swing   (section)
                        );


//-----------------------------------------------------------------------------------------------------------
// GetPlaneEquation_IPJ   Get the equation of a plane
//
// Returns                Nothing
//
// Notes                  
//                        Two opposite corners of the plane are required.
//                        Because the origin of the plane does not necessarily
//                        have a stable back-projection into true 3d coordinates.
//                        In practice, use the current view extents, or the corners
//                        of a grid.
//                        
//
// Available              5.1.6
//

[_public] void
GetPlaneEquation_IPJ (
                      IPJ,       // IPJ object
                      real,      // Min X of surface
                      real,      // Min Y of surface
                      real,      // Max X of surface
                      real,      // Max Y of surface
                      var real,  // Pitch angle (between -360 and 360)
                      var real,  // Yaw angle (between -360 and 360)
                      var real,  // Roll angles (between -360 and 360)
                      var real,  // X offset of plane
                      var real,  // Y offset of plane
                      var real,  // Z offset of plane
                      var real,  // X scale
                      var real,  // Y scale
                      var real   // Z scale
                      );


//-----------------------------------------------------------------------------------------------------------
// GetPlaneEquation2_IPJ   Get the equation of a plane with reprojection.
//
// Returns                 Nothing
//
// Notes                   
//                         This is the same as GetPlaneEquation_IPJ, but the
//                         input projected coordinate system (PCS) may
//                         be different from that of the IPJ you want the
//                         plane equation values described in. This may be
//                         required, for instance, when a 3D view has been created
//                         in one PCS, and an oriented grid from a different PCS is
//                         to be displayed in that view.
//                         
//                         If the two input IPJs share the same PCS (determined
//                         using the iSame_IPJ function), then the GetPlaneEquation_IPJ
//                         function is called directly, using the input IPJ.
//                         
//
// Available               6.4.1
//

[_public] void
GetPlaneEquation2_IPJ (
                       IPJ,       // IPJ object of the input grid or view
                       IPJ,       // IPJ object for the output values
                       real,      // Min X of surface (in grid coords)
                       real,      // Min Y of surface
                       real,      // Max X of surface
                       real,      // Max Y of surface
                       var real,  // Pitch angle (between -360 and 360) (in view coords)
                       var real,  // Yaw angle (between -360 and 360)
                       var real,  // Roll angles (between -360 and 360)
                       var real,  // X offset of plane (in view coords)
                       var real,  // Y offset of plane
                       var real,  // Z offset of plane
                       var real,  // X scale (in view coords)
                       var real,  // Y scale
                       var real   // Z scale
                       );


//-----------------------------------------------------------------------------------------------------------
// iCompareDatums_IPJ   Compare the datums of two coordinate systems?
//
// Returns              
//                      0 - Datums are different
//                      1 - Datums are the same, but different LDT
//                      2 - Datums and LTD are the same
//                      
//
// Notes                
//                      To transform between different datums requires the use of a local
//                      datum transform.  The local datum transform can be defined when
//                      a coordinate system is created, but the definition is optional.
//                      This function will test that the local datum transforms are defined.
//                      Note that a coordinate transformation between datums without a
//                      local datum transform is still possible, but only the effect of
//                      ellipsoid shape will be modelled in the transform.
//                      
//
// Available            6.2.0
//

[_public] int
iCompareDatums_IPJ (
                    IPJ,  // IPJ 1
                    IPJ   // IPJ 2
                    );


//-----------------------------------------------------------------------------------------------------------
// iConvertWarp_IPJ   Converts a point X, Y, Z to the new IPJ plane.
//
// Returns            0 if ok - 1 otherwise
//
// Available          6.3.0
//

[_public] int
iConvertWarp_IPJ (
                  IPJ,       // Grid file name
                  var real,  // X coordinates converted on output
                  var real,  // Y coordinates converted on output
                  var real,  // Z coordinates converted on output
                  int        // 1 -  Forward (raw -> coordinate) , 0 - (coordinate -> raw)
                  );


//-----------------------------------------------------------------------------------------------------------
// iConvertWarpVV_IPJ   Converts a set of X & Y VVs to the new IPJ plane. The Z is assumed to be 0
//
// Returns              0 if ok - 1 otherwise
//
// Available            6.3.0
//

[_public] int
iConvertWarpVV_IPJ (
                    IPJ,  // Grid file name
                    VV,   // X VV coordinates converted on output
                    VV,   // Y VV coordinates converted on output
                    int   // 1 -  Forward (raw -> coordinate) , 0 - (coordinate -> raw)
                    );


//-----------------------------------------------------------------------------------------------------------
// iCoordinateSystemsAreTheSame_IPJ   Are these two coordinate systems the same?
//
// Returns                            
//                                    0 - No
//                                    1 - Yes
//                                    
//
// Notes                              This does not compare LDT information (use iCompareDatums_IPJ for that).
//
// Available                          7.2.0
//

[_public] int
iCoordinateSystemsAreTheSame_IPJ (
                                  IPJ,  // IPJ 1
                                  IPJ   // IPJ 2
                                  );


//-----------------------------------------------------------------------------------------------------------
// iCoordinateSystemsAreTheSameWithinASmallTolerance_IPJ   Same as iCoordinateSystemsAreTheSame_IPJ, but allows for small numerical differences
//
// Returns                                                 
//                                                         0 - No
//                                                         1 - Yes
//                                                         
//
// Available                                               7.2.0
//

[_public] int
iCoordinateSystemsAreTheSameWithinASmallTolerance_IPJ (
                                                       IPJ,  // IPJ 1
                                                       IPJ   // IPJ 2
                                                       );


//-----------------------------------------------------------------------------------------------------------
// IGetDisplayName_IPJ   Get a name for display purposes from IPJ
//
// Returns               Nothing
//
// Available             6.3.0
//

[_public] void
IGetDisplayName_IPJ (
                     IPJ,         // IPJ object
                     var string,  // Name returned
                     int          // Maximum name size
                     );

#define GetDisplayName_IPJ(A, B) IGetDisplayName_IPJ(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// IGetESRI_IPJ   Store coordinate system in an ESRI prj coordinate string
//
// Returns        Nothing
//
// Notes          
//                If the projection is not supported in ESRI, the projection
//                string will be empty.
//                
//
// Available      5.1.8
//

[_public] void
IGetESRI_IPJ (
              IPJ,         // IPJ object
              var string,  // ESRI projection string returned
              int          // String length, should be at least 1024
              );

#define GetESRI_IPJ(A, B) IGetESRI_IPJ(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// IGetGXF_IPJ   Store coordinate system in GXF style strings.
//
// Returns       Nothing
//
// Notes         
//               See GXF revision 3 for string descriptions
//               All strings must be the same length, 160 (STR_GXF) recommended.
//               Strings too short will be truncated.
//               
//
// Available     5.0.0
//

[_public] void
IGetGXF_IPJ (
             IPJ,         // IPJ object
             var string,  // Projection name
             var string,  // Datum name, major axis, elipticity
             var string,  // Method name, parameters
             var string,  // Unit name, factor
             var string,  // Local transform name,dX,dY,dZ,rX,rY,rZ,Scale
             int          // Maximum length of all strings
             );

#define GetGXF_IPJ(A, B, C, D, E, F) IGetGXF_IPJ(A, B, C, D, E, F, sizeof(F))


//-----------------------------------------------------------------------------------------------------------
// IGetMICoordSys_IPJ   Store coordinate system in MapInfo coordsys pair
//
// Returns              Nothing
//
// Available            7.0.0
//

[_public] void
IGetMICoordSys_IPJ (
                    IPJ,         // IPJ object
                    var string,  // MapInfo coordsys string returned
                    int,         // Coordsys string length
                    var string,  // MapInfo unit string returned
                    int          // Unit string length
                    );

#define GetMICoordSys_IPJ(A, B, C) IGetMICoordSys_IPJ(A, B, sizeof(B), C, sizeof(C))


//-----------------------------------------------------------------------------------------------------------
// IGetName_IPJ   Get an IPJ name
//
// Returns        Nothing
//
// Available      5.0.0
//

[_public] void
IGetName_IPJ (
              IPJ,         // IPJ object
              int,         // <define>IPJ_NAME</define>
              var string,  // Name returned
              int          // Maximum name size
              );

#define GetName_IPJ(A, B, C) IGetName_IPJ(A, B, C, sizeof(C))


//-----------------------------------------------------------------------------------------------------------
// SetVCS_IPJ   Set the Verical Coordinate System in the IPJ name string
//
// Returns      
//              Nothing
//              
//
// Notes        
//              The vertical coordinate system (vcs) describes the datum used for vertical coordinates. The vcs name, if
//              known, will appear in square brackets as part of the coordinate system name.
//              
//              Examples:
//              "WGS 84 [geoid]"
//              "WGS 84 / UTM zone 12S" - the vcs is not known.
//              "WGS 84 / UTM zone 12S [NAVD88]"
//              
//              Valid inputs:
//              "NAVD88"          - Clears existing vcs, if any, and sets the VCS name to "NAVD88".
//              ""                - Clears the vcs
//              
//
// Available    9.2.0
//

[_public] void
SetVCS_IPJ (
            IPJ,     // IPJ object
            string   // New name (See Valid inputs above).
            );


//-----------------------------------------------------------------------------------------------------------
// iGetOrientation_IPJ   Get IPJ orientation in space.
//
// Returns               <define>IPJ_ORIENT</define>
//
// Notes                 
//                       Projections can be created oriented horizontally (e.g. in plan maps)
//                       or vertically (in section maps - Wholeplot and IP).
//                       
//
// Available             5.1.4
//

[_public] int
iGetOrientation_IPJ (
                     IPJ   // IPJ object
                     );


//-----------------------------------------------------------------------------------------------------------
// IGetOrientationName_IPJ   Get a name for display purposes from IPJ
//
// Returns                   Nothing
//
// Available                 6.3.0
//

[_public] void
IGetOrientationName_IPJ (
                         IPJ,         // IPJ object
                         var string,  // Name returned
                         int          // Maximum name size
                         );

#define GetOrientationName_IPJ(A, B) IGetOrientationName_IPJ(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// IGetUnits_IPJ   Get unit parameters
//
// Returns         Nothing
//
// Available       5.0.0
//

[_public] void
IGetUnits_IPJ (
               IPJ,         // IPJ
               var real,    // Factor to meters
               var string,  // Abbreviation
               int          // Length of string
               );

#define GetUnits_IPJ(A, B, C) IGetUnits_IPJ(A, B, C, sizeof(C))


//-----------------------------------------------------------------------------------------------------------
// IGetXML_IPJ   Get an Geosoft Metadata XML string from an IPJ
//
// Returns       Nothing
//
// Available     7.0.0
//

[_public] void
IGetXML_IPJ (
             IPJ,         // IPJ object
             var string,  // XML string returned
             int          // String length, should be at least 1024
             );

#define GetXML_IPJ(A, B) IGetXML_IPJ(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// iHasProjection_IPJ   Does the IPJ object contain a projection?
//
// Returns              
//                      0 - No
//                      1 - Yes
//                      
//
// Available            7.2.0
//

[_public] int
iHasProjection_IPJ (
                    IPJ   // IPJ object
                    );


//-----------------------------------------------------------------------------------------------------------
// iIs3DInverted_IPJ   Is this 3D View inverted ?
//
// Returns             
//                     0 - No
//                     1 - Yes (inverted)
//                     
//
// Available           6.3.1
//

[_public] int
iIs3DInverted_IPJ (
                   IPJ   // IPJ Object
                   );


//-----------------------------------------------------------------------------------------------------------
// iIs3DInvertedAngles_IPJ   Are the angles in this 3D View inverted ?
//
// Returns                   
//                           0 - No
//                           1 - Yes (inverted)
//                           
//
// Available                 6.3.1
//

[_public] int
iIs3DInvertedAngles_IPJ (
                         IPJ   // IPJ Object
                         );


//-----------------------------------------------------------------------------------------------------------
// iIsGeographic_IPJ   See if this projection is geographic
//
// Returns             
//                     0 - No
//                     1 - Yes
//                     
//
// Available           6.3.0
//

[_public] int
iIsGeographic_IPJ (
                   IPJ   // IPJ object
                   );


//-----------------------------------------------------------------------------------------------------------
// iOrientationsAreTheSame_IPJ   Are these two orientations the same?
//
// Returns                       
//                               0 - No
//                               1 - Yes
//                               
//
// Available                     7.2.0
//

[_public] int
iOrientationsAreTheSame_IPJ (
                             IPJ,  // IPJ 1
                             IPJ   // IPJ 2
                             );


//-----------------------------------------------------------------------------------------------------------
// iOrientationsAreTheSameWithinASmallTolerance_IPJ   Same as iOrientationsAreTheSame_IPJ, but allows for small numerical differences
//
// Returns                                            
//                                                    0 - No
//                                                    1 - Yes
//                                                    
//
// Available                                          7.2.0
//

[_public] int
iOrientationsAreTheSameWithinASmallTolerance_IPJ (
                                                  IPJ,  // IPJ 1
                                                  IPJ   // IPJ 2
                                                  );


//-----------------------------------------------------------------------------------------------------------
// iHasSectionOrientation_IPJ   Does this projection contain an orientation used by section plots?
//
// Returns                      
//                              0 - No
//                              1 - Yes
//                              
//
// Notes                        
//                              Returns     1 if there is a section orientation
//                              
//                              The following orientations can be used to orient sections or section views:
//                              
//                              IPJ_ORIENT_SECTION - Target-type sections with Z projection horizontally
//                              IPJ_ORIENT_SECTION_NORMAL - Like IPJ_ORIENT_SECTION, but Z projects
//                              perpendicular to the secton plane.
//                              IPJ_ORIENT_SECTION_CROOKED - Crooked sections
//                              IPJ_ORIENT_3D - Some Sections extracted from a voxel - e.g. VoxelToGrids,
//                              as the voxel can have any orientation in 3D.
//                              
//                              It is sometimes important to ignore the section orientation, for instance
//                              when rendering a grid in 3D where it has been located on a plane.
//                              
//
// Available                    8.3.0
//

[_public] int
iHasSectionOrientation_IPJ (
                            IPJ   // IPJ
                            );


//-----------------------------------------------------------------------------------------------------------
// iProjectionTypeIsFullySupported_IPJ   Is the projection type fully supported?
//
// Returns                               
//                                       0 - No
//                                       1 - Yes
//                                       
//
// Notes                                 
//                                       This function checks only the projected coordinated system
//                                       in the IPJ object, so should only be used with projections
//                                       of type IPJ_TYPE_PCS.
//                                       This function does not test the validity of datums or local
//                                       datum transforms.
//                                       
//
// Available                             7.2.0
//

[_public] int
iProjectionTypeIsFullySupported_IPJ (
                                     IPJ   // IPJ
                                     );


//-----------------------------------------------------------------------------------------------------------
// iSetGXF_IPJ   Same as SetGXF_IPJ, but fails gracefully.
//
// Returns       
//               0 - error in setting IPJ, input IPJ unchanged.
//               1 - success: IPJ set using input values.
//               
//
// Notes         
//               SetGXF_IPJ will fail and terminate the GX if anything goes wrong (e.g. having a wrong
//               parameter). If this function fails, it simply returns 0 and leaves the
//               IPJ unchanged.
//               
//
// Available     7.0.0
//

[_public] int
iSetGXF_IPJ (
             IPJ,     // IPJ object
             string,  // "projection name" or PCS_NAME from ipj_pcs.csv (datum / projection) or EPSG coordinate system code number or "<file.prj>" projection file name or "<file.wrp>" warp file name
             string,  // "datum name"[, major axis, elipticity, prime meridian] or DATUM from datum.csv or EPSG datum code number
             string,  // "method name", parameters (P1 through P8) or "projection name"[,"method name","Units",P1,P2...] or TRANSFORM from transform.csv or EPSG transform method code number
             string,  // "unit name", convertion to metres or UNIT_LENGTH from units.csv
             string   // "local transform name"[,dX,dY,dZ,rX,rY,rZ,Scale] or DATUM_TRF from datumtrf.csv or AREA_OF_USE from ldatum.csv or EPSG local datum transform code number
             );


//-----------------------------------------------------------------------------------------------------------
// iSourceType_IPJ   Get IPJ source type
//
// Returns           <define>IPJ_TYPE</define>
//
// Available         5.0.0
//

[_public] int
iSourceType_IPJ (
                 IPJ   // IPJ object
                 );


//-----------------------------------------------------------------------------------------------------------
// iSupportDatumTransform_IPJ   Can we transform between these two datums?
//
// Returns                      
//                              0 - No
//                              1 - Yes, either because both CS are on the same datum,
//                              or because a local datum transform is defined
//                              for each coordinate system.
//                              
//
// Notes                        
//                              To transform between different datums requires the use of a local
//                              datum transform.  The local datum transform can be defined when
//                              a coordinate system is created, but the definition is optional.
//                              This function will test that the local datum transforms are defined.
//                              Note that a coordinate transformation between datums without a
//                              local datum transform is still possible, but only the effect of
//                              ellipsoid shape will be modelled in the transform.
//                              
//
// Available                    6.0.0
//

[_public] int
iSupportDatumTransform_IPJ (
                            IPJ,  // IPJ 1
                            IPJ   // IPJ 2
                            );


//-----------------------------------------------------------------------------------------------------------
// IUnitName_IPJ   Get a unit name given a scale factor
//
// Returns         Nothing
//
// Available       5.0.0
//

[_public] void
IUnitName_IPJ (
               real,        // Factor to meters
               int,         // <define>IPJ_UNIT</define>
               var string,  // Name returned, "" if cannot find unit
               int          // Length of string
               );

#define UnitName_IPJ(A, B, C) IUnitName_IPJ(A, B, C, sizeof(C))


//-----------------------------------------------------------------------------------------------------------
// iWarped_IPJ   Does IPJ contain a warp?
//
// Returns       <define>GEO_BOOL</define>
//
// Available     5.0.0
//

[_public] int
iWarped_IPJ (
             IPJ   // IPJ object
             );


//-----------------------------------------------------------------------------------------------------------
// iWarpsAreTheSame_IPJ   Are these two warps the same?
//
// Returns                
//                        0 - No
//                        1 - Yes
//                        
//
// Available              7.2.0
//

[_public] int
iWarpsAreTheSame_IPJ (
                      IPJ,  // IPJ 1
                      IPJ   // IPJ 2
                      );


//-----------------------------------------------------------------------------------------------------------
// iWarpsAreTheSameWithinASmallTolerance_IPJ   Same as iWarpsAreTheSame_IPJ, but allows for small numerical differences
//
// Returns                                     
//                                             0 - No
//                                             1 - Yes
//                                             
//
// Available                                   7.2.0
//

[_public] int
iWarpsAreTheSameWithinASmallTolerance_IPJ (
                                           IPJ,  // IPJ 1
                                           IPJ   // IPJ 2
                                           );


//-----------------------------------------------------------------------------------------------------------
// iWarpType_IPJ   Obtain the warp type of an IPJ.
//
// Returns         <define>IPJ_WARP</define>
//
// Available       7.0.0
//

[_public] int
iWarpType_IPJ (
               IPJ   // IPJ object
               );


//-----------------------------------------------------------------------------------------------------------
// MakeProjected_IPJ   Create a default projected coordinate system from lat-long ranges.
//
// Returns             Nothing
//
// Notes               
//                     Terminates with invalid or unsupported ranges.
//                     If the map crosses the equator, or if map is within 20 degrees of the
//                     equator, uses an equatorial mercator projection centered at the central
//                     longitude. Otherwise, uses a Lambert Conic Conformal (1SP) projection
//                     for the map. Global maps outside of +/- 70 degrees latitude are not
//                     supported.
//                     
//
// Available           5.1.5
//

[_public] void
MakeProjected_IPJ (
                   IPJ,   // IPJ to modify
                   real,  // Minimum longitude
                   real,  // Minimum latitude
                   real,  // Maximum longitude
                   real   // Maximum latitude
                   );


//-----------------------------------------------------------------------------------------------------------
// NewBoxResolution_IPJ   Determine a data resolution in a new coordinate system
//
// Returns                Nothing
//
// Notes                  
//                        if there are any problems reprojecting, new resolutions will
//                        dummy.  The conversion to new resolution is based on measurements
//                        along the four edges and two diagonals.
//                        
//
// Available              5.1.5
//

[_public] void
NewBoxResolution_IPJ (
                      IPJ,       // Original IPJ
                      IPJ,       // New IPJ
                      real,      // Data resolution in original IPJ
                      real,      // X minimum of bounding box in new IPJ
                      real,      // Y minimum
                      real,      // X maximum
                      real,      // Y maximum
                      var real,  // Minimum data resolution in new IPJ,
                      var real,  // Maximum data resolution in new IPJ
                      var real   // Diagonal data resolution in new IPJ
                      );


//-----------------------------------------------------------------------------------------------------------
// Read_IPJ   Read and define an IPJ from a standard file.
//
// Returns    Nothing
//
// Available  5.0.0
//

[_public] void
Read_IPJ (
          IPJ,     // IPJ object
          int,     // <define>IPJ_TYPE</define>
          string,  // String 1
          string,  // String 2
          string   // String 3
          );


//-----------------------------------------------------------------------------------------------------------
// rGetMethodParm_IPJ   Get projection method parameter
//
// Returns              Parameter setting, rDUMMY if dot used
//
// Available            5.0.0
//

[_public] real
rGetMethodParm_IPJ (
                    IPJ,  // IPJ object
                    int   // <define>IPJ_CSP</define>
                    );


//-----------------------------------------------------------------------------------------------------------
// rGetNorthAzimuth_IPJ   Return the azimuth of geographic North at a point.
//
// Returns                Azimuth (degrees CW) of geographic north from grid north at a location.
//
// Notes                  
//                        If the IPJ is not a projected coordinate system
//                        then the returned azimuth is GS_R8DM;
//                        
//
// Available              7.3.0
//

[_public] real
rGetNorthAzimuth_IPJ (
                      IPJ,   // IPJ object
                      real,  // Input X location
                      real   // Input Y location
                      );


//-----------------------------------------------------------------------------------------------------------
// rUnitScale_IPJ   Get a unit scale (m/unit) given a name
//
// Returns          Scale factor m/unit
//
// Notes            If name cannot be found, returns default.
//
// Available        5.0.0
//

[_public] real
rUnitScale_IPJ (
                string,  // Unit name, abbreviation or full name
                real     // Default to return if name not found
                );


//-----------------------------------------------------------------------------------------------------------
// Serial_IPJ   Serialize IPJ to a BF.
//
// Returns      Nothing
//
// Available    5.0.0
//

[_public] void
Serial_IPJ (
            IPJ,  // IPJ
            BF    // BF
            );


//-----------------------------------------------------------------------------------------------------------
// SerialFGDCXML_IPJ   Write the IPJ as a FDGC MetaData XML object
//
// Returns             Nothing
//
// Available           7.0.0
//

[_public] void
SerialFGDCXML_IPJ (
                   IPJ,     // IPJ object
                   string   // Name of file to export to
                   );


//-----------------------------------------------------------------------------------------------------------
// SerialISOXML_IPJ   Write the IPJ as a ISO MetaData XML object
//
// Returns            Nothing
//
// Available          7.0.0
//

[_public] void
SerialISOXML_IPJ (
                  IPJ,     // IPJ object
                  string   // Name of file to export to
                  );


//-----------------------------------------------------------------------------------------------------------
// SerialXML_IPJ   Write the IPJ as a Geosoft MetaData XML object
//
// Returns         Nothing
//
// Available       7.0.0
//

[_public] void
SerialXML_IPJ (
               IPJ,     // IPJ object
               string   // Name of file to export to
               );


//-----------------------------------------------------------------------------------------------------------
// Set3DInverted_IPJ   Set whether a view is inverted (must be 3D already)
//
// Returns             Nothing
//
// Available           6.3.1
//

[_public] void
Set3DInverted_IPJ (
                   IPJ,  // IPJ Object
                   int   // Inverted (0 or 1)
                   );


//-----------------------------------------------------------------------------------------------------------
// Set3DInvertedAngles_IPJ   Set whether the angles in this view are inverted (must be 3D already)
//
// Returns                   Nothing
//
// Available                 6.3.1
//

[_public] void
Set3DInvertedAngles_IPJ (
                         IPJ,  // IPJ Object
                         int   // Inverted (0 or 1)
                         );


//-----------------------------------------------------------------------------------------------------------
// Set3DView_IPJ   Set 3D orientation parameters
//
// Returns         Nothing
//
// Notes           
//                 Sets up translation, scaling and rotation in all three directions
//                 for 3D objects.
//                 
//
// Available       6.3.0
//

[_public] void
Set3DView_IPJ (
               IPJ,   // IPJ object
               real,  // X location of view origin
               real,  // Y location of view origin
               real,  // Z location of view origin
               real,  // Rotation in X
               real,  // Rotation in Y
               real,  // Rotation in Z
               real,  // Scaling in X
               real,  // Scaling in Y
               real   // Scaling in Z
               );


//-----------------------------------------------------------------------------------------------------------
// Set3DViewEx_IPJ   Set 3D orientation parameters with new flags
//
// Returns           Nothing
//
// Notes             
//                   Sets up translation, scaling and rotation in all three directions
//                   for 3D objects.
//                   
//
// Available         7.0.0
//

[_public] void
Set3DViewEx_IPJ (
                 IPJ,   // IPJ object
                 real,  // X location of view origin
                 real,  // Y location of view origin
                 real,  // Z location of view origin
                 real,  // Rotation in X
                 real,  // Rotation in Y
                 real,  // Rotation in Z
                 real,  // Scaling in X
                 real,  // Scaling in Y
                 real,  // Scaling in Z
                 int,   // <define>IPJ_3D_ROTATE</define>
                 int    // <define>IPJ_3D_FLAG</define>
                 );


//-----------------------------------------------------------------------------------------------------------
// Set3DViewFromAxes_IPJ   Set 3D orientation parameters
//
// Returns                 Nothing
//
// Notes                   
//                         Sets up translation, scaling and rotation in all three directions
//                         for 3D objects, based on input origin and X and Y axis vectors.
//                         
//
// Available               9.0.0
//

[_public] void
Set3DViewFromAxes_IPJ (
                       IPJ,   // IPJ object
                       real,  // X location of view origin
                       real,  // Y location of view origin
                       real,  // Z location of view origin
                       real,  // X axis X component
                       real,  // X axis Y component
                       real,  // X axis Z component
                       real,  // Y axis X component
                       real,  // Y axis Y component
                       real,  // Y axis Z component
                       real,  // Scaling in X
                       real,  // Scaling in Y
                       real   // Scaling in Z
                       );


//-----------------------------------------------------------------------------------------------------------
// SetCrookedSectionView_IPJ   Set up the crooked section view.
//
// Returns                     Nothing
//
// Notes                       
//                             A non-plane section. It is a vertical section which curves along a path in
//                             (X, Y).
//                             
//
// Available                   7.2.0
//

[_public] void
SetCrookedSectionView_IPJ (
                           IPJ,  // IPJ object
                           VV,   // Section X locations (e.g. distance along the curve)
                           VV,   // True X
                           VV,   // True Y
                           int   // Use logarithmic Y-axis (usually for data profiles) 0:No, 1:Yes
                           );


//-----------------------------------------------------------------------------------------------------------
// SetDepthSectionView_IPJ   Set depth section orientation parameters
//
// Returns                   Nothing
//
// Available                 7.0.0
//

[_public] void
SetDepthSectionView_IPJ (
                         IPJ,   // IPJ object
                         real   // View Y value for Depth = 0.0.
                         );


//-----------------------------------------------------------------------------------------------------------
// SetESRI_IPJ   Set coordinate system from an ESRI prj coordinate string
//
// Returns       Nothing
//
// Notes         
//               If the projection is not supported in Geosoft, the
//               IPJ will be unknown.
//               
//
// Available     5.1.8
//

[_public] void
SetESRI_IPJ (
             IPJ,     // IPJ object
             string   // ESRI prj format projection string
             );


//-----------------------------------------------------------------------------------------------------------
// SetGXF_IPJ   Set coordinate system from GXF style strings.
//
// Returns      Nothing
//
// Notes        
//              Simplest Usage:
//              
//              The coordinate system can be resolved from the "coordinate system name"
//              if the name is specified using an EPSG number or naming convention such as:
//              
//              "datum / projection"  (example: "Arc 1960 / UTM zone 37S")
//              
//              Where:
//              "datum" is the EPSG datum name (eg. NAD83).  All supported datums are
//              listed in ...usercsvdatum.csv.
//              "projection" is the EPSG coordinate system map projection.
//              datum name (eg. "UTM zone 10N").  All supported coordinate
//              system projections are listed in ...user/csv/transform.csv.
//              All EPSG known combined coordinate systems of the earth are
//              listed in ...user/csv/ipj_pcs.csv.
//              
//              To define a geographic (longitude, latitude) oordinate system, specify
//              the datum name alone (ie "Arc 1960").  EPSG numbers can also be used, so in
//              the example above the name can be "21037".
//              
//              The coordinate system may also be oriented arbitrarily in 3D relative to
//              the base coordinate system by specifying the orientation as a set of
//              6 comma-separated values between angled brackets after the coordinate system name:
//              
//              "datum / projection"<oX,oY,oZ,rX,rY,rZ>
//              21037<oX,oY,oZ,rX,rY,rZ>
//              
//              where:
//              oX,oY,oZ    is the location of the local origin on the CS
//              rX,rY,rZ    are rotations in degrees azimuth (clockwise) of
//              the local axis frame around the X, Y and Z axis
//              respectively.  A simple plane rotation will only have
//              a rotation around Z.  For example:
//              "Arc 1960 / UTM zone 37S"<525000,2500000,0,0,0,15>
//              defines a local system with origin at (525000,2500000)
//              with a rotation of 15 degrees azimuth.
//              
//              Orientation parameters not defined will default to align with the
//              base CS,  Note that although allowed, it does not make sense to have
//              an orientation on a geographic coordinate system (long,lat).
//              
//              Complete usage:
//              
//              A coordinate system can also be fully described by providing an additional
//              four strings that define the datum, map projection, length units and
//              prefered local datum transform.  Refer to GXF revision 3 for further detail:
//              http://www.geosoft.com/resources/goto/GXF-Grid-eXchange-File
//              
//              Note that coordinate system reference tables sre maintained in csv files
//              located in the .../user/csv folder found with the Geosoft installation files,
//              which will usually be located here:
//              C:\Program Files (x86)\Geosoft\Oasis montaj\user\csv
//              
//              The "datum" string can use a datum name defined in the "datum.csv" file,
//              or the local datum name from datumtrf.csv, or the local datum description
//              from ldatum.csv.
//              For a non-EPSG datum, you can define your own datum parameters in the
//              Datum stringfield as follows:
//              
//              "*YourDatumName",major_axis,flattening(or eccentricity)[,prime_meridian]
//              
//              where
//              The * before "YourDatumName" indicates this is a non-EPSG name.
//              major_axis is in metres.
//              flattening less than 0 is interpreted as eccentricity (0 indicates a sphere).
//              prime_meridian is optional, specified in degrees of longitude relative to
//              Greenwich.
//              
//              The "Projection" can contain a projection system defined in the
//              "transform.csv" file, or the name of a projection type followed by projection
//              parameters.  Geographic coordinates systems (long/lat only) must leave
//              "projection" blank.
//              
//              Projection names not defined in "transform.csv" can be defined in the
//              "projection" string as follows:
//              
//              method,length_units,P1,P2,...
//              
//              where:
//              
//              "method" is a method from the table "transform_parameters.csv".
//              "length_units" is a "Unit_length" from units.csv.
//              P1 through P8 (or fewer) are the projection parameters for the method
//              as defined in "transform_parameters.csv", and in the order defined.
//              Parameters that are blank in "transform_parameters.csv" are omitted
//              from the list so that each method will have a minimum list of
//              parameters.
//              
//              Angular parameters must always be degrees, and may be defined a
//              decimal degree fromat, or "DEG.MM.SS.ssss".
//              Distance parameters (False Northing and False Easting) must be
//              defined in the "length_units" (string 4).
//              
//              Examples:
//              
//              Geographic long,lat on datum "Arc 1960":
//              "4210","","","",""
//              "Arc 1960","","","",""
//              "","Arc 1960","","",""
//              
//              Projected Coordinate System, UTM zone 37S
//              "21037","","","",""
//              "","4210","16137","",""
//              ""Arc 1960 / UTM zone 37S"","","","",""
//              "",""Arc 1960"","UTM zone 37S","",""
//              "",""Arc 1960"","UTM zone 37S","m",""
//              "",""Arc 1960"","UTM zone 37S","m,1.0",""
//              "",""Arc 1960"","UTM zone 37S","m,1.0","");
//              "",""Arc 1960"","UTM zone 37S","m","Arc 1960 to WGS 84 (1)"
//              
//              Locally oriented coordinate system (origin at 525000,2500000, rotated 15 deg):
//              "21037<525000,2500000,0,0,0,15>","","","",""
//              "<525000,2500000,0,0,0,15>","4210","16137","",""
//              ""Arc 1960 / UTM zone 37S"<525000,2500000,0,0,0,15>","","","",""
//              
//
// Available    5.0.0
//

[_public] void
SetGXF_IPJ (
            IPJ,     // IPJ object
            string,  // "projection name" or PCS_NAME from ipj_pcs.csv (datum / projection) or EPSG coordinate system code number or "<file.prj>" projection file name or "<file.wrp>" warp file name
            string,  // "datum name"[, major axis, elipticity, prime meridian] or DATUM from datum.csv or EPSG datum code number
            string,  // "method name", parameters (P1 through P8) or "projection name"[,"method name","Units",P1,P2...] or TRANSFORM from transform.csv or EPSG transform method code number
            string,  // "unit name", convertion to metres or UNIT_LENGTH from units.csv
            string   // "local transform name"[,dX,dY,dZ,rX,rY,rZ,Scale] or DATUM_TRF from datumtrf.csv or AREA_OF_USE from ldatum.csv or EPSG local datum transform code number
            );


//-----------------------------------------------------------------------------------------------------------
// SetMethodParm_IPJ   Set projection method parameter
//
// Returns             Nothing
//
// Notes               If parameter is not valid, nothing happens.
//
// Available           5.0.0
//

[_public] void
SetMethodParm_IPJ (
                   IPJ,   // IPJ object
                   int,   // <define>IPJ_CSP</define>
                   real   // Parameter value
                   );


//-----------------------------------------------------------------------------------------------------------
// SetMICoordSys_IPJ   Set coordinate system from a MapInfo coordsys command
//
// Returns             Nothing
//
// Available           5.1.4
//

[_public] void
SetMICoordSys_IPJ (
                   IPJ,     // IPJ object
                   string,  // MapInfo Coordinate System
                   string   // MapInfo Units
                   );


//-----------------------------------------------------------------------------------------------------------
// SetNormalSectionView_IPJ   Set normal section orientation parameters
//
// Returns                    Nothing
//
// Notes                      
//                            This section is the type where values are projected
//                            normal to the section, and the "Y" values in a grid
//                            do not necessarily correspond to the elvations for a swung section.
//                            
//
// Available                  7.0.0
//

[_public] void
SetNormalSectionView_IPJ (
                          IPJ,   // IPJ object
                          real,  // X location of view origin
                          real,  // Y location of view origin
                          real,  // Z location of view origin
                          real,  // Section azimuth - degrees CCW from north
                          real   // Section swing -90 < swing < 90.
                          );


//-----------------------------------------------------------------------------------------------------------
// SetPlanView_IPJ   Set plan orientation parameters.
//
// Returns           Nothing
//
// Notes             
//                   This sets up the orientation of an IPJ for plan view plots,
//                   for instance in Wholeplot. These differ from regular plan
//                   map views in that the elevation of the view plane is set, and
//                   the view may be rotated. In addition, when viewed in a map,
//                   a view with this IPJ will give a status bar location (X, Y, Z)
//                   of the actual location in space, as opposed to just the X, Y of
//                   the view plane itself.
//                   
//
// Available         5.1.6
//

[_public] void
SetPlanView_IPJ (
                 IPJ,   // IPJ object
                 real,  // X location of view origin
                 real,  // Y location of view origin
                 real,  // Z location of view origin
                 real   // Rotation CCW from normal XY coords
                 );


//-----------------------------------------------------------------------------------------------------------
// SetSectionView_IPJ   Set section orientation parameters
//
// Returns              Nothing
//
// Notes                
//                      This sets up the orientation of an IPJ for section view plots,
//                      for instance in Wholeplot. In addition, when viewed in a map,
//                      a view with this IPJ will give a status bar location (X, Y, Z)
//                      of the actual location in space, as opposed to just the X, Y of
//                      the view plane itself.
//                      Swung sections are tricky because they are set up for section
//                      plots in such a way that the vertical axis remains "true"; points
//                      are projected horizontally to the viewing plane, independent of the
//                      swing angle. In other words, all locations in 3D space viewed using this
//                      projection will plot on the same horizontal line in the map view.
//                      This function is NOT suitable for simply creating
//                      an orientation for a dipping grid or view.
//                      
//
// Available            5.1.6
//

[_public] void
SetSectionView_IPJ (
                    IPJ,   // IPJ object
                    real,  // X location of view origin
                    real,  // Y location of view origin
                    real,  // Z location of view origin
                    real,  // Section azimuth - degrees CCW from north
                    real   // Section swing -90 < swing < 90.
                    );


//-----------------------------------------------------------------------------------------------------------
// SetWMSCoordSys_IPJ   Set coordinate system from a WMS coordsys string.
//
// Returns              Nothing
//
// Notes                
//                      WMS coordinate strings supported:
//                      
//                      
//                      EPSG:code
//                      
//                      where "code" is the EPSG code number
//                      "EPSG:4326"  is geographic "WGS 84" (see datum.csv)
//                      "EPSG:25834" is projected "ETRS89 / UTM zone 34N"
//                      (see ipj_pcs.csv)
//                      
//                      The bounding box for EPSG systems must be defined in the
//                      EPSG coordinate system.  If a bounding box is provided,
//                      it will not be changed.
//                      
//                      
//                      AUTO:wm_id,epsg_units,lon,lat (see OGC documentation)
//                      
//                      for "AUTO" coordinates, the "epsg_units" is the units
//                      of the bounding box.  This procedure will transform
//                      the supplied bounding box from these units to the
//                      units of the projection.  Normally, this is from
//                      long/lat (9102) to metres (9001).
//                      
//
// Available            5.1.5
//

[_public] void
SetWMSCoordSys_IPJ (
                    IPJ,     // IPJ object
                    string,  // WMS style coordinate string
                    real,    // Minimum X bounding box
                    real,    // Minimum Y
                    real,    // Maximum X
                    real     // Maximum Y
                    );


//-----------------------------------------------------------------------------------------------------------
// SetXML_IPJ   Set an IPJ from a Geosoft Metadata XML string
//
// Returns      Nothing
//
// Available    7.0.0
//

[_public] void
SetXML_IPJ (
            IPJ,     // IPJ object
            string   // XML string to set
            );


//-----------------------------------------------------------------------------------------------------------
// Get3DMatrixOrientation_IPJ   Gets the coefficients of a 3D matrix orientation.
//
// Returns                      Nothing
//
// Available                    8.5.0
//

[_public] void
Get3DMatrixOrientation_IPJ (
                            IPJ,       // IPJ object
                            var real,  // Row 0 Element 0
                            var real,  // Row 0 Element 1
                            var real,  // Row 0 Element 2
                            var real,  // Row 0 Element 3
                            var real,  // Row 1 Element 0
                            var real,  // Row 1 Element 1
                            var real,  // Row 1 Element 2
                            var real,  // Row 1 Element 3
                            var real,  // Row 2 Element 0
                            var real,  // Row 2 Element 1
                            var real,  // Row 2 Element 2
                            var real,  // Row 2 Element 3
                            var real,  // Row 3 Element 0
                            var real,  // Row 3 Element 1
                            var real,  // Row 3 Element 2
                            var real   // Row 3 Element 3
                            );


//-----------------------------------------------------------------------------------------------------------
// Set3DMatrixOrientation_IPJ   Apply a 3D orientation directly using matrix coefficients.
//
// Returns                      Nothing
//
// Available                    8.5.0
//

[_public] void
Set3DMatrixOrientation_IPJ (
                            IPJ,   // IPJ object
                            real,  // Row 0 Element 0
                            real,  // Row 0 Element 1
                            real,  // Row 0 Element 2
                            real,  // Row 0 Element 3
                            real,  // Row 1 Element 0
                            real,  // Row 1 Element 1
                            real,  // Row 1 Element 2
                            real,  // Row 1 Element 3
                            real,  // Row 2 Element 0
                            real,  // Row 2 Element 1
                            real,  // Row 2 Element 2
                            real,  // Row 2 Element 3
                            real,  // Row 3 Element 0
                            real,  // Row 3 Element 1
                            real,  // Row 3 Element 2
                            real   // Row 3 Element 3
                            );


//-----------------------------------------------------------------------------------------------------------
// ReprojectSectionGrid_IPJ   Reproject a section grid
//
// Returns                    Nothing
//
// Notes                      
//                            Reproject a section grid to a new IPJ, adjusting its orientation and registration so that
//                            it remains in the same location.
//                            
//
// Available                  9.0.0
//

[_public] void
ReprojectSectionGrid_IPJ (
                          IPJ,       // Initial projected IPJ, optionally including an orientation
                          IPJ,       // Reprojected IPJ on input (need not include an orientation). On output contains the same
//                                   type of orientation as the initial IPJ, adjusted to be in the same location.
                          var real,  // X origin of grid (input initial value, output new value)
                          var real,  // Y origin of grid (input initial value, output new value)
                          var real,  // X cell size of grid (input initial value, output new value)
                          var real,  // Y cell size of grid (input initial value, output new value)
                          var real   // Grid rotation (degrees CCW) (input initial value, output new value)
                          );





#endif

