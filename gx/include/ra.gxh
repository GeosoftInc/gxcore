//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// 
// The RA class is used to access ASCII files sequentially or
// by line number. The files are opened in read-only mode, so no
// write operations are defined
// 
//
//-----------------------------------------------------------------------------------------------------------



#ifndef RA_GXH_DEFINED
#define RA_GXH_DEFINED

//-----------------------------------------------------------------------------------------------------------
// Create_RA   Creates RA
//
// Returns     RA Object
//
// Available   5.0.0
//

[_public] RA
Create_RA (
           string   // Name of the file
           );


//-----------------------------------------------------------------------------------------------------------
// CreateSBF_RA   Creates RA on an SBF
//
// Returns        RA Object
//
// Notes          
//                This method allows you to open an RA in a structured file
//                storage (an SBF).  SBFs can be created inside other data
//                containers, such as workspaces, maps, images and databases.
//                This lets you store application specific information together
//                with the data to which it applies.
//                
//
// See also       sbf.gxh
//
// Available      5.0.0
//

[_public] RA
CreateSBF_RA (
              SBF,     // Storage
              string   // Name of the file
              );


//-----------------------------------------------------------------------------------------------------------
// Destroy_RA   Destroy RA
//
// Returns      Nothing
//
// Available    5.0.0
//

[_public] void
Destroy_RA (
            RA   // RA to destroy
            );


//-----------------------------------------------------------------------------------------------------------
// IiGets_RA   Get next full line from RA
//
// Returns     
//             0 - Ok
//             1 - End of file
//             
//
// Available   5.0.0
//

[_public] int
IiGets_RA (
           RA,          // RA handle
           var string,  // Buffer in which to place string
           int          // Maximum length of the string buffer
           );

#define iGets_RA(A, B) IiGets_RA(A, B, sizeof(B))


//-----------------------------------------------------------------------------------------------------------
// iLen_RA   Returns the total number of lines in RA
//
// Returns   # of lines in the RA.
//
// Available 5.0.0
//

[_public] int
iLen_RA (
         RA   // RA handle
         );


//-----------------------------------------------------------------------------------------------------------
// iLine_RA   Returns current line #, 0 is the first
//
// Returns    The current read line location.
//
// Notes      This will be the next line read.
//
// Available  5.0.0
//

[_public] int
iLine_RA (
          RA   // RA handle
          );


//-----------------------------------------------------------------------------------------------------------
// iSeek_RA   Position next read to specified line #
//
// Returns    
//            0 if seeked line is within the range of lines,
//            1 if outside range, line pointer will not be moved.
//            
//
// Available  5.0.0
//

[_public] int
iSeek_RA (
          RA,   // RA handle
          int   // Line #, 0 is the first.
          );





#endif

