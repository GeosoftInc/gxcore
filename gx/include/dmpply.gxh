//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// Datamine Multiple polygon object
//
//-----------------------------------------------------------------------------------------------------------



#ifndef DMPPLY_GXH_DEFINED
#define DMPPLY_GXH_DEFINED

//-----------------------------------------------------------------------------------------------------------
// _Clear_DMPPLY   Clear/remove all polygons from the DMPPLY.
//
// Returns         Nothing
//
// Available       6.0.0
//

[_licensed] void
_Clear_DMPPLY (
               DMPPLY   // DMPPLY
               );
#define Clear_DMPPLY _Clear_DMPPLY

//-----------------------------------------------------------------------------------------------------------
// Copy_DMPPLY   Copy
//
// Returns       Nothing
//
// Available     6.0.0
//

[_licensed] void
Copy_DMPPLY (
             DMPPLY,  // destination
             DMPPLY   // source
             );


//-----------------------------------------------------------------------------------------------------------
// Create_DMPPLY   Creates a DMPPLY object.
//
// Returns         DMPLY Object
//
// Available       6.0.0
//

[_licensed] DMPPLY
Create_DMPPLY (
               );


//-----------------------------------------------------------------------------------------------------------
// Destroy_DMPPLY   Destroys the DMPPLY object.
//
// Returns          Nothing
//
// Available        6.0.0
//

[_public] void
Destroy_DMPPLY (
                DMPPLY   // DMPPLY Object
                );


//-----------------------------------------------------------------------------------------------------------
// GetAzimuth_DMPPLY   Get the azimuth of a given polygon.
//
// Returns             Nothing
//
// Notes               The azimuth is the equivalent section azimuth,
//                     equal to the azimuth of the normal vector plus
//                     90 degrees.
//
// Available           6.0.0
//

[_licensed] void
GetAzimuth_DMPPLY (
                   DMPPLY,    // DMPPLY object
                   int,       // polygon number (1 to NP)
                   var real   // Azimuth (degrees) (o)
                   );


//-----------------------------------------------------------------------------------------------------------
// GetExtents_DMPPLY   Get the center, width and height of a given polygon.
//
// Returns             Nothing
//
// Available           6.0.0
//

[_licensed] void
GetExtents_DMPPLY (
                   DMPPLY,    // DMPPLY object
                   int,       // polygon number (1 to NP)
                   var real,  // Center point X (o)
                   var real,  // Center point Y (o)
                   var real,  // Center point Z (o)
                   var real,  // Width of polygon (in its plane) (o)
                   var real   // Height of polygon (Z extent) (o)
                   );


//-----------------------------------------------------------------------------------------------------------
// GetJoins_DMPPLY   Get join lines for each vertex in a specific polygon.
//
// Returns           Nothing
//
// Notes             If a specific vertex is not joined, the returned value is 0.
//                   If the vertex is joined, then the index of the join line (1 to NJoins)
//                   is returned.
//
// Available         6.0.0
//

[_licensed] void
GetJoins_DMPPLY (
                 DMPPLY,  // Datamine polygon Object
                 int,     // polygon number (1 to N)
                 VV       // INT VV of join indices (1 to NJoins).
                 );


//-----------------------------------------------------------------------------------------------------------
// GetNormalVectors_DMPPLY   Get the normal vectors of a given polygon.
//
// Returns                   Nothing
//
// Notes                     Three normalized vectors are returned.
//                           The first is horizontal, in the plane of the polygon.
//                           The second is in the vertical plane, corresponding to the
//                           "down-dip" direction.
//                           The third is the normal vector to the polygon plane.
//
// Available                 6.0.0
//

[_licensed] void
GetNormalVectors_DMPPLY (
                         DMPPLY,    // DMPPLY object
                         int,       // polygon number (1 to NP)
                         var real,  // X component (o) (Horizontal azimuth vector)
                         var real,  // Y component (o)
                         var real,  // Z component (o)
                         var real,  // X component (o) (Down-dip, in the vertical plane)
                         var real,  // Y component (o)
                         var real,  // Z component (o)
                         var real,  // X component (o) (Normal vector)
                         var real,  // Y component (o)
                         var real   // Z component (o)
                         );


//-----------------------------------------------------------------------------------------------------------
// GetPoly_DMPPLY   Get a specific polygon from a DMPPLY object.
//
// Returns          Nothing
//
// Notes            Get the number of points from the VV length.
//
// Available        6.0.0
//

[_licensed] void
GetPoly_DMPPLY (
                DMPPLY,  // DMPPLY object
                int,     // polygon number (1 to NP) (i)
                VV,      // X Locations (o)
                VV,      // Y Locations (o)
                VV       // Z Locations (o)
                );


//-----------------------------------------------------------------------------------------------------------
// GetSwing_DMPPLY   Get the swing of a given polygon.
//
// Returns           Nothing
//
// Notes             The swing is the equivalent section swing,
//                   equal to zero for vertical plates, and increasing
//                   as the normal vector goes from horizontal upward.
//
// Available         6.0.0
//

[_licensed] void
GetSwing_DMPPLY (
                 DMPPLY,    // DMPPLY object
                 int,       // polygon number (1 to NP)
                 var real   // Swing (degrees) (o)
                 );


//-----------------------------------------------------------------------------------------------------------
// GetVertex_DMPPLY   Get a vertex location from a DMPPLY object.
//
// Returns            Nothing
//
// Available          6.0.0
//

[_licensed] void
GetVertex_DMPPLY (
                  DMPPLY,    // DMPPLY object
                  int,       // polygon number (1 to NP)
                  int,       // vertex number (1 to NV)
                  var real,  // X Location (o)
                  var real,  // Y Location (o)
                  var real   // Z Location (o)
                  );


//-----------------------------------------------------------------------------------------------------------
// iNumJoins_DMPPLY   Get the number of joining lines in a DMPPLY object.
//
// Returns            Number of joining lines
//
// Available          6.0.0
//

[_licensed] int
iNumJoins_DMPPLY (
                  DMPPLY   // DMPPLY object
                  );


//-----------------------------------------------------------------------------------------------------------
// iNumPolys_DMPPLY   Get the number of polygons in a DMPPLY object.
//
// Returns            Number of polygons
//
// Notes              The value returned is the "NP" used in function descriptions
//                    below.
//
// Available          6.0.0
//

[_licensed] int
iNumPolys_DMPPLY (
                  DMPPLY   // DMPPLY object
                  );


//-----------------------------------------------------------------------------------------------------------
// iNumVertices_DMPPLY   Get the number of vertices in a polygon.
//
// Returns               Number of vertices in a polygon
//
// Notes                 The value returned is the "NV" used in function descriptions
//                       below.
//
// Available             6.0.0
//

[_licensed] int
iNumVertices_DMPPLY (
                     DMPPLY,  // DMPPLY object
                     int      // polygon number (1 to NP)
                     );


//-----------------------------------------------------------------------------------------------------------
// Load_DMPPLY   Loads a Datamine polygon file.
//
// Returns       Nothing
//
// Available     6.0.0
//

[_licensed] void
Load_DMPPLY (
             DMPPLY,  // DMPPLY Object
             string   // Name of the file to load
             );


//-----------------------------------------------------------------------------------------------------------
// MoveVertex_DMPPLY   Moves a vertex and any associated lines.
//
// Returns             Nothing
//
// Available           6.0.0
//

[_licensed] void
MoveVertex_DMPPLY (
                   DMPPLY,  // DMPPLY object
                   int,     // polygon number (1 to NP)
                   int,     // vertex number (1 to NV)
                   real,    // new location X
                   real,    // new location Y
                   real     // new location Z
                   );


//-----------------------------------------------------------------------------------------------------------
// ProjectPoly_DMPPLY   Project a polygon onto a vertical plane.
//
// Returns              Nothing
//
// Notes                Gives the location in plane coordinates of a selected polygon,
//                      after it has been projected perpendicularly onto the plane.
//                      
//                      Plane coodinates: X - horizontal in plane
//                      Y - "vertical" in plane (can be a swing)
//                      Z - horizontal, "perpendicular" to plane (RH)
//
// Available            6.0.0
//

[_licensed] void
ProjectPoly_DMPPLY (
                    DMPPLY,  // DMPPLY object
                    int,     // polygon number (1 to NP)
                    real,    // X location of plane origin in 3D
                    real,    // Y location of plane origin in 3D
                    real,    // Z location of plane origin in 3D
                    real,    // azimuth of the plane in degrees
                    real,    // swing of the plane in degrees
                    VV,      // X (horizontal along-section locations on vertical plane  (o)
                    VV,      // Y (vertical locations on vertical plane  (o)
                    VV       // Z (horizontal distances perpendicular to the plane  (o)
                    );


//-----------------------------------------------------------------------------------------------------------
// ReProjectPoly_DMPPLY   Recover polygon locations from 2D locations on vertical plane.
//
// Returns                Nothing
//
// Notes                  This is the inverse operation of ProjectPoly_DMPPLY.
//                        
//                        Input the 2D locations on the projected vertical plane. These locations
//                        are projected back onto the original polygon plane.
//
// Available              6.0.0
//

[_licensed] void
ReProjectPoly_DMPPLY (
                      DMPPLY,  // DMPPLY object
                      int,     // polygon number (1 to lNP) (i)
                      real,    // X location of plane origin in 3D (i)
                      real,    // Y location of plane origin in 3D (i)
                      real,    // Z location of plane origin in 3D (i)
                      real,    // azimuth of the plane in degrees (i)
                      VV,      // X locations on vertical plane  (i)
                      VV,      // Y (actually Z) locations on vertical plane  (i)
                      VV,      // X Locations of polygon (o)
                      VV,      // Y Locations of polygon (o)
                      VV       // Z Locations of polygon (o)
                      );


//-----------------------------------------------------------------------------------------------------------
// Save_DMPPLY   Save to a Datamine polygon file
//
// Returns       Nothing
//
// Available     6.0.0
//

[_licensed] void
Save_DMPPLY (
             DMPPLY,  // DMPPLY Object
             string   // Name of the file to save to
             );


//-----------------------------------------------------------------------------------------------------------
// SetPoly_DMPPLY   Set a specific polygon into a DMPPLY object.
//
// Returns          Nothing
//
// Notes            Get the number of points from the VV length.
//
// Available        6.0.0
//

[_licensed] void
SetPoly_DMPPLY (
                DMPPLY,  // DMPPLY object
                int,     // polygon number (1 to NP) (i)
                VV,      // X Locations (i)
                VV,      // Y Locations (i)
                VV       // Z Locations (i)
                );





#endif

