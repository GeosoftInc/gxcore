//===========================================================================================================
//
// Class	
//
//-----------------------------------------------------------------------------------------------------------
// Description
//
// 
// This is not a class. This is a collection of standard
// mathematical functions, including most of the common
// logarithmic and geometric functions.
// 
//
//-----------------------------------------------------------------------------------------------------------



#ifndef MATH_GXH_DEFINED
#define MATH_GXH_DEFINED

//-----------------------------------------------------------------------------------------------------------
// CrossProduct_MATH   Cross product of two vectors.
//
// Returns             Nothing
//
// Available           6.0.0
//

[_public] void
CrossProduct_MATH (
                   real,      // X1 component
                   real,      // Y1 component
                   real,      // Z1 component
                   real,      // X2 component
                   real,      // Y2 component
                   real,      // Z2 component
                   var real,  // X3 component (output)
                   var real,  // Y3 component (output)
                   var real   // Z3 component (output)
                   );


//-----------------------------------------------------------------------------------------------------------
// iAbs_MATH   Calculate absolute value
//
// Returns     Integer
//
// Notes       Dummy values return dummy
//
// Available   6.0.1
//

[_public] int
iAbs_MATH (
           int   // Integer
           );


//-----------------------------------------------------------------------------------------------------------
// iAnd_MATH   
//             Return the unary operation result of A & B
//             
//             Returns			an integer number
//             
//             If A or B is a dummy, returns dummy.
//             
//
// Returns
//
// Available   6.3.0
//

[_public] int
iAnd_MATH (
           int,  // A
           int   // B
           );


//-----------------------------------------------------------------------------------------------------------
// iMod_MATH   Calculates the modulus of two integers
//
// Returns     Int
//
// Notes       If A or B is a dummy, returns dummy.
//
// Available   6.0.1
//

[_public] int
iMod_MATH (
           int,  // A
           int   // B (must not be zero)
           );


//-----------------------------------------------------------------------------------------------------------
// iOr_MATH   
//            Return the unary operation result of A | B
//            
//            Returns			an integer number
//            
//            If A or B is a dummy, returns dummy.
//            
//
// Returns
//
// Available  6.3.0
//

[_public] int
iOr_MATH (
          int,  // A
          int   // B
          );


//-----------------------------------------------------------------------------------------------------------
// iRound_MATH   Round to the nearest whole number
//
// Returns       Integer
//
// Notes         
//               Negative values with decimal parts larger than .5 round down (-1.5 -> 2.0)
//               Positive values with decimal parts larger than .5 round up (1.5 -> 2.0)
//               Dummy values return dummy
//               
//
// Available     6.0.1
//

[_public] int
iRound_MATH (
             real   // Round
             );


//-----------------------------------------------------------------------------------------------------------
// iXor_MATH   
//             Return the unary operation result of A ^ B
//             
//             Returns			an integer number
//             
//             If A or B is a dummy, returns dummy.
//             
//
// Returns
//
// Available   6.3.0
//

[_public] int
iXor_MATH (
           int,  // A
           int   // B
           );


//-----------------------------------------------------------------------------------------------------------
// NicerLogScale_MATH   Finds nicer min, max values for logarithmic plot scales.
//
// Returns              Nothing
//
// Notes                
//                      Will fail if the input upper bound is less than the lower
//                      bound, but will work if the two values are equal.
//                      The input bounds are overwritten.
//                      
//                      Input lower and upper bounds, returns "nicer" values.
//                      If the Fine flag is set to TRUE, the values will have the
//                      form N x 10^Y, where N is a value from 1 to 9, and 10^Y
//                      is an integral power of 10. If the Fine flag is set to
//                      FALSE, the scaling is coarse, and the bounding exact
//                      powers of 10 are returned.
//                      For example,  the values (.034, 23) return (.03, 30) for
//                      fine scaling, and (0.01, 100) for coarse scaling.
//                      
//
// Available            6.0.1
//

[_public] void
NicerLogScale_MATH (
                    var real,  // Min value (changed)
                    var real,  // Max value (changed)
                    int        // Fine flag
                    );


//-----------------------------------------------------------------------------------------------------------
// NicerScale_MATH   Compute a nicer scale for a given min and max.
//
// Returns           Nothing
//
// Available         6.0.1
//

[_public] void
NicerScale_MATH (
                 var real,  // Min value (changed)
                 var real,  // Max value (changed)
                 var real,  // Inc value (returned)
                 var int    // Power value (returned)
                 );


//-----------------------------------------------------------------------------------------------------------
// Normalise3D_MATH   Scale a vector to unit length.
//
// Returns            Nothing
//
// Notes              
//                    Divides each component by the vector
//                    magnitude.
//                    
//
// Available          6.0.0
//

[_public] void
Normalise3D_MATH (
                  var real,  // X component (altered)
                  var real,  // Y component (altered)
                  var real   // Z component (altered)
                  );


//-----------------------------------------------------------------------------------------------------------
// rAbs_MATH   Calculate absolute value
//
// Returns     Real
//
// Notes       Dummy values return dummy
//
// Available   6.0.1
//

[_public] real
rAbs_MATH (
           real   // Real
           );


//-----------------------------------------------------------------------------------------------------------
// rArcCos_MATH   Calculate the arccosine
//
// Returns        Real
//
// Notes          Dummy values or values < -1 or > 1 return dummy
//
// Available      6.0.1
//

[_public] real
rArcCos_MATH (
              real   // Real
              );


//-----------------------------------------------------------------------------------------------------------
// rArcSin_MATH   Calculate the arcsin
//
// Returns        Real
//
// Notes          Dummy values or values < -1 or > 1 return dummy
//
// Available      6.0.1
//

[_public] real
rArcSin_MATH (
              real   // Real
              );


//-----------------------------------------------------------------------------------------------------------
// rArcTan_MATH   Calculate the arctan
//
// Returns        Real
//
// Notes          Dummy values return dummy
//
// Available      6.0.1
//

[_public] real
rArcTan_MATH (
              real   // Real
              );


//-----------------------------------------------------------------------------------------------------------
// rArcTan2_MATH   Calculate ArcTan(Y/X)
//
// Returns         Real
//
// Notes           If either X or Y is a dummy, returns dummy
//
// Available       6.0.1
//

[_public] real
rArcTan2_MATH (
               real,  // Y
               real   // X
               );


//-----------------------------------------------------------------------------------------------------------
// rCeil_MATH   Calculates the ceiling of the value
//
// Returns      Real
//
// Notes        Dummy values return dummy
//
// Available    6.0.1
//

[_public] real
rCeil_MATH (
            real   // Real
            );


//-----------------------------------------------------------------------------------------------------------
// rCos_MATH   Calculate the cosine
//
// Returns     Real
//
// Notes       Dummy values return dummy
//
// Available   6.0.1
//

[_public] real
rCos_MATH (
           real   // Angle in radians
           );


//-----------------------------------------------------------------------------------------------------------
// rDotProduct3D_MATH   Compute Dot product of two vectors.
//
// Returns              Dot product
//
// Available            6.0.0
//

[_public] real
rDotProduct3D_MATH (
                    real,  // X1 component
                    real,  // Y1 component
                    real,  // Z1 component
                    real,  // X2 component
                    real,  // Y2 component
                    real   // Z2 component
                    );


//-----------------------------------------------------------------------------------------------------------
// rExp_MATH   Calculate e raised to the power of X
//
// Returns     Real
//
// Notes       Dummy values return dummy
//
// Available   6.0.1
//

[_public] real
rExp_MATH (
           real   // X
           );


//-----------------------------------------------------------------------------------------------------------
// rFloor_MATH   Calculates the floor of the value
//
// Returns       Real
//
// Notes         Dummy values return dummy
//
// Available     6.0.1
//

[_public] real
rFloor_MATH (
             real   // Real
             );


//-----------------------------------------------------------------------------------------------------------
// rHypot_MATH   sqrt(X*X + Y*Y)
//
// Returns       Real
//
// Notes         If either X or Y is a dummy, the returned value is dummy
//
// Available     6.0.1
//

[_public] real
rHypot_MATH (
             real,  // X
             real   // Y
             );


//-----------------------------------------------------------------------------------------------------------
// rLambdaTrans_MATH   Performs lambda transform on a value.
//
// Returns             The lambda transformed value
//
// Notes               
//                     Returns 0 for input Z = 0.
//                     returns log10(Z) for lambda = 0.
//                     returns (Z^lambda - 1)/lambda for Z > 0.
//                     returns dummy for Z = dummy.
//                     
//
// See also            rLambdaTransRev_MATH
//
// Available           6.0.1
//

[_public] real
rLambdaTrans_MATH (
                   real,  // Z Value
                   real   // Lambda value
                   );


//-----------------------------------------------------------------------------------------------------------
// rLambdaTransRev_MATH   Performs a reverse lambda transform on a value.
//
// Returns                The original non-lambda transformed value
//
// Notes                  See rLambdaTrans.
//
// See also               rLambdaTrans_MATH
//
// Available              6.0.1
//

[_public] real
rLambdaTransRev_MATH (
                      real,  // Lambda transformed Z Value
                      real   // Lambda value
                      );


//-----------------------------------------------------------------------------------------------------------
// rLog_MATH   Calculate the natural log
//
// Returns     Real
//
// Notes       Dummy values return dummy
//
// Available   6.0.1
//

[_public] real
rLog_MATH (
           real   // Real
           );


//-----------------------------------------------------------------------------------------------------------
// rLog10_MATH   Calculate the base 10 log
//
// Returns       Real
//
// Notes         Dummy values return dummy
//
// Available     6.0.1
//

[_public] real
rLog10_MATH (
             real   // Real
             );


//-----------------------------------------------------------------------------------------------------------
// rLogZ_MATH   
//              Given a Z value and the Log style and Log Minimum this
//              function will return the log value.
//              
//
// Returns      The Log Value.
//
// Notes        
//              Mode = 0 (regular log mode)
//              
//              Returns:
//              Log10(Z)  for Z > minimum
//              Log10(minimum) for Z <= minimum
//              
//              Mode = 1 (log / linear / negative log mode)
//              
//              Returns:
//              minimum * ( log10( |Z| / minimum) + 1 )   for Z > minimum
//              Z for |Z| <= minimum   (the linear part of the range)
//              -minimum * ( log10( |Z| / minimum) + 1 )   for Z < -minimum
//              
//
// See also     rUnLogZ_MATH
//
// Available    6.0.1
//

[_public] real
rLogZ_MATH (
            real,  // Z Value
            int,   // Log Mode (0 - Log, 1 - LogLinearLog)
            real   // Log Minimum (must be greater than 0)
            );


//-----------------------------------------------------------------------------------------------------------
// rMod_MATH   Calculates the modulus of two reals (A mod B)
//
// Returns     Real
//
// Notes       
//             The modulus of A with respect to B is defined
//             as the difference of A with the largest integral multiple of B
//             smaller than or equal to A.
//             
//             e.g.   A  mod B
//             20 mod 10 = 0
//             20 mod 9 = 2
//             
//             f A or B is a dummy, returns dummy.
//             
//
// Available   6.0.1
//

[_public] real
rMod_MATH (
           real,  // A
           real   // B (must not be zero)
           );


//-----------------------------------------------------------------------------------------------------------
// RotateVector_MATH   Rotate a vector about an axis.
//
// Returns             Nothing
//
// Notes               
//                     Rotates a vector by the input angle around an arbitrary axis.
//                     Angles are measured clockwise looking along the axis (away from the origin).
//                     Assumes a right hand coordinate system.
//                     
//
// Available           6.0.0
//

[_public] void
RotateVector_MATH (
                   real,      // X1 component (vector to rotate)
                   real,      // Y1 component
                   real,      // Z1 component
                   real,      // Angle to rotate, CW in radians
                   real,      // X2 component (axis of rotation)
                   real,      // Y2 component
                   real,      // Z2 component
                   var real,  // X3 component  (rotated vector, can
                   var real,  // Y3 component   be the same as input)
                   var real   // Z3 component
                   );


//-----------------------------------------------------------------------------------------------------------
// rPow_MATH   Calculate X raised to the power of Y
//
// Returns     Real
//
// Notes       If either X or Y is a dummy, returns dummy
//
// Available   6.0.1
//

[_public] real
rPow_MATH (
           real,  // X
           real   // Y
           );


//-----------------------------------------------------------------------------------------------------------
// rRand_MATH   Get a  random number between 0 and 1
//
// Returns      A real number
//
// Notes        
//              Use SRand_MATH to seed the random number generator before a series of
//              calls to this function are made.
//              The standard "C" function rand() is called.
//              
//
// Available    6.3.0
//

[_public] real
rRand_MATH (
            );


//-----------------------------------------------------------------------------------------------------------
// rRound_MATH   Round to n significant digits
//
// Returns       Real
//
// Notes         
//               Negative values ending in 5XXX to n sig digits round down
//               Positive values ending in 5XXX to n sig digits round up
//               Dummy values return dummy
//               
//
// Available     6.0.1
//

[_public] real
rRound_MATH (
             real,  // Real
             int    // Number of significant digits to round to
             );


//-----------------------------------------------------------------------------------------------------------
// rSign_MATH   Determine return value based on value of Z1
//
// Returns      |Z2| if Z1>0, -|Z2| if Z1<0, 0 if Z1 = 0, and Z2 if Z1 = Dummy
//
// Notes        Dummy values return dummy
//
// Available    6.0.1
//

[_public] real
rSign_MATH (
            real,  // Z1
            real   // Z2
            );


//-----------------------------------------------------------------------------------------------------------
// rSin_MATH   Calculate the sin
//
// Returns     Real
//
// Notes       Dummy values return dummy
//
// Available   6.0.1
//

[_public] real
rSin_MATH (
           real   // Angle in radians
           );


//-----------------------------------------------------------------------------------------------------------
// rSqrt_MATH   Calculate the square root
//
// Returns      Real
//
// Notes        Dummy values return dummy
//
// Available    6.0.1
//

[_public] real
rSqrt_MATH (
            real   // Real
            );


//-----------------------------------------------------------------------------------------------------------
// rTan_MATH   Calculate the tangent
//
// Returns     Real
//
// Notes       Dummy values return dummy
//
// Available   6.0.1
//

[_public] real
rTan_MATH (
           real   // Angle in radians
           );


//-----------------------------------------------------------------------------------------------------------
// rUnLogZ_MATH   Inverse of rLogZ
//
// Returns        The original value
//
// Notes          See Notes for rLogZ.
//
// See also       rLogZ_MATH
//
// Available      6.0.1
//

[_public] real
rUnLogZ_MATH (
              real,  // Log value
              int,   // Log Mode (0 - Log, 1 - LogLinearLog)
              real   // Log Minimum (must be greater than 0)
              );


//-----------------------------------------------------------------------------------------------------------
// SRand_MATH   Seed the random-number generator with current time
//
// Returns      Nothing
//
// Notes        
//              Use the rRand_MATH function to create a random number between  0 and 1.
//              The standard "C" function srand() is called.
//              
//
// Available    6.3.0
//

[_public] void
SRand_MATH (
            );





#endif

